import { useEffect } from 'react';
import { pwaLifecycleManager } from '@/utils/pwaLifecycleManager';
import { LifecycleOptions } from '@/types/pwa';

// Admin-specific PWA lifecycle hook with optimized settings
export const useAdminPWALifecycle = (id: string, onRefresh?: () => void) => {
  useEffect(() => {
    const options: LifecycleOptions = {
      onVisibilityChange: (isHidden: boolean) => {
        if (!isHidden && onRefresh) {
          // –ú—è–≥–∫–∏–π —Ä–µ—Ñ—Ä–µ—à —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –∞–¥–º–∏–Ω–∫—É
          console.log(`üè† Admin PWA: Page visible, soft refresh for ${id}`);
          setTimeout(onRefresh, 300); // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        }
      },
      onPageShow: (event: PageTransitionEvent) => {
        if (event.persisted) {
          console.log(`üè† Admin PWA: Restored from bfcache for ${id}`);
          // –ù–ï –¥–µ–ª–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ—Ñ—Ä–µ—à –ø—Ä–∏ bfcache - –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –æ—Å—Ç–∞—Ç—å—Å—è
        }
      },
      enableBfcacheOptimization: true,
      skipFastSwitching: true,
      debounceDelay: 500,
    };

    return pwaLifecycleManager.register(id, options);
  }, [id, onRefresh]);

  return {
    isPWA: pwaLifecycleManager.shouldOptimizeForPWA(),
    forceSave: pwaLifecycleManager.forceSave,
    status: pwaLifecycleManager.getPWAStatus(),
  };
};