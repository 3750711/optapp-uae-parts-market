import React, { useState, useEffect, useCallback, useMemo } from "react";
import { useNavigate } from "react-router-dom";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { supabase } from "@/integrations/supabase/client";
import { useAuth } from "@/contexts/AuthContext";
import Layout from "@/components/layout/Layout";
import { useToast } from "@/hooks/use-toast";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { useCarBrandsAndModels } from "@/hooks/useCarBrandsAndModels";
import { useProductTitleParser } from "@/utils/productTitleParser";
import { useFormAutosave } from "@/hooks/useFormAutosave";
import { ErrorBoundary } from "@/components/ui/ErrorBoundary";
import {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator
} from "@/components/ui/breadcrumb";
import { Link } from "react-router-dom";
import { Home } from "lucide-react";
import OptimizedAddProductForm, { productSchema, ProductFormValues } from "@/components/product/OptimizedAddProductForm";
import { Progress } from "@/components/ui/progress";
import { AlertCircle } from "lucide-react";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Badge, Sparkles } from "lucide-react";

const SellerAddProduct = () => {
  const navigate = useNavigate();
  const { user, profile } = useAuth();
  const { toast } = useToast();
  const [imageUrls, setImageUrls] = useState<string[]>([]);
  const [videoUrls, setVideoUrls] = useState<string[]>([]);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [searchBrandTerm, setSearchBrandTerm] = useState("");
  const [searchModelTerm, setSearchModelTerm] = useState("");
  const [progressStatus, setProgressStatus] = useState({ step: "", progress: 0 });
  const [primaryImage, setPrimaryImage] = useState<string>("");
  const [showDraftSaved, setShowDraftSaved] = useState(false);
  
  // Use our custom hook for car brands and models
  const { 
    brands, 
    brandModels, 
    selectBrand,
    findBrandIdByName,
    findModelIdByName, 
    isLoading: isLoadingCarData 
  } = useCarBrandsAndModels();

  const form = useForm<ProductFormValues>({
    resolver: zodResolver(productSchema),
    defaultValues: {
      title: "",
      price: "",
      brandId: "",
      modelId: "",
      placeNumber: "1",
      description: "",
      deliveryPrice: "0",
    },
    mode: "onChange",
  });

  // Initialize our title parser
  const { parseProductTitle } = useProductTitleParser(
    brands,
    brandModels,
    findBrandIdByName,
    findModelIdByName
  );

  // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã
  const formData = form.watch();
  const { loadSavedData, clearSavedData } = useFormAutosave({
    key: 'seller_add_product',
    data: formData,
    enabled: !isSubmitting
  });

  // Breadcrumbs –Ω–∞–≤–∏–≥–∞—Ü–∏—è
  const breadcrumbItems = useMemo(() => [
    { label: "–ü—Ä–æ—Ñ–∏–ª—å –ø—Ä–æ–¥–∞–≤—Ü–∞", href: "/seller/profile" },
    { label: "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä" }
  ], []);

  const watchBrandId = form.watch("brandId");
  const watchModelId = form.watch("modelId");
  const watchTitle = form.watch("title");

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    const savedData = loadSavedData();
    if (savedData && Object.keys(savedData).length > 0) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ä–º–∞ –ø—É—Å—Ç–∞ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π —á–µ—Ä–Ω–æ–≤–∏–∫–∞
      const currentFormIsEmpty = !formData.title && !formData.price && !formData.brandId;
      
      if (currentFormIsEmpty) {
        Object.entries(savedData).forEach(([key, value]) => {
          if (value && key in formData) {
            form.setValue(key as keyof ProductFormValues, value as any);
          }
        });
        
        setShowDraftSaved(true);
        setTimeout(() => setShowDraftSaved(false), 5000);
      }
    }
  }, [loadSavedData, form]);

  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞–∑–≤–∞–Ω–∏—è
  const handleTitleChange = useCallback((title: string) => {
    if (title && brands.length > 0 && !watchBrandId) {
      const { brandId, modelId } = parseProductTitle(title);
      
      if (brandId) {
        form.setValue("brandId", brandId);
        
        if (modelId) {
          form.setValue("modelId", modelId);
        }

        toast({
          title: "–ê–≤—Ç–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ",
          description: "–ú–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
        });
      }
    }
  }, [brands, brandModels, parseProductTitle, form, watchBrandId, toast]);

  // –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π useEffect –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  useEffect(() => {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞–∑–≤–∞–Ω–∏—è —Å debounce
    if (watchTitle) {
      const timeoutId = setTimeout(() => {
        handleTitleChange(watchTitle);
      }, 500);

      return () => clearTimeout(timeoutId);
    }
  }, [watchTitle, handleTitleChange]);

  // –û—Ç–¥–µ–ª—å–Ω—ã–π useEffect –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –±—Ä–µ–Ω–¥–∞ –∏ –º–æ–¥–µ–ª–∏
  useEffect(() => {
    if (watchBrandId) {
      selectBrand(watchBrandId);
      
      // Reset model if it doesn't belong to the selected brand
      if (watchModelId) {
        const modelBelongsToBrand = brandModels.some(model => 
          model.id === watchModelId && model.brand_id === watchBrandId
        );
        if (!modelBelongsToBrand) {
          form.setValue("modelId", "");
        }
      }
    }

    // Validate model when brandModels change
    if (watchModelId && brandModels.length > 0) {
      const modelExists = brandModels.some(model => model.id === watchModelId);
      if (!modelExists) {
        form.setValue("modelId", "");
      }
    }
  }, [watchBrandId, watchModelId, selectBrand, form, brandModels]);

  const handleMobileOptimizedImageUpload = useCallback((urls: string[]) => {
    setImageUrls(urls);
    
    if (!primaryImage && urls.length > 0) {
      setPrimaryImage(urls[0]);
    } else if (primaryImage && !urls.includes(primaryImage)) {
      if (urls.length > 0) {
        setPrimaryImage(urls[0]);
      } else {
        setPrimaryImage("");
      }
    }
  }, [primaryImage]);

  const onSubmit = async (values: ProductFormValues) => {
    if (!user || !profile) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –ø—Ä–æ–¥–∞–≤–µ—Ü",
        variant: "destructive",
      });
      return;
    }

    if (imageUrls.length === 0) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é",
        variant: "destructive",
      });
      return;
    }

    setIsSubmitting(true);
    setProgressStatus({ step: "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", progress: 10 });

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –±—Ä–µ–Ω–¥–∞ –∏ –º–æ–¥–µ–ª–∏ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const selectedBrand = brands.find(brand => brand.id === values.brandId);
      
      let modelName = null;
      if (values.modelId) {
        const selectedModel = brandModels.find(model => model.id === values.modelId);
        modelName = selectedModel?.name || null;
      }

      if (!selectedBrand) {
        toast({
          title: "–û—à–∏–±–∫–∞",
          description: "–í—ã–±—Ä–∞–Ω–Ω–∞—è –º–∞—Ä–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
          variant: "destructive",
        });
        setIsSubmitting(false);
        return;
      }

      const sellerName = profile.full_name || user.email || "Unknown Seller";

      setProgressStatus({ step: "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞", progress: 30 });

      // Create product first
      const { data: product, error: productError } = await supabase
        .from('products')
        .insert({
          title: values.title,
          price: parseFloat(values.price),
          condition: "–ù–æ–≤—ã–π",
          brand: selectedBrand.name,
          model: modelName,
          description: values.description || null,
          seller_id: user.id,
          seller_name: sellerName,
          status: 'pending',
          place_number: parseInt(values.placeNumber),
          delivery_price: values.deliveryPrice ? parseFloat(values.deliveryPrice) : 0,
        })
        .select('id')
        .single();

      if (productError) {
        throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: ${productError.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      }
      
      setProgressStatus({ step: "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ Cloudinary –æ–±—Ä–∞–±–æ—Ç–∫–∞", progress: 60 });

      // Save product images with primary image detection
      const productImages = imageUrls.map((url) => ({
        product_id: product.id,
        url: url,
        is_primary: url === primaryImage
      }));

      const { error: imagesError } = await supabase
        .from('product_images')
        .insert(productImages);

      if (imagesError) {
        throw new Error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${imagesError.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      }

      // If we have a primary image, trigger Cloudinary upload
      if (primaryImage) {
        setProgressStatus({ step: "–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Cloudinary", progress: 75 });
        
        try {
          console.log('üöÄ Starting Cloudinary upload for primary image:', primaryImage);
          
          const { uploadToCloudinary } = await import("@/utils/cloudinaryUpload");
          const cloudinaryResult = await uploadToCloudinary(
            primaryImage,
            product.id,
            `product_${product.id}_primary`
          );

          if (cloudinaryResult.success && cloudinaryResult.cloudinaryUrl) {
            console.log('‚úÖ Cloudinary upload successful, updating product...');
            
            // Update product with Cloudinary data
            const { error: updateError } = await supabase
              .from('products')
              .update({
                cloudinary_public_id: cloudinaryResult.publicId,
                cloudinary_url: cloudinaryResult.cloudinaryUrl,
                preview_image_url: cloudinaryResult.cloudinaryUrl
              })
              .eq('id', product.id);

            if (updateError) {
              console.error('‚ùå Failed to update product with Cloudinary data:', updateError);
            } else {
              console.log('‚úÖ Product updated with Cloudinary data');
              toast({
                title: "Cloudinary –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è",
                description: "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–µ—Ä–µ–∑ Cloudinary",
              });
            }
          } else {
            console.warn('‚ö†Ô∏è Cloudinary upload failed:', cloudinaryResult.error);
          }
        } catch (cloudinaryError) {
          console.error('üí• Cloudinary upload error:', cloudinaryError);
          // Continue with normal flow if Cloudinary fails
        }
      }
      
      setProgressStatus({ step: "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∏–¥–µ–æ", progress: 85 });

      if (videoUrls.length > 0) {
        const { error: videosError } = await supabase
          .from('product_videos')
          .insert(
            videoUrls.map((url) => ({
              product_id: product.id,
              url
            }))
          );

        if (videosError) {
          throw new Error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ: ${videosError.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
        }
      }
      
      const { data: currentProduct } = await supabase
        .from('products')
        .select('*')
        .eq('id', product.id)
        .single();

      if (currentProduct && currentProduct.status === 'active') {
        setProgressStatus({ step: "–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram", progress: 90 });
        try {
          supabase.functions.invoke('send-telegram-notification', {
            body: { productId: product.id }
          }).catch(notificationError => {
            console.error("Error sending notification:", notificationError);
          });
        } catch (notificationError) {
          console.error("Exception while sending notification:", notificationError);
        }
      }
      
      setProgressStatus({ step: "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ", progress: 100 });

      // –û—á–∏—â–∞–µ–º –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —á–µ—Ä–Ω–æ–≤–∏–∫ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
      clearSavedData();

      toast({
        title: "–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω",
        description: "–í–∞—à —Ç–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ",
      });

      navigate(`/product/${product.id}`);
    } catch (error) {
      console.error("Error adding product:", error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error instanceof Error 
          ? error.message 
          : "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        variant: "destructive",
      });
    } finally {
      setIsSubmitting(false);
      setProgressStatus({ step: "", progress: 0 });
    }
  };

  // Cleanup function for memory management
  useEffect(() => {
    return () => {
      imageUrls.forEach((url) => {
        if (url.startsWith('blob:')) {
          URL.revokeObjectURL(url);
        }
      });
    };
  }, [imageUrls]);

  return (
    <ErrorBoundary>
      <Layout>
        <div className="container mx-auto px-4 py-8">
          <div className="max-w-3xl mx-auto">
            <Breadcrumb className="mb-6">
              <BreadcrumbList>
                <BreadcrumbItem>
                  <BreadcrumbLink asChild>
                    <Link to="/" className="flex items-center text-muted-foreground hover:text-foreground transition-colors">
                      <Home className="h-4 w-4 mr-1" />
                      –ì–ª–∞–≤–Ω–∞—è
                    </Link>
                  </BreadcrumbLink>
                </BreadcrumbItem>
                <BreadcrumbSeparator />
                <BreadcrumbItem>
                  <BreadcrumbLink asChild>
                    <Link to="/seller/profile" className="text-muted-foreground hover:text-foreground transition-colors">
                      –ü—Ä–æ—Ñ–∏–ª—å –ø—Ä–æ–¥–∞–≤—Ü–∞
                    </Link>
                  </BreadcrumbLink>
                </BreadcrumbItem>
                <BreadcrumbSeparator />
                <BreadcrumbPage className="text-foreground">
                  –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
                </BreadcrumbPage>
              </BreadcrumbList>
            </Breadcrumb>
            
            <h1 className="text-3xl font-bold mb-6">–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä</h1>
            
            {showDraftSaved && (
              <Alert className="mb-6">
                <AlertCircle className="h-4 w-4" />
                <AlertDescription>
                  –ó–∞–≥—Ä—É–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —á–µ—Ä–Ω–æ–≤–∏–∫. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã.
                </AlertDescription>
              </Alert>
            )}
            
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ
                  <Badge variant="outline" className="text-xs flex items-center gap-1">
                    <Sparkles className="h-3 w-3" />
                    Cloudinary –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
                  </Badge>
                </CardTitle>
                <CardDescription>
                  –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ.
                  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ Cloudinary –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
                </CardDescription>
              </CardHeader>
              <CardContent>
                <OptimizedAddProductForm
                  form={form}
                  onSubmit={onSubmit}
                  isSubmitting={isSubmitting}
                  imageUrls={imageUrls}
                  videoUrls={videoUrls}
                  brands={brands}
                  brandModels={brandModels}
                  isLoadingCarData={isLoadingCarData}
                  watchBrandId={watchBrandId}
                  searchBrandTerm={searchBrandTerm}
                  setSearchBrandTerm={setSearchBrandTerm}
                  searchModelTerm={searchModelTerm}
                  setSearchModelTerm={setSearchModelTerm}
                  handleMobileOptimizedImageUpload={handleMobileOptimizedImageUpload}
                  setVideoUrls={setVideoUrls}
                  primaryImage={primaryImage}
                  setPrimaryImage={setPrimaryImage}
                  progressStatus={progressStatus}
                />
              </CardContent>
              
              {isSubmitting && (
                <div className="px-6 pb-4">
                  <div className="mb-2 flex justify-between items-center">
                    <span className="text-sm font-medium">{progressStatus.step || "–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞..."}</span>
                    <span className="text-sm">{progressStatus.progress}%</span>
                  </div>
                  <Progress value={progressStatus.progress} className="h-2" />
                </div>
              )}
            </Card>
          </div>
        </div>
      </Layout>
    </ErrorBoundary>
  );
};

export default SellerAddProduct;
