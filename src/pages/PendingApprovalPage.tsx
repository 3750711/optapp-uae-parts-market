import React, { useEffect } from 'react';
import Layout from '@/components/layout/Layout';
import { useAuth } from '@/contexts/AuthContext';
import { useLanguage } from '@/hooks/useLanguage';
import { useApprovalStatus } from '@/hooks/useApprovalStatus';
import { TelegramLoginWidget } from '@/components/auth/TelegramLoginWidget';
import { Helmet } from 'react-helmet-async';
import ContactAdminCard from '@/components/pending/ContactAdminCard';
import PendingApprovalChecklist from '@/components/pending/PendingApprovalChecklist';
import { LoadingState } from '@/components/ui/LoadingState';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';
const translations = {
  en: {
    title: 'Pending Approval',
    description: 'Your account is awaiting approval. Please be patient.',
    contact: 'If you have any questions, please contact support.',
    metaTitle: 'Account Pending Approval',
    metaDescription: 'Your account is awaiting admin approval. See checklist and contact admin via Telegram.',
    whatNextTitle: 'What happens next?',
    whatNextText: 'Our team will review your information shortly. You will be redirected automatically after approval.',
    telegramHint: 'Using Telegram login? Complete your profile in the Telegram modal (it may open automatically).',
  },
  ru: {
    title: '‚è≥ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ',
    description: '–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –Ω–∞—à–µ–º –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ! –ú—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏ –≥–æ—Ç–æ–≤–∏–º –∞–∫–∫–∞—É–Ω—Ç –∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.',
    contact: 'üìû –•–æ—Ç–∏—Ç–µ —É—Å–∫–æ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏—é? –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ Telegram ‚Äî –º—ã –æ—Ç–≤–µ—Ç–∏–º –∏ –ø–æ–º–æ–∂–µ–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.',
    metaTitle: '–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞',
    metaDescription: '–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á–µ–∫–ª–∏—Å—Ç –∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —á–µ—Ä–µ–∑ Telegram.',
    whatNextTitle: 'üí° –ß—Ç–æ –±—É–¥–µ—Ç –¥–∞–ª—å—à–µ?',
    whatNextText: '–ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –≤–∞—à—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –∞–∫–∫–∞—É–Ω—Ç –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω ‚Äî –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—é –∏ –ø–æ–∏—Å–∫—É –∑–∞–ø—á–∞—Å—Ç–µ–π.',
    telegramHint: '–í—ã –≤–æ—à–ª–∏ —á–µ—Ä–µ–∑ Telegram? –ó–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –≤ –ø–æ—è–≤–ª—è—é—â–µ–º—Å—è –æ–∫–Ω–µ Telegram (–æ–Ω–æ –º–æ–∂–µ—Ç –æ—Ç–∫—Ä—ã—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏).',
  },
};

const PendingApprovalPage: React.FC = () => {
  const { language } = useLanguage();
  const { profile } = useAuth();
  const { isChecking, isApproved } = useApprovalStatus();

  const t = translations[language];
  const { toast } = useToast();

  // Complete profile on first login after email confirmation (once per session)
  useEffect(() => {
    if (!profile) return;
    const key = `profileCompletedRPC:${profile.id}`;
    if (sessionStorage.getItem(key)) return;

    supabase
      .rpc('complete_profile_after_signup')
      .then(({ error }) => {
        if (error) {
          console.error('[PendingApproval] complete_profile_after_signup error', error);
        } else {
          sessionStorage.setItem(key, '1');
        }
      })
      .catch((e) => console.error('[PendingApproval] RPC call failed', e));
  }, [profile?.id]);
  if (isChecking) {
    return (
      <Layout>
        <Helmet>
          <title>{t.metaTitle}</title>
          <meta name="description" content={t.metaDescription} />
          <link rel="canonical" href="/pending-approval" />
          <script type="application/ld+json">
            {JSON.stringify({
              '@context': 'https://schema.org',
              '@type': 'WebPage',
              name: t.metaTitle,
              description: t.metaDescription,
              url: '/pending-approval',
            })}
          </script>
        </Helmet>
        <div className="container mx-auto px-4 py-10">
          <h1 className="text-2xl font-semibold mb-4">{t.title}</h1>
          <LoadingState isLoading loadingText={language === 'ru' ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : 'Loading...'}>
            <div />
          </LoadingState>
        </div>
      </Layout>
    );
  }

  if (isApproved) {
    return (
      <Layout>
        <Helmet>
          <title>{t.metaTitle}</title>
          <meta name="description" content={t.metaDescription} />
          <link rel="canonical" href="/pending-approval" />
        </Helmet>
        <div className="container mx-auto px-4 py-10">
          <h1 className="text-2xl font-semibold mb-4">{t.title}</h1>
          <p>{t.description}</p>
          <p>{t.contact}</p>
          <p>Your account has been approved.</p>
        </div>
      </Layout>
    );
  }

  return (
    <>
      <Layout>
        <Helmet>
          <title>{t.metaTitle}</title>
          <meta name="description" content={t.metaDescription} />
          <link rel="canonical" href="/pending-approval" />
          <script type="application/ld+json">
            {JSON.stringify({
              '@context': 'https://schema.org',
              '@type': 'WebPage',
              name: t.metaTitle,
              description: t.metaDescription,
              url: '/pending-approval',
            })}
          </script>
        </Helmet>
        <div className="container mx-auto px-4 py-10">
          <header className="mb-6">
            <h1 className="text-2xl font-semibold mb-2">{t.title}</h1>
            <p className="text-muted-foreground">{t.description}</p>
          </header>

          <main className="grid gap-6 lg:grid-cols-3">
            <section className="lg:col-span-2 space-y-6">
              {language === 'ru' && (
                <>
                  <h2 className="text-lg font-semibold">üìã –ß—Ç–æ –º—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º:</h2>
                </>
              )}

              <PendingApprovalChecklist language={language} />

              {language === 'ru' && (
                <p className="text-sm text-muted-foreground">
                  –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å, –∏ –º—ã —Å–º–æ–∂–µ–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã—Å—Ç—Ä–µ–µ.
                </p>
              )}

              <section className="rounded-lg border bg-card p-5 shadow-sm">
                <h2 className="text-lg font-semibold mb-2">{t.whatNextTitle}</h2>
                <p className="text-sm text-muted-foreground">{t.whatNextText}</p>
                {profile?.auth_method === 'telegram' && (
                  <p className="mt-3 text-sm">{t.telegramHint}</p>
                )}
              </section>

              {profile?.auth_method === 'email' && !profile?.telegram && (
                <section className="rounded-lg border bg-card p-5 shadow-sm">
                  <h2 className="text-lg font-semibold mb-2">
                    {language === 'en' ? 'Link your Telegram (recommended)' : '–ü—Ä–∏–≤—è–∂–∏—Ç–µ Telegram (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)'}
                  </h2>
                  <p className="text-sm text-muted-foreground mb-4">
                    {language === 'en'
                      ? 'It speeds up communication, enables instant notifications, and allows passwordless login.'
                      : '–≠—Ç–æ —É—Å–∫–æ—Ä–∏—Ç —Å–≤—è–∑—å, –≤–∫–ª—é—á–∏—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –ø–æ–∑–≤–æ–ª–∏—Ç –≤—Ö–æ–¥–∏—Ç—å –±–µ–∑ –ø–∞—Ä–æ–ª—è.'}
                  </p>
                  <TelegramLoginWidget language={language} />
                </section>
              )}
            </section>

            <aside className="lg:col-span-1">
              <ContactAdminCard language={language} />
            </aside>
          </main>
        </div>
      </Layout>
      {/* Hidden Telegram widget to auto-open registration modal for incomplete Telegram profiles */}
      {profile?.auth_method === 'telegram' && (
        (!profile?.profile_completed || (profile as any)?.accepted_terms === false || (profile as any)?.accepted_privacy === false) && (
          <div className="sr-only" aria-hidden="true">
            <TelegramLoginWidget language={language} />
          </div>
        )
      )}
    </>
  );
};

export default PendingApprovalPage;
