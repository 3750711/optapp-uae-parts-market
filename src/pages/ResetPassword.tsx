import React, { useState, useEffect } from "react";
import { useNavigate, useSearchParams } from "react-router-dom";
import { z } from "zod";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { supabase } from "@/integrations/supabase/client";
import { useAuth } from "@/contexts/AuthContext";
import { toast } from "@/hooks/use-toast";
import Layout from "@/components/layout/Layout";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Lock, Loader2, AlertCircle } from "lucide-react";

const formSchema = z.object({
  password: z.string()
    .min(6, { message: "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤" })
    .regex(/[A-Za-z]/, { message: "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –±—É–∫–≤—É" })
    .regex(/[0-9]/, { message: "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É" }),
  confirmPassword: z.string(),
}).refine((data) => data.password === data.confirmPassword, {
  message: "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç",
  path: ["confirmPassword"],
});

// Password strength checker
const checkPasswordStrength = (password: string) => {
  let score = 0;
  let feedback = [];
  
  if (password.length >= 8) score += 1;
  else feedback.push("–º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤");
  
  if (/[A-Z]/.test(password)) score += 1;
  else feedback.push("–∑–∞–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞");
  
  if (/[a-z]/.test(password)) score += 1;
  else feedback.push("—Å—Ç—Ä–æ—á–Ω–∞—è –±—É–∫–≤–∞");
  
  if (/[0-9]/.test(password)) score += 1;
  else feedback.push("—Ü–∏—Ñ—Ä–∞");
  
  if (/[^A-Za-z0-9]/.test(password)) score += 1;
  else feedback.push("—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª");
  
  const strength = score === 5 ? "strong" : score >= 3 ? "medium" : "weak";
  
  return { score, strength, feedback };
};

type FormData = z.infer<typeof formSchema>;

const ResetPassword = () => {
  const { user, status, profile, updatePassword, isRecoveryMode, clearRecoveryMode } = useAuth();
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  const [isLoading, setIsLoading] = useState(false);
  const [validationState, setValidationState] = useState<'checking' | 'valid' | 'invalid' | 'timeout'>('checking');
  const [showInvalidAfterDelay, setShowInvalidAfterDelay] = useState(false);
  const [isTelegramUser, setIsTelegramUser] = useState(false);

  const form = useForm<FormData>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      password: "",
      confirmPassword: "",
    }
  });

  // Validate reset password session
  useEffect(() => {
    let timeoutId: NodeJS.Timeout;
    
    const validateResetSession = () => {
      console.log('üîç [ResetPassword] Validating reset session', { 
        isRecoveryMode,
        authStatus: status,
        hasUser: !!user,
        validationMethod: 'recovery_flag',
        currentUrl: window.location.href
      });
      
      // Fallback: –ø—Ä–æ–≤–µ—Ä—è–µ–º URL –Ω–∞–ø—Ä—è–º—É—é, –µ—Å–ª–∏ AuthContext –µ—â–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
      const hasRecoveryInUrl = () => {
        try {
          const hash = window.location.hash?.substring(1);
          if (hash) {
            const params = new URLSearchParams(hash);
            if (params.get('type') === 'recovery' && params.get('access_token')) {
              return true;
            }
          }
          
          const urlParams = new URLSearchParams(window.location.search);
          if (urlParams.get('type') === 'recovery' && urlParams.get('token')) {
            return true;
          }
          
          return false;
        } catch {
          return false;
        }
      };
      
      // –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—â–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º URL –Ω–∞–ø—Ä—è–º—É—é –∫–∞–∫ fallback
      if (status === 'checking') {
        if (hasRecoveryInUrl()) {
          console.log('üîç [ResetPassword] Recovery tokens detected in URL (fallback check)');
          setValidationState('checking');
        } else if (!isRecoveryMode) {
          console.log('‚è≥ [ResetPassword] Waiting for AuthContext to process recovery mode...');
          setValidationState('checking');
        }
        return;
      }
      
      // Use recovery mode flag instead of URL parsing
      if (!isRecoveryMode) {
        console.log('‚ùå [ResetPassword] Not in recovery mode');
        setValidationState('invalid');
        return;
      }
      
      // If we have a user, session is established
      if (user && status === 'authed') {
        console.log('‚úÖ [ResetPassword] Valid recovery session established');
        setValidationState('valid');
        
        // Check if user is a Telegram user setting first password
        if (profile) {
          setIsTelegramUser(!!profile.telegram_id && !profile.has_password);
        }
        return;
      }
      
      // If no user after auth loading complete, session is invalid
      if (status === 'guest') {
        console.log('‚ùå [ResetPassword] No user session established - invalid reset link');
        setValidationState('invalid');
        return;
      }
    };
    
    // Initial validation
    validateResetSession();
    
    // Set timeout for session establishment (10 seconds)
    timeoutId = setTimeout(() => {
      if (validationState === 'checking') {
        console.warn('Reset password session timeout - forcing invalid state');
        setValidationState('timeout');
      }
    }, 10000);
    
    return () => {
      if (timeoutId) {
        clearTimeout(timeoutId);
      }
    };
  }, [status, user, profile, validationState, isRecoveryMode]);

  // Handle delayed error display to fix race condition
  useEffect(() => {
    if (validationState === 'invalid') {
      const timer = setTimeout(() => {
        setShowInvalidAfterDelay(true);
      }, 1000); // –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è race condition
      
      return () => clearTimeout(timer);
    } else {
      setShowInvalidAfterDelay(false);
    }
  }, [validationState]);

  const onSubmit = async (data: FormData) => {
    setIsLoading(true);
    
    try {
      const { error } = await supabase.auth.updateUser({
        password: data.password
      });

      if (error) {
        console.error("Password update error:", error);
        
        // Detailed error handling
        let errorMessage = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å";
        let errorTitle = "–û—à–∏–±–∫–∞";
        
        if (error.message?.includes("New password should be different")) {
          errorTitle = "–ü–∞—Ä–æ–ª—å –Ω–µ –∏–∑–º–µ–Ω–µ–Ω";
          errorMessage = "–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–∞—Ä–æ–ª—å.";
        } else if (error.message?.includes("Password should be")) {
          errorTitle = "–°–ª–∞–±—ã–π –ø–∞—Ä–æ–ª—å";
          errorMessage = "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –±—É–∫–≤, —Ü–∏—Ñ—Ä –∏ —Å–∏–º–≤–æ–ª–æ–≤.";
        } else if (error.message?.includes("session_not_found") || error.message?.includes("invalid_session")) {
          errorTitle = "–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞";
          errorMessage = "–í–∞—à–∞ —Å–µ—Å—Å–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –∏—Å—Ç–µ–∫–ª–∞. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Å–±—Ä–æ—Å–∞.";
        } else if (error.message?.includes("token_expired") || error.message?.includes("expired")) {
          errorTitle = "–°—Å—ã–ª–∫–∞ –∏—Å—Ç–µ–∫–ª–∞";
          errorMessage = "–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –∏—Å—Ç–µ–∫–ª–∞. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É.";
        } else if (error.message?.includes("network") || error.message?.includes("fetch")) {
          errorTitle = "–ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º";
          errorMessage = "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.";
        } else if (error.message?.includes("rate_limit")) {
          errorTitle = "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫";
          errorMessage = "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.";
        } else if (error.message?.includes("weak_password")) {
          errorTitle = "–°–ª–∞–±—ã–π –ø–∞—Ä–æ–ª—å";
          errorMessage = "–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç–æ–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤ —Å –±—É–∫–≤–∞–º–∏, —Ü–∏—Ñ—Ä–∞–º–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏.";
        }
        
        toast({
          title: errorTitle,
          description: errorMessage,
          variant: "destructive",
        });
        
        // Redirect to forgot password for expired sessions
        if (error.message?.includes("session_not_found") || 
            error.message?.includes("token_expired") || 
            error.message?.includes("expired")) {
          setTimeout(() => {
            navigate('/forgot-password', {
              state: { message: '–°—Å—ã–ª–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è.' }
            });
          }, 3000);
        }
        
        return;
      }

      // If this is a Telegram user setting their first password, update has_password
      if (isTelegramUser && profile) {
        const { error: profileUpdateError } = await supabase
          .from('profiles')
          .update({ has_password: true })
          .eq('id', profile.id);
        
        if (profileUpdateError) {
          console.error('Error updating profile:', profileUpdateError);
        } else {
          console.log('‚úÖ Profile updated - has_password set to true');
        }
      }

      // Clear recovery mode flag
      clearRecoveryMode();

      toast({
        title: isTelegramUser ? "–ü–∞—Ä–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" : "–ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω",
        description: isTelegramUser 
          ? "–í–∞—à –ø–µ—Ä–≤—ã–π –ø–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—Ö–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ email –∏ –ø–∞—Ä–æ–ª—å."
          : "–í–∞—à –ø–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ —Å –Ω–æ–≤—ã–º –ø–∞—Ä–æ–ª–µ–º.",
      });

      // Redirect to login page
      setTimeout(() => {
        navigate('/login', { 
          state: { message: isTelegramUser 
            ? '–ü–∞—Ä–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í–æ–π–¥–∏—Ç–µ —Å –Ω–æ–≤—ã–º –ø–∞—Ä–æ–ª–µ–º.' 
            : '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω. –í–æ–π–¥–∏—Ç–µ —Å –Ω–æ–≤—ã–º –ø–∞—Ä–æ–ª–µ–º.' 
          }
        });
      }, 2000);
      
    } catch (error) {
      console.error("Unexpected error:", error);
      
      // Handle unexpected errors
      let errorMessage = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞";
      
      if (error instanceof TypeError && error.message?.includes("fetch")) {
        errorMessage = "–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.";
      } else if (error instanceof Error) {
        errorMessage = `–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`;
      }
      
      toast({
        title: "–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞",
        description: errorMessage,
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  // Show loading while validating session or during delayed error display
  if (validationState === 'checking' || (validationState === 'invalid' && !showInvalidAfterDelay)) {
    return (
      <Layout>
        <div className="container mx-auto px-4 py-12 flex justify-center">
          <Card className="w-full max-w-md">
            <CardContent className="flex flex-col items-center justify-center p-8 space-y-4">
              <Loader2 className="h-8 w-8 animate-spin text-primary" />
              <div className="text-center">
                <h3 className="font-medium">–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è</h3>
                <p className="text-sm text-muted-foreground mt-1">
                  –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...
                </p>
              </div>
            </CardContent>
          </Card>
        </div>
      </Layout>
    );
  }

  // Show error if session is invalid (with delay) or timed out
  if ((validationState === 'invalid' && showInvalidAfterDelay) || validationState === 'timeout') {
    const isTimeout = validationState === 'timeout';
    
    return (
      <Layout>
        <div className="container mx-auto px-4 py-12 flex justify-center">
          <Card className="w-full max-w-md">
            <CardHeader className="text-center">
              <div className="mx-auto w-12 h-12 bg-red-100 rounded-full flex items-center justify-center mb-4">
                <AlertCircle className="h-6 w-6 text-red-600" />
              </div>
              <CardTitle className="text-2xl font-bold">
                {isTimeout ? '–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ' : '–°—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞'}
              </CardTitle>
            </CardHeader>
            <CardContent className="text-center space-y-4">
              <p className="text-muted-foreground">
                {isTimeout 
                  ? '–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É.'
                  : '–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞.'
                }
              </p>
              <Button 
                onClick={() => navigate('/forgot-password')}
                className="w-full bg-optapp-yellow text-optapp-dark hover:bg-yellow-500"
              >
                –ó–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É
              </Button>
            </CardContent>
          </Card>
        </div>
      </Layout>
    );
  }

  return (
    <Layout>
      <div className="container mx-auto px-4 py-12 flex justify-center">
        <Card className="w-full max-w-md">
          <CardHeader className="text-center">
            <div className="mx-auto w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mb-4">
              <Lock className="h-6 w-6 text-blue-600" />
            </div>
            <CardTitle className="text-2xl font-bold">
              {isTelegramUser ? "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å" : "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å"}
            </CardTitle>
            
            {/* Password requirements info */}
            <div className="mt-4 p-3 bg-blue-50 rounded-lg">
              <p className="text-sm text-blue-700">
                <strong>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–∞—Ä–æ–ª—é:</strong>
              </p>
              <ul className="text-xs text-blue-600 mt-1 space-y-1">
                <li>‚Ä¢ –ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 8+)</li>
                <li>‚Ä¢ –•–æ—Ç—è –±—ã –æ–¥–Ω–∞ –±—É–∫–≤–∞ –∏ –æ–¥–Ω–∞ —Ü–∏—Ñ—Ä–∞</li>
                <li>‚Ä¢ –î–æ–ª–∂–µ–Ω –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–∞—Ä–æ–ª—è</li>
              </ul>
            </div>
            
            {isTelegramUser && profile && (
              <div className="mt-4 p-3 bg-green-50 rounded-lg">
                <p className="text-sm text-green-700">
                  <strong>Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</strong> {profile.first_name || profile.full_name}
                </p>
                {profile.opt_id && (
                  <p className="text-sm text-green-600">
                    <strong>OPT ID:</strong> {profile.opt_id}
                  </p>
                )}
                <p className="text-xs text-green-600 mt-1">
                  –í—ã —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ email.
                </p>
              </div>
            )}
          </CardHeader>
          
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)}>
              <CardContent className="space-y-4">
                <FormField
                  control={form.control}
                  name="password"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å</FormLabel>
                      <FormControl>
                        <Input 
                          type="password" 
                          placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å"
                          {...field}
                          disabled={isLoading}
                        />
                       </FormControl>
                       <FormMessage />
                       
                       {/* Password strength indicator */}
                       {(() => {
                         const passwordValue = form.watch('password');
                         if (!passwordValue) return null;
                         
                         const passwordStrength = checkPasswordStrength(passwordValue);
                         
                         return (
                           <div className="mt-2">
                             <div className="flex items-center space-x-2">
                               <div className="flex-1 bg-gray-200 rounded-full h-2">
                                 <div 
                                   className={`h-2 rounded-full transition-all ${
                                     passwordStrength.strength === 'strong' ? 'bg-green-500 w-full' :
                                     passwordStrength.strength === 'medium' ? 'bg-yellow-500 w-2/3' :
                                     'bg-red-500 w-1/3'
                                   }`}
                                 />
                               </div>
                               <span className={`text-xs ${
                                 passwordStrength.strength === 'strong' ? 'text-green-600' :
                                 passwordStrength.strength === 'medium' ? 'text-yellow-600' :
                                 'text-red-600'
                               }`}>
                                 {passwordStrength.strength === 'strong' ? '–ù–∞–¥–µ–∂–Ω—ã–π' :
                                  passwordStrength.strength === 'medium' ? '–°—Ä–µ–¥–Ω–∏–π' : '–°–ª–∞–±—ã–π'}
                               </span>
                             </div>
                             {passwordStrength.feedback.length > 0 && (
                               <p className="text-xs text-muted-foreground mt-1">
                                 –î–æ–±–∞–≤—å—Ç–µ: {passwordStrength.feedback.join(', ')}
                               </p>
                             )}
                           </div>
                         );
                       })()}
                     </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="confirmPassword"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å</FormLabel>
                      <FormControl>
                        <Input 
                          type="password" 
                          placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å"
                          {...field}
                          disabled={isLoading}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </CardContent>
              
              <CardContent className="pt-0">
                <Button 
                  type="submit" 
                  className="w-full bg-optapp-yellow text-optapp-dark hover:bg-yellow-500"
                  disabled={isLoading}
                >
                  {isLoading ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è...
                    </>
                  ) : (
                    "–û–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å"
                  )}
                </Button>
              </CardContent>
            </form>
          </Form>
        </Card>
      </div>
    </Layout>
  );
};

export default ResetPassword;