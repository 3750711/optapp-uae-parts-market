
import React, { useState } from "react";
import { Link, useNavigate } from "react-router-dom";
import { z } from "zod";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import Layout from "@/components/layout/Layout";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { supabase } from "@/integrations/supabase/client";
import { toast } from "@/components/ui/use-toast";
import { detectInputType, getEmailByOptId } from "@/utils/authUtils";
import { Mail, User } from "lucide-react";

const formSchema = z.object({
  emailOrOptId: z.string().min(1, { message: "–í–≤–µ–¥–∏—Ç–µ email –∏–ª–∏ OPT ID" }),
  password: z.string().min(1, { message: "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å" }),
});

type FormData = z.infer<typeof formSchema>;

const Login = () => {
  const [isLoading, setIsLoading] = useState(false);
  const [inputType, setInputType] = useState<'email' | 'opt_id' | null>(null);
  const navigate = useNavigate();
  
  const form = useForm<FormData>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      emailOrOptId: "",
      password: "",
    }
  });

  const watchedInput = form.watch('emailOrOptId');

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤–≤–æ–¥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
  React.useEffect(() => {
    if (watchedInput) {
      const type = detectInputType(watchedInput);
      setInputType(type);
    } else {
      setInputType(null);
    }
  }, [watchedInput]);

  const onSubmit = async (data: FormData) => {
    setIsLoading(true);
    
    try {
      console.log("Attempting to sign in with:", data.emailOrOptId);
      
      const inputType = detectInputType(data.emailOrOptId);
      let emailToUse = data.emailOrOptId;

      // –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω OPT ID, –Ω–∞–π–¥–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π email
      if (inputType === 'opt_id') {
        console.log("Detected OPT ID, searching for email...");
        const foundEmail = await getEmailByOptId(data.emailOrOptId);
        
        if (!foundEmail) {
          toast({
            title: "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞",
            description: "OPT ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ",
            variant: "destructive",
          });
          return;
        }
        
        emailToUse = foundEmail;
        console.log("Found email for OPT ID:", emailToUse);
      }

      // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º email
      const { data: authData, error } = await supabase.auth.signInWithPassword({
        email: emailToUse,
        password: data.password,
      });

      if (error) {
        console.error("Login error:", error);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏
        if (error.message.includes("Database error")) {
          toast({
            title: "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞",
            description: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
            variant: "destructive",
          });
          return;
        }
        
        throw error;
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
      toast({
        title: "–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ",
        description: inputType === 'opt_id' 
          ? `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ partsbay.ae (OPT ID: ${data.emailOrOptId})`
          : "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ partsbay.ae",
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ "from" –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
      const params = new URLSearchParams(window.location.search);
      const from = params.get("from") || "/";

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      setTimeout(() => {
        console.log("Redirecting to:", from);
        navigate(from);
      }, 500);
      
    } catch (error: any) {
      console.error("Login error:", error);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      const errorMessage = inputType === 'opt_id' 
        ? "–ù–µ–≤–µ—Ä–Ω—ã–π OPT ID –∏–ª–∏ –ø–∞—Ä–æ–ª—å"
        : "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å";
        
      toast({
        title: "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞",
        description: errorMessage,
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  const getInputIcon = () => {
    if (inputType === 'email') return <Mail className="h-4 w-4 text-green-500" />;
    if (inputType === 'opt_id') return <User className="h-4 w-4 text-blue-500" />;
    return null;
  };

  const generateRandomOptId = () => {
    const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    return Array.from({ length: 3 }, () => letters[Math.floor(Math.random() * letters.length)]).join('');
  };

  const getPlaceholderText = () => {
    if (inputType === 'email') return "example@mail.com";
    if (inputType === 'opt_id') return `${generateRandomOptId()}, ${generateRandomOptId()}, ${generateRandomOptId()}...`;
    return `example@mail.com –∏–ª–∏ ${generateRandomOptId()}`;
  };

  return (
    <Layout>
      <div className="container mx-auto px-4 py-12 flex justify-center">
        <Card className="w-full max-w-md">
          <CardHeader className="space-y-1">
            <CardTitle className="text-2xl font-bold">–í—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç</CardTitle>
            <CardDescription>
              –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π email –∏–ª–∏ OPT ID –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É
            </CardDescription>
          </CardHeader>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)}>
              <CardContent className="space-y-4">
                <FormField
                  control={form.control}
                  name="emailOrOptId"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Email –∏–ª–∏ OPT ID</FormLabel>
                      <FormControl>
                        <div className="relative">
                          <Input 
                            type="text" 
                            placeholder={getPlaceholderText()}
                            {...field} 
                            className="pr-10"
                          />
                          {getInputIcon() && (
                            <div className="absolute right-3 top-1/2 transform -translate-y-1/2">
                              {getInputIcon()}
                            </div>
                          )}
                        </div>
                      </FormControl>
                      <FormMessage />
                      {inputType && (
                        <p className="text-xs text-muted-foreground">
                          {inputType === 'email' 
                            ? "‚úì –û–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ email –∞–¥—Ä–µ—Å" 
                            : "‚úì –û–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ OPT ID"}
                        </p>
                      )}
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={form.control}
                  name="password"
                  render={({ field }) => (
                    <FormItem>
                      <div className="flex items-center justify-between">
                        <FormLabel>–ü–∞—Ä–æ–ª—å</FormLabel>
                        <Link to="/forgot-password" className="text-sm text-optapp-dark hover:underline">
                          –ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?
                        </Link>
                      </div>
                      <FormControl>
                        <Input type="password" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </CardContent>
              <CardFooter className="flex flex-col space-y-4">
                <Button 
                  type="submit" 
                  className="w-full bg-optapp-yellow text-optapp-dark hover:bg-yellow-500"
                  disabled={isLoading}
                >
                  {isLoading ? "–í—Ö–æ–¥..." : "–í–æ–π—Ç–∏"}
                </Button>
                <div className="text-center text-sm">
                  –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞?{" "}
                  <Link to="/register" className="text-optapp-dark font-medium hover:underline">
                    –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
                  </Link>
                </div>
                <div className="text-center text-xs text-muted-foreground border-t pt-4">
                  <p>üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –í—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É—è:</p>
                  <p>‚Ä¢ Email –∞–¥—Ä–µ—Å (example@mail.com)</p>
                  <p>‚Ä¢ OPT ID ({generateRandomOptId()}, {generateRandomOptId()}, {generateRandomOptId()} –∏ —Ç.–¥.)</p>
                </div>
              </CardFooter>
            </form>
          </Form>
        </Card>
      </div>
    </Layout>
  );
};

export default Login;
