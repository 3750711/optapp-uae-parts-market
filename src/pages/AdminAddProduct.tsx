import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { supabase } from "@/integrations/supabase/client";
import AdminLayout from "@/components/admin/AdminLayout";
import { useToast } from "@/hooks/use-toast";
import { useCarBrandsAndModels } from "@/hooks/useCarBrandsAndModels";
import { useProductTitleParser } from "@/utils/productTitleParser";
import { useSellers } from "@/hooks/useSellers";
import { useSubmissionGuard } from "@/hooks/useSubmissionGuard";
import OptimizedAddProductForm, { productSchema, ProductFormValues } from "@/components/product/OptimizedAddProductForm";

// –†–∞—Å—à–∏—Ä—è–µ–º —Å—Ö–µ–º—É –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü–∞
const adminProductSchema = productSchema.extend({
  sellerId: z.string().min(1, {
    message: "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–∞–≤—Ü–∞",
  }),
});

type AdminProductFormValues = z.infer<typeof adminProductSchema>;

const AdminAddProduct = () => {
  const navigate = useNavigate();
  const { toast } = useToast();
  const [imageUrls, setImageUrls] = useState<string[]>([]);
  const [videoUrls, setVideoUrls] = useState<string[]>([]);
  const [searchBrandTerm, setSearchBrandTerm] = useState("");
  const [searchModelTerm, setSearchModelTerm] = useState("");
  const [primaryImage, setPrimaryImage] = useState<string>("");
  
  // –•—É–∫–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
  const { 
    brands, 
    brandModels, 
    selectBrand,
    findBrandIdByName,
    findModelIdByName, 
    isLoading: isLoadingCarData,
    validateModelBrand 
  } = useCarBrandsAndModels();

  const { sellers, isLoading: isLoadingSellers, error: sellersError, refetch: refetchSellers } = useSellers();

  // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
  const { guardedSubmit, isSubmitting } = useSubmissionGuard({
    timeout: 5000,
    onDuplicateSubmit: () => {
      toast({
        title: "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
        description: "–¢–æ–≤–∞—Ä —É–∂–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
        variant: "destructive",
      });
    }
  });

  // –ü–∞—Ä—Å–µ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
  const { parseProductTitle } = useProductTitleParser(
    brands,
    brandModels,
    findBrandIdByName,
    findModelIdByName
  );

  const form = useForm<AdminProductFormValues>({
    resolver: zodResolver(adminProductSchema),
    defaultValues: {
      title: "",
      price: "",
      brandId: "",
      modelId: "",
      placeNumber: "1",
      description: "",
      deliveryPrice: "0",
      sellerId: "",
    },
    mode: "onChange",
  });

  const watchBrandId = form.watch("brandId");
  const watchModelId = form.watch("modelId");
  const watchTitle = form.watch("title");

  // –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞—Ä–∫–∏ –∏ –º–æ–¥–µ–ª–∏ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
  useEffect(() => {
    if (watchTitle && brands.length > 0 && !watchBrandId) {
      const { brandId, modelId } = parseProductTitle(watchTitle);
      
      if (brandId) {
        form.setValue("brandId", brandId);
        
        if (modelId) {
          form.setValue("modelId", modelId);
        }

        toast({
          title: "–ê–≤—Ç–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ",
          description: "–ú–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
        });
      }
    }
  }, [watchTitle, brands, brandModels, parseProductTitle, form, watchBrandId, toast]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π –ø—Ä–∏ —Å–º–µ–Ω–µ –º–∞—Ä–∫–∏
  useEffect(() => {
    if (watchBrandId) {
      selectBrand(watchBrandId);
      
      if (watchModelId) {
        const modelBelongsToBrand = validateModelBrand(watchModelId, watchBrandId);
        if (!modelBelongsToBrand) {
          form.setValue("modelId", "");
        }
      }
    }
  }, [watchBrandId, selectBrand, form, validateModelBrand, watchModelId]);

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
  useEffect(() => {
    if (watchModelId && brandModels.length > 0) {
      const modelExists = brandModels.some(model => model.id === watchModelId);
      if (!modelExists) {
        form.setValue("modelId", "");
      }
    }
  }, [brandModels, watchModelId, form]);

  const handleImageUpload = (urls: string[]) => {
    console.log('üì∑ –ù–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', {
      urls,
      existingCount: imageUrls.length,
      timestamp: new Date().toISOString()
    });
    
    setImageUrls(prevUrls => [...prevUrls, ...urls]);
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!primaryImage && urls.length > 0) {
      console.log('üéØ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', urls[0]);
      setPrimaryImage(urls[0]);
    }
  };

  const removeImage = (url: string) => {
    const newImageUrls = imageUrls.filter(item => item !== url);
    setImageUrls(newImageUrls);
    
    // –ï—Å–ª–∏ —É–¥–∞–ª—è–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ
    if (primaryImage === url) {
      if (newImageUrls.length > 0) {
        setPrimaryImage(newImageUrls[0]);
      } else {
        setPrimaryImage("");
      }
    }
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º RPC —Ñ—É–Ω–∫—Ü–∏–π
  const createProduct = async (values: AdminProductFormValues) => {
    console.log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:', values);

    try {
      // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—Ä–∫–µ –∏ –º–æ–¥–µ–ª–∏
      const selectedBrand = brands.find(brand => brand.id === values.brandId);
      const selectedSeller = sellers.find(seller => seller.id === values.sellerId);
      
      let modelName = null;
      if (values.modelId) {
        const selectedModel = brandModels.find(model => model.id === values.modelId);
        modelName = selectedModel?.name || null;
      }

      if (!selectedBrand) {
        throw new Error("–í—ã–±—Ä–∞–Ω–Ω–∞—è –º–∞—Ä–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
      }

      if (!selectedSeller) {
        throw new Error("–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω");
      }

      console.log('üè≠ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —á–µ—Ä–µ–∑ admin RPC —Ñ—É–Ω–∫—Ü–∏—é...', {
        title: values.title,
        seller: selectedSeller.full_name,
        imageCount: imageUrls.length,
        videoCount: videoUrls.length,
        timestamp: new Date().toISOString()
      });
      
      // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —á–µ—Ä–µ–∑ admin RPC —Ñ—É–Ω–∫—Ü–∏—é
      const { data: productId, error: productError } = await supabase.rpc('admin_create_product', {
        p_title: values.title,
        p_price: parseFloat(values.price),
        p_condition: "–ù–æ–≤—ã–π",
        p_brand: selectedBrand.name,
        p_model: modelName,
        p_description: values.description || null,
        p_seller_id: values.sellerId,
        p_seller_name: selectedSeller.full_name,
        p_status: 'active',
        p_place_number: parseInt(values.placeNumber),
        p_delivery_price: values.deliveryPrice ? parseFloat(values.deliveryPrice) : 0,
      });

      if (productError) {
        console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:", productError);
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Ä: ${productError.message}`);
      }

      if (!productId) {
        throw new Error("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –≤–µ—Ä–Ω—É–ª–æ ID");
      }

      console.log('‚úÖ –¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω —Å ID:', productId);

      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      for (const url of imageUrls) {
        const { error: imageError } = await supabase.rpc('admin_insert_product_image', {
          p_product_id: productId,
          p_url: url,
          p_is_primary: url === primaryImage
        });
          
        if (imageError) {
          console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', imageError);
          toast({
            title: "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
            description: `–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${imageError.message}`,
            variant: "destructive",
          });
        }
      }

      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ
      if (videoUrls.length > 0) {
        for (const videoUrl of videoUrls) {
          const { error: videoError } = await supabase.rpc('admin_insert_product_video', {
            p_product_id: productId,
            p_url: videoUrl
          });
            
          if (videoError) {
            console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ:', videoError);
            toast({
              title: "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
              description: `–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ: ${videoError.message}`,
              variant: "destructive",
            });
          }
        }
      }

      // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      try {
        supabase.functions.invoke('send-telegram-notification', {
          body: { productId: productId }
        }).catch(notifyError => {
          console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", notifyError);
        });
      } catch (notifyError) {
        console.warn("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", notifyError);
      }

      toast({
        title: "–¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω",
        description: `–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞ ${selectedSeller.full_name}`,
      });

      navigate(`/product/${productId}`);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:", error);
      
      let errorMessage = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
      
      if (error instanceof Error) {
        if (error.message.includes('Only admins can use this function')) {
          errorMessage = "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤.";
        } else if (error.message.includes('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Ä')) {
          errorMessage = error.message;
        } else {
          errorMessage = error.message;
        }
      }
      
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: errorMessage,
        variant: "destructive",
      });
    }
  };

  const handleSubmit = (values: AdminProductFormValues) => {
    guardedSubmit(() => createProduct(values));
  };

  return (
    <AdminLayout>
      <div className="container mx-auto px-4 py-8">
        <div className="max-w-3xl mx-auto">
          <h1 className="text-3xl font-bold mb-8">–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä</h1>
          
          <OptimizedAddProductForm
            form={form}
            onSubmit={handleSubmit}
            isSubmitting={isSubmitting}
            imageUrls={imageUrls}
            videoUrls={videoUrls}
            brands={brands}
            brandModels={brandModels}
            isLoadingCarData={isLoadingCarData}
            watchBrandId={watchBrandId}
            searchBrandTerm={searchBrandTerm}
            setSearchBrandTerm={setSearchBrandTerm}
            searchModelTerm={searchModelTerm}
            setSearchModelTerm={setSearchModelTerm}
            handleMobileOptimizedImageUpload={handleImageUpload}
            setVideoUrls={setVideoUrls}
            primaryImage={primaryImage}
            setPrimaryImage={setPrimaryImage}
            onImageDelete={removeImage}
            sellers={sellers}
            isLoadingSellers={isLoadingSellers}
            sellersError={sellersError}
            onRefetchSellers={refetchSellers}
          />
        </div>
      </div>
    </AdminLayout>
  );
};

export default AdminAddProduct;
