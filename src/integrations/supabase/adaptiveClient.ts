
import { createClient, SupabaseClient } from '@supabase/supabase-js';
import type { Database } from './types';
import SupabaseRegionDetector from '@/utils/supabaseRegionDetector';

class AdaptiveSupabaseClient {
  private static instance: AdaptiveSupabaseClient;
  private client: SupabaseClient<Database> | null = null;
  private detector = SupabaseRegionDetector.getInstance();
  private initPromise: Promise<SupabaseClient<Database>> | null = null;

  static getInstance(): AdaptiveSupabaseClient {
    if (!AdaptiveSupabaseClient.instance) {
      AdaptiveSupabaseClient.instance = new AdaptiveSupabaseClient();
    }
    return AdaptiveSupabaseClient.instance;
  }

  async getClient(): Promise<SupabaseClient<Database>> {
    if (this.client) {
      return this.client;
    }

    if (this.initPromise) {
      return this.initPromise;
    }

    this.initPromise = this.initializeClient();
    return this.initPromise;
  }

  private async initializeClient(): Promise<SupabaseClient<Database>> {
    console.log('üîÑ Initializing adaptive Supabase client...');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–≥–∏–æ–Ω–µ
    this.detector.loadConnectionStatus();
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
    const config = await this.detector.getSupabaseConfig();
    
    console.log(`üåç Using Supabase config:`, {
      url: config.url,
      useProxy: config.useProxy
    });

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    this.client = createClient<Database>(config.url, config.key, {
      auth: {
        persistSession: true,
        autoRefreshToken: true,
        detectSessionInUrl: true
      },
      global: {
        headers: config.useProxy ? {
          'X-Proxy-Target': 'https://vfiylfljiixqkjfqubyq.supabase.co'
        } : {}
      }
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    this.detector.saveConnectionStatus();

    return this.client;
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –ø—Ä–æ–∫—Å–∏ –≤ —Å–ª—É—á–∞–µ –ø—Ä–æ–±–ª–µ–º
  async switchToProxy(): Promise<SupabaseClient<Database>> {
    console.log('üîÑ Switching to proxy mode...');
    
    this.client = createClient<Database>(
      'https://supabase-proxy.partsbay.workers.dev',
      'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZmaXlsZmxqaWl4cWtqZnF1YnlxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ4OTEwMjUsImV4cCI6MjA2MDQ2NzAyNX0.KZbRSipkwoZDY8pL7GZhzpAQXXjZ0Vise1rXHN8P4W0',
      {
        auth: {
          persistSession: true,
          autoRefreshToken: true,
          detectSessionInUrl: true
        },
        global: {
          headers: {
            'X-Proxy-Target': 'https://vfiylfljiixqkjfqubyq.supabase.co'
          }
        }
      }
    );

    return this.client;
  }

  getConnectionStatus() {
    return this.detector.getConnectionStatus();
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
const adaptiveClient = AdaptiveSupabaseClient.getInstance();

export { adaptiveClient };
export default AdaptiveSupabaseClient;
