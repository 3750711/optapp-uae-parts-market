import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Printer, Loader2 } from 'lucide-react';
import { toast } from 'sonner';
import { supabase } from '@/integrations/supabase/client';

interface PrintStickersButtonProps {
  selectedOrderIds: string[];
  onSuccess?: () => void;
  disabled?: boolean;
}

/**
 * –ö–Ω–æ–ø–∫–∞ –¥–ª—è batch-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ CraftMyPDF
 * 
 * @param selectedOrderIds - –ú–∞—Å—Å–∏–≤ ID –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
 * @param onSuccess - Callback –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—ã–±–æ—Ä–∞)
 * @param disabled - –í–Ω–µ—à–Ω–∏–π disabled state
 */
export function PrintStickersButton({ 
  selectedOrderIds, 
  onSuccess,
  disabled = false
}: PrintStickersButtonProps) {
  const [isGenerating, setIsGenerating] = useState(false);

  const handlePrint = async () => {
    if (selectedOrderIds.length === 0) {
      toast.error('–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑—ã –¥–ª—è –ø–µ—á–∞—Ç–∏');
      return;
    }

    setIsGenerating(true);
    console.log('üè∑Ô∏è [PrintStickers] Starting generation for', selectedOrderIds.length, 'orders');

    try {
      const { data, error } = await supabase.functions.invoke('generate-stickers-batch', {
        body: { 
          orderIds: selectedOrderIds 
        },
      });

      if (error) {
        console.error('‚ùå [PrintStickers] Error:', error);
        throw error;
      }

      if (!data?.success) {
        throw new Error(data?.error || 'Failed to generate stickers');
      }

      console.log('‚úÖ [PrintStickers] Success:', data);

      // Open PDF in new tab
      window.open(data.pdf_url, '_blank');

      // Show success toast with details
      toast.success(
        <div className="space-y-1">
          <div className="font-medium">‚úÖ –°—Ç–∏–∫–µ—Ä—ã –≥–æ—Ç–æ–≤—ã!</div>
          <div className="text-sm opacity-90">
            –°–æ–∑–¥–∞–Ω–æ: {data.total_stickers} —à—Ç.
          </div>
          <div className="text-xs opacity-75">
            –ù–æ–º–µ—Ä–∞: {data.sticker_numbers.slice(0, 5).join(', ')}
            {data.sticker_numbers.length > 5 && '...'}
          </div>
        </div>,
        { duration: 5000 }
      );

      // Call success callback (to clear selection)
      onSuccess?.();

    } catch (err: any) {
      console.error('‚ùå [PrintStickers] Failed:', err);
      toast.error(err.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤');
    } finally {
      setIsGenerating(false);
    }
  };

  const isDisabled = disabled || isGenerating || selectedOrderIds.length === 0;

  return (
    <Button
      onClick={handlePrint}
      disabled={isDisabled}
      variant={selectedOrderIds.length > 0 ? 'default' : 'outline'}
      className="gap-2 bg-optapp-yellow text-optapp-dark hover:bg-yellow-500 disabled:opacity-50"
    >
      {isGenerating ? (
        <>
          <Loader2 className="h-4 w-4 animate-spin" />
          –ì–µ–Ω–µ—Ä–∞—Ü–∏—è...
        </>
      ) : (
        <>
          <Printer className="h-4 w-4" />
          –ü–µ—á–∞—Ç—å —Å—Ç–∏–∫–µ—Ä–æ–≤
          {selectedOrderIds.length > 0 && (
            <span className="ml-1 font-semibold">({selectedOrderIds.length})</span>
          )}
        </>
      )}
    </Button>
  );
}
