
import React, { useState, useCallback, useRef } from "react";
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { toast } from "@/hooks/use-toast";
import { Upload, Video, Image, X, Star, StarOff, Eye, RotateCcw, Loader } from "lucide-react";
import { cn } from "@/lib/utils";
import { useMobileOptimizedUpload } from "@/hooks/useMobileOptimizedUpload";
import { secureCloudinary } from "@/utils/secureCloudinary";

interface MediaFile {
  id: string;
  url: string;
  type: 'image' | 'video';
  name: string;
  isPrimary?: boolean;
  thumbnail?: string;
}

interface EnhancedMediaUploadSectionProps {
  images: string[];
  videos: string[];
  onImagesUpload: (urls: string[]) => void;
  onVideoUpload: (urls: string[]) => void;
  onVideoDelete: (url: string) => void;
  onImageDelete?: (url: string) => void;
  onSetPrimaryImage?: (url: string) => void;
  primaryImage?: string;
  orderId?: string;
  disabled?: boolean;
  maxImages?: number;
  maxVideos?: number;
}

export const EnhancedMediaUploadSection: React.FC<EnhancedMediaUploadSectionProps> = ({
  images,
  videos,
  onImagesUpload,
  onVideoUpload,
  onVideoDelete,
  onImageDelete,
  onSetPrimaryImage,
  primaryImage,
  orderId,
  disabled = false,
  maxImages = 25,
  maxVideos = 3,
}) => {
  const [dragActive, setDragActive] = useState(false);
  const [selectedPreview, setSelectedPreview] = useState<string | null>(null);
  const [uploadingType, setUploadingType] = useState<'image' | 'video' | null>(null);
  
  const imageInputRef = useRef<HTMLInputElement>(null);
  const videoInputRef = useRef<HTMLInputElement>(null);

  const { 
    isUploading, 
    uploadProgress, 
    canCancel, 
    uploadFilesBatch, 
    cancelUpload,
    clearProgress
  } = useMobileOptimizedUpload();

  // Combine media files for unified gallery
  const allMediaFiles: MediaFile[] = [
    ...images.map((url, index) => ({
      id: `img-${index}`,
      url,
      type: 'image' as const,
      name: `Image ${index + 1}`,
      isPrimary: url === primaryImage
    })),
    ...videos.map((url, index) => ({
      id: `vid-${index}`,
      url,
      type: 'video' as const,
      name: `Video ${index + 1}`,
      thumbnail: url // Videos can have thumbnails generated by Cloudinary
    }))
  ];

  const handleImageUpload = useCallback(async (files: FileList) => {
    if (images.length + files.length > maxImages) {
      toast({
        title: "Превышен лимит изображений",
        description: `Максимально можно загрузить ${maxImages} изображений`,
        variant: "destructive"
      });
      return;
    }

    setUploadingType('image');
    const fileArray = Array.from(files);
    
    try {
      const uploadedUrls = await uploadFilesBatch(fileArray, {
        productId: orderId,
        batchSize: 3,
        batchDelay: 500,
        disableToast: false
      });
      
      if (uploadedUrls.length > 0) {
        onImagesUpload(uploadedUrls);
        toast({
          title: "Изображения загружены",
          description: `Успешно загружено ${uploadedUrls.length} изображений`,
        });
      }
    } catch (error) {
      console.error('Error uploading images:', error);
      toast({
        title: "Ошибка загрузки",
        description: "Не удалось загрузить изображения",
        variant: "destructive"
      });
    } finally {
      setUploadingType(null);
    }
  }, [images.length, maxImages, orderId, uploadFilesBatch, onImagesUpload]);

  const handleVideoUpload = useCallback(async (files: FileList) => {
    if (videos.length + files.length > maxVideos) {
      toast({
        title: "Превышен лимит видео",
        description: `Максимально можно загрузить ${maxVideos} видео`,
        variant: "destructive"
      });
      return;
    }

    setUploadingType('video');
    const fileArray = Array.from(files);
    const uploadedUrls: string[] = [];
    
    try {
      for (const file of fileArray) {
        const result = await secureCloudinary.uploadFile({
          file,
          productId: orderId,
          resourceType: 'video'
        });
        
        if (result.success && result.cloudinaryUrl) {
          uploadedUrls.push(result.cloudinaryUrl);
        }
      }
      
      if (uploadedUrls.length > 0) {
        onVideoUpload(uploadedUrls);
        toast({
          title: "Видео загружены",
          description: `Успешно загружено ${uploadedUrls.length} видео`,
        });
      }
    } catch (error) {
      console.error('Error uploading videos:', error);
      toast({
        title: "Ошибка загрузки",
        description: "Не удалось загрузить видео",
        variant: "destructive"
      });
    } finally {
      setUploadingType(null);
    }
  }, [videos.length, maxVideos, orderId, onVideoUpload]);

  const handleDrag = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    if (e.type === "dragenter" || e.type === "dragover") {
      setDragActive(true);
    } else if (e.type === "dragleave") {
      setDragActive(false);
    }
  }, []);

  const handleDrop = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(false);
    
    if (disabled || isUploading) return;
    
    const files = e.dataTransfer.files;
    if (files && files.length > 0) {
      const imageFiles = Array.from(files).filter(file => file.type.startsWith('image/'));
      const videoFiles = Array.from(files).filter(file => file.type.startsWith('video/'));
      
      if (imageFiles.length > 0) {
        handleImageUpload(files);
      } else if (videoFiles.length > 0) {
        handleVideoUpload(files);
      }
    }
  }, [disabled, isUploading, handleImageUpload, handleVideoUpload]);

  const handleDelete = (file: MediaFile) => {
    if (file.type === 'image' && onImageDelete) {
      onImageDelete(file.url);
    } else if (file.type === 'video') {
      onVideoDelete(file.url);
    }
  };

  const handleSetPrimary = (file: MediaFile) => {
    if (file.type === 'image' && onSetPrimaryImage) {
      onSetPrimaryImage(file.url);
    }
  };

  return (
    <div className="space-y-6">
      {/* Header with counters */}
      <div className="flex items-center justify-between">
        <Label className="text-base font-medium">Медиафайлы заказа</Label>
        <div className="flex gap-2">
          <Badge variant="secondary" className="flex items-center gap-1">
            <Image className="h-3 w-3" />
            {images.length}/{maxImages}
          </Badge>
          <Badge variant="secondary" className="flex items-center gap-1">
            <Video className="h-3 w-3" />
            {videos.length}/{maxVideos}
          </Badge>
        </div>
      </div>

      {/* Upload buttons */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <Card>
          <CardContent className="p-4">
            <div className="space-y-3">
              <div className="flex items-center gap-2">
                <Image className="h-4 w-4" />
                <span className="font-medium">Фотографии</span>
              </div>
              <Button
                type="button"
                variant="outline"
                onClick={() => imageInputRef.current?.click()}
                disabled={disabled || isUploading || images.length >= maxImages}
                className="w-full"
              >
                {uploadingType === 'image' ? (
                  <Loader className="mr-2 h-4 w-4 animate-spin" />
                ) : (
                  <Upload className="mr-2 h-4 w-4" />
                )}
                Загрузить фото
              </Button>
              <p className="text-xs text-gray-500">
                Максимум {maxImages} изображений, до 10MB каждое
              </p>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="space-y-3">
              <div className="flex items-center gap-2">
                <Video className="h-4 w-4" />
                <span className="font-medium">Видео</span>
              </div>
              <Button
                type="button"
                variant="outline"
                onClick={() => videoInputRef.current?.click()}
                disabled={disabled || isUploading || videos.length >= maxVideos}
                className="w-full"
              >
                {uploadingType === 'video' ? (
                  <Loader className="mr-2 h-4 w-4 animate-spin" />
                ) : (
                  <Upload className="mr-2 h-4 w-4" />
                )}
                Загрузить видео
              </Button>
              <p className="text-xs text-gray-500">
                Максимум {maxVideos} видео, до 20MB каждое
              </p>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Hidden file inputs */}
      <input
        ref={imageInputRef}
        type="file"
        multiple
        accept="image/*"
        onChange={(e) => e.target.files && handleImageUpload(e.target.files)}
        className="hidden"
        disabled={disabled}
      />
      <input
        ref={videoInputRef}
        type="file"
        multiple
        accept="video/*"
        onChange={(e) => e.target.files && handleVideoUpload(e.target.files)}
        className="hidden"
        disabled={disabled}
      />

      {/* Upload progress */}
      {isUploading && uploadProgress.length > 0 && (
        <Card>
          <CardContent className="p-4">
            <div className="space-y-3">
              <div className="flex items-center justify-between">
                <span className="font-medium">Загрузка файлов</span>
                {canCancel && (
                  <Button
                    type="button"
                    variant="outline"
                    size="sm"
                    onClick={cancelUpload}
                  >
                    Отменить
                  </Button>
                )}
              </div>
              {uploadProgress.map((progress) => (
                <div key={progress.fileId} className="space-y-1">
                  <div className="flex items-center justify-between text-sm">
                    <span className="truncate">{progress.fileName}</span>
                    <span>{progress.progress}%</span>
                  </div>
                  <Progress value={progress.progress} className="h-2" />
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Drag & Drop zone */}
      <div
        onDragEnter={handleDrag}
        onDragLeave={handleDrag}
        onDragOver={handleDrag}
        onDrop={handleDrop}
        className={cn(
          "border-2 border-dashed rounded-lg p-8 text-center transition-colors",
          dragActive ? "border-blue-500 bg-blue-50" : "border-gray-300",
          disabled && "opacity-50 cursor-not-allowed"
        )}
      >
        <Upload className="mx-auto h-8 w-8 text-gray-400 mb-2" />
        <p className="text-sm text-gray-600">
          Перетащите файлы сюда или используйте кнопки выше
        </p>
        <p className="text-xs text-gray-400 mt-1">
          Поддерживаются изображения и видео
        </p>
      </div>

      {/* Unified media gallery */}
      {allMediaFiles.length > 0 && (
        <div className="space-y-3">
          <h4 className="font-medium">Загруженные файлы ({allMediaFiles.length})</h4>
          <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4">
            {allMediaFiles.map((file) => (
              <div key={file.id} className="relative group">
                <div className="aspect-square rounded-lg overflow-hidden border bg-gray-100">
                  {file.type === 'image' ? (
                    <img
                      src={file.url}
                      alt={file.name}
                      className="w-full h-full object-cover"
                      loading="lazy"
                    />
                  ) : (
                    <div className="w-full h-full flex items-center justify-center bg-gray-200">
                      <Video className="h-8 w-8 text-gray-400" />
                    </div>
                  )}
                  
                  {/* File type indicator */}
                  <div className="absolute top-1 left-1">
                    <Badge variant={file.type === 'image' ? 'default' : 'secondary'} className="text-xs">
                      {file.type === 'image' ? 'IMG' : 'VID'}
                    </Badge>
                  </div>

                  {/* Primary indicator for images */}
                  {file.type === 'image' && file.isPrimary && (
                    <div className="absolute top-1 right-1">
                      <Badge className="text-xs bg-yellow-500">
                        <Star className="h-2 w-2" />
                      </Badge>
                    </div>
                  )}

                  {/* Action buttons */}
                  <div className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-50 transition-opacity flex items-center justify-center gap-1 opacity-0 group-hover:opacity-100">
                    <Button
                      type="button"
                      size="sm"
                      variant="secondary"
                      onClick={() => setSelectedPreview(file.url)}
                      className="h-6 w-6 p-0"
                    >
                      <Eye className="h-3 w-3" />
                    </Button>
                    
                    {file.type === 'image' && onSetPrimaryImage && !file.isPrimary && (
                      <Button
                        type="button"
                        size="sm"
                        variant="secondary"
                        onClick={() => handleSetPrimary(file)}
                        className="h-6 w-6 p-0"
                      >
                        <StarOff className="h-3 w-3" />
                      </Button>
                    )}
                    
                    <Button
                      type="button"
                      size="sm"
                      variant="destructive"
                      onClick={() => handleDelete(file)}
                      className="h-6 w-6 p-0"
                    >
                      <X className="h-3 w-3" />
                    </Button>
                  </div>
                </div>
                
                <p className="text-xs text-center mt-1 truncate">{file.name}</p>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Preview modal */}
      {selectedPreview && (
        <div 
          className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 p-4"
          onClick={() => setSelectedPreview(null)}
        >
          <div className="relative max-w-4xl max-h-full">
            <Button
              type="button"
              variant="secondary"
              size="sm"
              onClick={() => setSelectedPreview(null)}
              className="absolute top-2 right-2 z-10"
            >
              <X className="h-4 w-4" />
            </Button>
            <img
              src={selectedPreview}
              alt="Preview"
              className="max-w-full max-h-full object-contain rounded-lg"
            />
          </div>
        </div>
      )}
    </div>
  );
};
