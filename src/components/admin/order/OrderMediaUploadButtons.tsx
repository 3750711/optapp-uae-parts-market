
import React, { useState, useCallback } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Upload, Image as ImageIcon, Video, Loader2, AlertCircle } from 'lucide-react';
import { useOptimizedImageUpload } from '@/hooks/useOptimizedImageUpload';
import { CloudinaryVideoUpload } from '@/components/ui/cloudinary-video-upload';
import { useIsMobile } from '@/hooks/use-mobile';
import { toast } from '@/hooks/use-toast';
import { cn } from '@/lib/utils';

interface OrderMediaUploadButtonsProps {
  images: string[];
  videos: string[];
  onImagesUpload: (urls: string[]) => void;
  onVideoUpload: (urls: string[]) => void;
  disabled?: boolean;
  maxImages?: number;
  maxVideos?: number;
}

export const OrderMediaUploadButtons: React.FC<OrderMediaUploadButtonsProps> = ({
  images,
  videos,
  onImagesUpload,
  onVideoUpload,
  disabled = false,
  maxImages = 25,
  maxVideos = 5
}) => {
  const isMobile = useIsMobile();
  const [fileInputKey, setFileInputKey] = useState(0);
  const { uploadFiles, isUploading, uploadQueue } = useOptimizedImageUpload();

  console.log('üìä OrderMediaUploadButtons render:', { 
    imageCount: images.length, 
    videoCount: videos.length,
    isUploading
  });

  const handleImageSelect = useCallback(async (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files;
    if (!files || files.length === 0) return;

    console.log('üìÅ Image files selected:', files.length);

    const fileArray = Array.from(files);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    const validImageFiles = fileArray.filter(file => {
      if (!file.type.startsWith('image/')) {
        console.warn('‚ö†Ô∏è Skipping non-image file:', file.name);
        return false;
      }
      if (file.size > 50 * 1024 * 1024) { // 50MB –ª–∏–º–∏—Ç
        console.warn('‚ö†Ô∏è Skipping oversized file:', file.name, 'Size:', file.size);
        return false;
      }
      return true;
    });

    if (validImageFiles.length === 0) {
      toast({
        title: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã",
        description: "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPG, PNG –∏–ª–∏ WebP",
        variant: "destructive",
      });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
    if (images.length + validImageFiles.length > maxImages) {
      toast({
        title: "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
        description: `–ú–∞–∫—Å–∏–º—É–º ${maxImages} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –°–µ–π—á–∞—Å: ${images.length}`,
        variant: "destructive",
      });
      return;
    }

    try {
      console.log('üöÄ Starting upload of', validImageFiles.length, 'image files');
      
      const uploadedUrls = await uploadFiles(validImageFiles, {
        maxConcurrent: 2,
        disableToast: false,
        compressionOptions: {
          maxSizeMB: 0.8,
          maxWidthOrHeight: 1200,
          initialQuality: 0.8,
          fileType: 'image/webp'
        }
      });
      
      if (uploadedUrls.length > 0) {
        console.log('‚úÖ New order images uploaded:', uploadedUrls);
        onImagesUpload(uploadedUrls);
        
        toast({
          title: "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã",
          description: `–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${uploadedUrls.length} –∏–∑ ${validImageFiles.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`,
        });
      } else {
        console.warn('‚ö†Ô∏è No images were successfully uploaded');
      }
    } catch (error) {
      console.error('üí• Error uploading order images:', error);
      toast({
        title: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
        variant: "destructive",
      });
    }
    
    // –°–±—Ä–æ—Å input
    setFileInputKey(prev => prev + 1);
  }, [uploadFiles, onImagesUpload, images.length, maxImages]);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  const activeUploads = uploadQueue.filter(item => 
    item.status === 'pending' || item.status === 'compressing' || item.status === 'uploading'
  );

  const canUploadImages = !disabled && images.length < maxImages && !isUploading;
  const canUploadVideos = !disabled && videos.length < maxVideos;

  return (
    <div className="space-y-4">
      {/* –ö–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ */}
      <div className={cn(
        "grid gap-3",
        isMobile ? "grid-cols-1" : "grid-cols-2"
      )}>
        {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π */}
        <Card className="border-dashed">
          <CardContent className="p-4">
            <div className="text-center space-y-3">
              <div className="flex items-center justify-center w-12 h-12 rounded-lg bg-blue-50 mx-auto">
                <ImageIcon className="w-6 h-6 text-blue-600" />
              </div>
              
              <div>
                <h3 className="font-medium text-sm">–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞</h3>
                <p className="text-xs text-gray-500 mt-1">
                  {images.length}/{maxImages} –∑–∞–≥—Ä—É–∂–µ–Ω–æ
                </p>
              </div>

              <Button
                type="button"
                variant={canUploadImages ? "default" : "secondary"}
                disabled={!canUploadImages}
                onClick={() => document.getElementById('order-image-input')?.click()}
                className={cn(
                  "w-full",
                  isMobile ? "min-h-[44px]" : "h-10"
                )}
              >
                {isUploading ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    –ó–∞–≥—Ä—É–∑–∫–∞...
                  </>
                ) : (
                  <>
                    <Upload className="mr-2 h-4 w-4" />
                    –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
                  </>
                )}
              </Button>

              <input
                key={fileInputKey}
                id="order-image-input"
                type="file"
                multiple
                accept="image/*"
                onChange={handleImageSelect}
                className="hidden"
                disabled={!canUploadImages}
              />

              {!canUploadImages && images.length >= maxImages && (
                <p className="text-xs text-amber-600 flex items-center justify-center gap-1">
                  <AlertCircle className="w-3 h-3" />
                  –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                </p>
              )}
            </div>
          </CardContent>
        </Card>

        {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ */}
        <Card className="border-dashed">
          <CardContent className="p-4">
            <div className="text-center space-y-3">
              <div className="flex items-center justify-center w-12 h-12 rounded-lg bg-purple-50 mx-auto">
                <Video className="w-6 h-6 text-purple-600" />
              </div>
              
              <div>
                <h3 className="font-medium text-sm">–í–∏–¥–µ–æ –∑–∞–∫–∞–∑–∞</h3>
                <p className="text-xs text-gray-500 mt-1">
                  {videos.length}/{maxVideos} –∑–∞–≥—Ä—É–∂–µ–Ω–æ
                </p>
              </div>

              <CloudinaryVideoUpload
                videos={videos}
                onUpload={onVideoUpload}
                onDelete={() => {}} // –£–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≥–∞–ª–µ—Ä–µ—é
                maxVideos={maxVideos}
                disabled={!canUploadVideos}
                showOnlyButton={true}
                buttonText="–î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ"
                buttonIcon={<Upload className="h-4 w-4" />}
                className={cn(
                  "w-full",
                  isMobile ? "min-h-[44px]" : "h-10"
                )}
              />

              {!canUploadVideos && videos.length >= maxVideos && (
                <p className="text-xs text-amber-600 flex items-center justify-center gap-1">
                  <AlertCircle className="w-3 h-3" />
                  –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤–∏–¥–µ–æ
                </p>
              )}
            </div>
          </CardContent>
        </Card>
      </div>

      {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ */}
      {activeUploads.length > 0 && (
        <Card>
          <CardContent className="p-3">
            <div className="space-y-2">
              <h4 className="text-sm font-medium">–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ ({activeUploads.length})</h4>
              {activeUploads.map((upload) => (
                <div key={upload.id} className="flex items-center gap-2 text-xs">
                  <Loader2 className="w-3 h-3 animate-spin text-blue-500" />
                  <span className="flex-1 truncate">{upload.file.name}</span>
                  <span className="text-gray-500">{upload.progress}%</span>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <div className="text-xs text-gray-500 space-y-1">
        <p>üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–∂–∏–º–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Ä–∞–∑–º–µ—Ä–µ –±–æ–ª—å—à–µ 400KB</p>
        <p>üé¨ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤–∏–¥–µ–æ: MP4, MOV, AVI (–¥–æ 100MB)</p>
        <p>‚òÅÔ∏è –í—Å–µ —Ñ–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –≤ Cloudinary —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π</p>
      </div>
    </div>
  );
};
