
import React from "react";
import { Button } from "@/components/ui/button";
import { MediaUploadSection } from "@/components/admin/order/MediaUploadSection";
import { useAdminOrderFormLogic } from "@/hooks/useAdminOrderFormLogic";
import { SellerOrderFormFields } from "@/components/admin/order/SellerOrderFormFields";
import { CreatedOrderView } from "@/components/admin/order/CreatedOrderView";
import { Loader, AlertCircle, Shield } from "lucide-react";
import { useForm } from "react-hook-form";
import { Progress } from "@/components/ui/progress";
import { Skeleton } from "@/components/ui/skeleton";
import { useSubmissionGuard } from "@/hooks/useSubmissionGuard";
import { toast } from "@/hooks/use-toast";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";

export const AdminFreeOrderForm = () => {
  const {
    formData,
    images,
    videos,
    buyerProfiles,
    sellerProfiles,
    selectedSeller,
    isLoading,
    createdOrder,
    brands,
    brandModels,
    isLoadingCarData,
    searchBrandTerm,
    setSearchBrandTerm,
    searchModelTerm,
    setSearchModelTerm,
    filteredBrands,
    filteredModels,
    setImages,
    setVideos,
    handleInputChange,
    handleImageUpload,
    handleOrderUpdate,
    handleSubmit: originalHandleSubmit,
    resetForm,
    navigate,
    parseTitleForBrand,
    creationStage,
    creationProgress,
    // New initialization states
    isInitializing,
    initializationError,
    hasAdminAccess
  } = useAdminOrderFormLogic();

  const { guardedSubmit, canSubmit } = useSubmissionGuard({
    timeout: 10000,
    onDuplicateSubmit: () => {
      console.error('üö´ AdminFreeOrderForm: Duplicate submission attempt blocked');
      toast({
        title: "–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–µ—Ç—Å—è",
        description: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –∑–∞–∫–∞–∑ —É–∂–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è",
        variant: "destructive",
      });
    }
  });

  const form = useForm();

  // Enhanced error logging
  React.useEffect(() => {
    if (initializationError) {
      console.error('üî• AdminFreeOrderForm: Initialization error:', initializationError);
      console.error('üîç Current location:', window.location.href);
      console.error('üîç Has admin access:', hasAdminAccess);
    }
  }, [initializationError, hasAdminAccess]);

  // Show initialization error
  if (initializationError) {
    console.error('üö® AdminFreeOrderForm: Rendering initialization error state');
    return (
      <div className="space-y-4">
        <Alert variant="destructive">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏</AlertTitle>
          <AlertDescription>
            {initializationError}
            {process.env.NODE_ENV === 'development' && (
              <details className="mt-2 text-xs">
                <summary className="cursor-pointer">–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</summary>
                <pre className="mt-1 whitespace-pre-wrap break-words">
                  Location: {window.location.href}
                  {'\n'}Admin Access: {String(hasAdminAccess)}
                </pre>
              </details>
            )}
          </AlertDescription>
        </Alert>
        <Button 
          onClick={() => {
            console.log('üîÑ AdminFreeOrderForm: Navigating back to admin dashboard');
            navigate('/admin/dashboard');
          }}
          variant="outline"
          className="w-full"
        >
          –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        </Button>
      </div>
    );
  }

  // Show loading skeleton during initialization
  if (isInitializing) {
    console.log('‚è≥ AdminFreeOrderForm: Rendering initialization loading state');
    return (
      <div className="space-y-6">
        <div className="flex items-center gap-2 mb-4">
          <Loader className="h-4 w-4 animate-spin" />
          <span className="text-sm text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</span>
        </div>
        
        <div className="space-y-4">
          <Skeleton className="h-10 w-full" />
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <Skeleton className="h-10 w-full" />
            <Skeleton className="h-10 w-full" />
          </div>
          <Skeleton className="h-20 w-full" />
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <Skeleton className="h-10 w-full" />
            <Skeleton className="h-10 w-full" />
          </div>
        </div>
      </div>
    );
  }

  // Show access denied if not admin
  if (!hasAdminAccess) {
    console.warn('üîí AdminFreeOrderForm: Access denied - user is not admin');
    return (
      <div className="space-y-4">
        <Alert variant="destructive">
          <Shield className="h-4 w-4" />
          <AlertTitle>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</AlertTitle>
          <AlertDescription>
            –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
          </AlertDescription>
        </Alert>
        <Button 
          onClick={() => {
            console.log('üîÑ AdminFreeOrderForm: Redirecting unauthorized user to profile');
            navigate('/profile');
          }}
          variant="outline"
          className="w-full"
        >
          –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å
        </Button>
      </div>
    );
  }

  const onImagesUpload = (urls: string[]) => {
    console.log('üì∏ AdminFreeOrderForm: Images uploaded:', urls.length);
    handleImageUpload(urls);
  };

  const onVideoUpload = (urls: string[]) => {
    console.log('üé• AdminFreeOrderForm: Videos uploaded:', urls.length);
    setVideos((prev) => [...prev, ...urls]);
  };

  const onVideoDelete = (url: string) => {
    console.log('üóëÔ∏è AdminFreeOrderForm: Video deleted:', url);
    setVideos((prev) => prev.filter((v) => v !== url));
  };

  const handleGoBack = () => {
    console.log('‚¨ÖÔ∏è AdminFreeOrderForm: Going back to dashboard');
    navigate('/admin/dashboard');
  };

  const handleDataFromProduct = (productData: any) => {
    console.log("üì¶ AdminFreeOrderForm: Product data received:", productData);
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    console.log('üì§ AdminFreeOrderForm: Form submission initiated');
    guardedSubmit(async () => {
      try {
        await originalHandleSubmit(e);
        console.log('‚úÖ AdminFreeOrderForm: Form submitted successfully');
      } catch (error) {
        console.error('‚ùå AdminFreeOrderForm: Form submission failed:', error);
        toast({
          title: "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞",
          description: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
          variant: "destructive",
        });
      }
    });
  };
  
  const getStageMessage = () => {
    switch (creationStage) {
      case 'validating':
        return '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã...';
      case 'fetching_buyer':
        return '–ü–æ–∏—Å–∫ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è...';
      case 'creating_order':
        return '–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...';
      case 'fetching_order':
        return '–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞...';
      case 'saving_videos':
        return '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∏–¥–µ–æ...';
      case 'sending_notification':
        return '–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...';
      case 'completed':
        return '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!';
      default:
        return '–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞...';
    }
  };

  const isFormDisabled = isLoading || !canSubmit;

  if (createdOrder) {
    console.log('üéâ AdminFreeOrderForm: Rendering created order view');
    return (
      <CreatedOrderView
        order={createdOrder}
        images={images}
        onBack={handleGoBack}
        onNewOrder={resetForm}
        onOrderUpdate={handleOrderUpdate}
      />
    );
  }

  console.log('üìù AdminFreeOrderForm: Rendering form');
  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <SellerOrderFormFields
        formData={formData}
        handleInputChange={handleInputChange}
        buyerProfiles={buyerProfiles}
        sellerProfiles={sellerProfiles}
        selectedSeller={selectedSeller}
        brands={brands}
        brandModels={brandModels}
        isLoadingCarData={isLoadingCarData}
        searchBrandTerm={searchBrandTerm}
        setSearchBrandTerm={setSearchBrandTerm}
        searchModelTerm={searchModelTerm}
        setSearchModelTerm={setSearchModelTerm}
        filteredBrands={filteredBrands}
        filteredModels={filteredModels}
        parseTitleForBrand={parseTitleForBrand}
        onImagesUpload={onImagesUpload}
        onDataFromProduct={handleDataFromProduct}
        disabled={isFormDisabled}
      />
      
      <MediaUploadSection 
        images={images}
        videos={videos}
        onImagesUpload={onImagesUpload}
        onVideoUpload={onVideoUpload}
        onVideoDelete={onVideoDelete}
        disabled={isFormDisabled}
      />
      
      <div className="flex flex-col space-y-4">
        {isLoading && (
          <div className="border rounded-md p-4 bg-gray-50 space-y-3">
            <div className="flex items-center justify-between">
              <div className="flex items-center">
                <Loader className="mr-2 h-4 w-4 animate-spin" />
                <span className="font-medium">{getStageMessage()}</span>
              </div>
              <span className="text-sm text-gray-500">{creationProgress}%</span>
            </div>
            <Progress value={creationProgress} className="h-2" />
            {creationStage === 'completed' && (
              <div className="text-sm text-gray-600">
                –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.
              </div>
            )}
          </div>
        )}
        <div className="flex justify-end">
          <Button type="submit" disabled={isFormDisabled} className="w-full md:w-auto">
            {isLoading ? (
              <>
                <Loader className="mr-2 h-4 w-4 animate-spin" />
                –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞...
              </>
            ) : (
              "–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑"
            )}
          </Button>
        </div>
      </div>
    </form>
  );
};
