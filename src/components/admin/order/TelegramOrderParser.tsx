import React, { useState, useCallback } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@/components/ui/collapsible';
import { MessageSquare, ChevronDown, CheckCircle, AlertCircle, AlertTriangle, Copy } from 'lucide-react';
import { parseTelegramOrder, ParsedTelegramOrder, validateParsedOrder } from '@/utils/parseTelegramOrder';
import { toast } from '@/hooks/use-toast';

interface TelegramOrderParserProps {
  onDataParsed: (data: ParsedTelegramOrder) => void;
  disabled?: boolean;
}

export const TelegramOrderParser: React.FC<TelegramOrderParserProps> = ({
  onDataParsed,
  disabled = false
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const [telegramText, setTelegramText] = useState('');
  const [parsedData, setParsedData] = useState<ParsedTelegramOrder | null>(null);
  const [parseErrors, setParseErrors] = useState<string[]>([]);
  const [parseWarnings, setParseWarnings] = useState<string[]>([]);
  const [isProcessing, setIsProcessing] = useState(false);

  const handleParseText = useCallback(() => {
    if (!telegramText.trim()) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Telegram",
        variant: "destructive",
      });
      return;
    }

    setIsProcessing(true);
    
    try {
      const result = parseTelegramOrder(telegramText);
      
      if (result.success && result.data) {
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        const validationErrors = validateParsedOrder(result.data);
        
        if (validationErrors.length > 0) {
          setParseErrors([...result.errors, ...validationErrors]);
          setParseWarnings(result.warnings);
          setParsedData(null);
        } else {
          setParsedData(result.data);
          setParseErrors(result.errors);
          setParseWarnings(result.warnings);
          
          toast({
            title: "–£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ",
            description: `–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è${result.warnings.length > 0 ? ' (–µ—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è)' : ''}`,
          });
        }
      } else {
        setParseErrors(result.errors);
        setParseWarnings(result.warnings);
        setParsedData(null);
      }
    } catch (error) {
      setParseErrors([`–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`]);
      setParseWarnings([]);
      setParsedData(null);
    } finally {
      setIsProcessing(false);
    }
  }, [telegramText]);

  const handleApplyData = useCallback(() => {
    if (parsedData) {
      onDataParsed(parsedData);
      toast({
        title: "–î–∞–Ω–Ω—ã–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã",
        description: "–ü–æ–ª—è —Ñ–æ—Ä–º—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Telegram",
      });
      setIsOpen(false);
    }
  }, [parsedData, onDataParsed]);

  const handleClear = useCallback(() => {
    setTelegramText('');
    setParsedData(null);
    setParseErrors([]);
    setParseWarnings([]);
  }, []);

  const exampleText = `–ó–∞–∫–∞–∑: 07404
–°—Ç–∞—Ç—É—Å: –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
Telegram –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: @optshop2_bot

üü∞üü∞üü∞üü∞üü∞üü∞

–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: –ë–∞–º–ø–µ—Ä –ø–µ—Ä–µ–¥–Ω–∏–π Toyota Carina
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç: 1

üü∞üü∞üü∞üü∞üü∞üü∞
–°—Ç–æ–∏–º–æ—Å—Ç—å: 62$
–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: 27$

===
MDY
PETR`;

  const copyExample = () => {
    navigator.clipboard.writeText(exampleText);
    toast({
      title: "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ",
      description: "–ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞",
    });
  };

  return (
    <Card className="mb-6">
      <Collapsible open={isOpen} onOpenChange={setIsOpen}>
        <CollapsibleTrigger asChild>
          <CardHeader className="cursor-pointer hover:bg-muted/50 transition-colors">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <MessageSquare className="h-5 w-5 text-blue-600" />
                <CardTitle className="text-lg">–í—Å—Ç–∞–≤–∏—Ç—å –∏–∑ Telegram</CardTitle>
                <Badge variant="outline" className="text-xs">
                  –ë—ã—Å—Ç—Ä–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
                </Badge>
              </div>
              <ChevronDown className={`h-4 w-4 transition-transform ${isOpen ? 'rotate-180' : ''}`} />
            </div>
          </CardHeader>
        </CollapsibleTrigger>
        <CollapsibleContent>
          <CardContent className="space-y-4">
            <div className="text-sm text-muted-foreground">
              –í—Å—Ç–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Telegram –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π –∑–∞–∫–∞–∑–∞
            </div>

            {/* –ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è */}
            <Alert>
              <AlertCircle className="h-4 w-4" />
              <AlertDescription>
                <div className="flex items-center justify-between">
                  <span className="font-medium">–§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:</span>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={copyExample}
                    className="h-6 px-2"
                  >
                    <Copy className="h-3 w-3 mr-1" />
                    –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä
                  </Button>
                </div>
                <pre className="text-xs mt-2 p-2 bg-muted/50 rounded overflow-x-auto whitespace-pre-wrap">
                  {exampleText}
                </pre>
              </AlertDescription>
            </Alert>

            {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */}
            <div className="space-y-2">
              <label className="text-sm font-medium">–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Telegram</label>
              <Textarea
                value={telegramText}
                onChange={(e) => setTelegramText(e.target.value)}
                placeholder="–í—Å—Ç–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Telegram –∑–¥–µ—Å—å..."
                rows={8}
                disabled={disabled || isProcessing}
                className="font-mono text-sm"
              />
            </div>

            {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
            <div className="flex gap-2">
              <Button
                onClick={handleParseText}
                disabled={disabled || isProcessing || !telegramText.trim()}
                className="flex-1"
              >
                {isProcessing ? '–û–±—Ä–∞–±–æ—Ç–∫–∞...' : '–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞–Ω–Ω—ã–µ'}
              </Button>
              <Button
                variant="outline"
                onClick={handleClear}
                disabled={disabled || isProcessing}
              >
                –û—á–∏—Å—Ç–∏—Ç—å
              </Button>
            </div>

            {/* –û—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ */}
            {parseErrors.length > 0 && (
              <Alert variant="destructive">
                <AlertTriangle className="h-4 w-4" />
                <AlertDescription>
                  <div className="font-medium mb-2">–û—à–∏–±–∫–∏ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏:</div>
                  <ul className="list-disc list-inside space-y-1">
                    {parseErrors.map((error, index) => (
                      <li key={index} className="text-sm">{error}</li>
                    ))}
                  </ul>
                </AlertDescription>
              </Alert>
            )}

            {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è */}
            {parseWarnings.length > 0 && (
              <Alert>
                <AlertCircle className="h-4 w-4" />
                <AlertDescription>
                  <div className="font-medium mb-2">–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:</div>
                  <ul className="list-disc list-inside space-y-1">
                    {parseWarnings.map((warning, index) => (
                      <li key={index} className="text-sm">{warning}</li>
                    ))}
                  </ul>
                </AlertDescription>
              </Alert>
            )}

            {/* –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ */}
            {parsedData && (
              <Alert className="border-green-200 bg-green-50">
                <CheckCircle className="h-4 w-4 text-green-600" />
                <AlertDescription>
                  <div className="font-medium text-green-800 mb-3">–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã:</div>
                  <div className="grid grid-cols-2 gap-3 text-sm">
                    <div>
                      <span className="font-medium">–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</span>
                      <div className="text-green-700">{parsedData.title}</div>
                    </div>
                    <div>
                      <span className="font-medium">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç:</span>
                      <div className="text-green-700">{parsedData.place_number}</div>
                    </div>
                    <div>
                      <span className="font-medium">–°—Ç–æ–∏–º–æ—Å—Ç—å:</span>
                      <div className="text-green-700">${parsedData.price}</div>
                    </div>
                    {parsedData.delivery_price && (
                      <div>
                        <span className="font-medium">–î–æ—Å—Ç–∞–≤–∫–∞:</span>
                        <div className="text-green-700">${parsedData.delivery_price}</div>
                      </div>
                    )}
                    <div>
                      <span className="font-medium">–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</span>
                      <div className="text-green-700">{parsedData.buyerOptId}</div>
                    </div>
                    <div>
                      <span className="font-medium">–ü—Ä–æ–¥–∞–≤–µ—Ü:</span>
                      <div className="text-green-700">{parsedData.sellerOptId}</div>
                    </div>
                    {parsedData.brand && (
                      <div>
                        <span className="font-medium">–ë—Ä–µ–Ω–¥:</span>
                        <div className="text-green-700">{parsedData.brand}</div>
                      </div>
                    )}
                    {parsedData.model && (
                      <div>
                        <span className="font-medium">–ú–æ–¥–µ–ª—å:</span>
                        <div className="text-green-700">{parsedData.model}</div>
                      </div>
                    )}
                  </div>
                  <Button
                    onClick={handleApplyData}
                    className="mt-3 w-full"
                    disabled={disabled}
                  >
                    <CheckCircle className="h-4 w-4 mr-2" />
                    –ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª—è —Ñ–æ—Ä–º—ã
                  </Button>
                </AlertDescription>
              </Alert>
            )}
          </CardContent>
        </CollapsibleContent>
      </Collapsible>
    </Card>
  );
};