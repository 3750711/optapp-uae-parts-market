
import React, { useState } from 'react';
import { Button } from "@/components/ui/button";
import { useToast } from "@/hooks/use-toast";
import { Loader2, RefreshCw, CheckCircle, AlertTriangle } from "lucide-react";
import { recoverCloudinaryData, validateProductIntegrity } from "@/utils/cloudinaryRecovery";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Badge } from "@/components/ui/badge";

interface CloudinaryRecoveryButtonProps {
  productId?: string;
  onRecoveryComplete?: () => void;
}

export const CloudinaryRecoveryButton: React.FC<CloudinaryRecoveryButtonProps> = ({
  productId,
  onRecoveryComplete
}) => {
  const { toast } = useToast();
  const [isRecovering, setIsRecovering] = useState(false);
  const [isValidating, setIsValidating] = useState(false);
  const [validationResult, setValidationResult] = useState<{
    isValid: boolean;
    issues: string[];
    suggestions: string[];
  } | null>(null);

  const handleRecovery = async () => {
    setIsRecovering(true);
    
    try {
      console.log('üöÄ Starting Cloudinary recovery...', { productId });
      
      const result = await recoverCloudinaryData(productId);
      
      if (result.success) {
        toast({
          title: "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
          description: `–û–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${result.updatedProducts}`,
        });
        
        if (onRecoveryComplete) {
          onRecoveryComplete();
        }
        
        // –°—Ä–∞–∑—É –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        if (productId) {
          handleValidation();
        }
      } else {
        toast({
          title: "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏",
          description: `–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${result.updatedProducts}, –û—à–∏–±–æ–∫: ${result.errors.length}`,
          variant: "destructive",
        });
        
        console.error('Recovery errors:', result.errors);
      }
    } catch (error) {
      console.error('Recovery failed:', error);
      toast({
        title: "–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è",
        description: error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
        variant: "destructive",
      });
    } finally {
      setIsRecovering(false);
    }
  };

  const handleValidation = async () => {
    if (!productId) return;
    
    setIsValidating(true);
    
    try {
      const result = await validateProductIntegrity(productId);
      setValidationResult(result);
      
      if (result.isValid) {
        toast({
          title: "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞",
          description: "–¢–æ–≤–∞—Ä –∏–º–µ–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ",
        });
      } else {
        toast({
          title: "–ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã",
          description: `–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${result.issues.length} –ø—Ä–æ–±–ª–µ–º`,
          variant: "destructive",
        });
      }
    } catch (error) {
      console.error('Validation failed:', error);
      toast({
        title: "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
        description: error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
        variant: "destructive",
      });
    } finally {
      setIsValidating(false);
    }
  };

  return (
    <div className="space-y-4">
      <div className="flex gap-2">
        <Button
          onClick={handleRecovery}
          disabled={isRecovering}
          variant="outline"
          size="sm"
        >
          {isRecovering ? (
            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
          ) : (
            <RefreshCw className="mr-2 h-4 w-4" />
          )}
          {productId ? '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä' : '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ'}
        </Button>

        {productId && (
          <Button
            onClick={handleValidation}
            disabled={isValidating}
            variant="outline"
            size="sm"
          >
            {isValidating ? (
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
            ) : (
              <CheckCircle className="mr-2 h-4 w-4" />
            )}
            –ü—Ä–æ–≤–µ—Ä–∏—Ç—å
          </Button>
        )}
      </div>

      {validationResult && productId && (
        <Alert variant={validationResult.isValid ? "default" : "destructive"}>
          <AlertTriangle className="h-4 w-4" />
          <AlertDescription>
            <div className="space-y-2">
              <div className="flex items-center gap-2">
                <span className="font-medium">
                  –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏:
                </span>
                <Badge variant={validationResult.isValid ? "default" : "destructive"}>
                  {validationResult.isValid ? "‚úÖ –í—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ" : "‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã"}
                </Badge>
              </div>

              {validationResult.issues.length > 0 && (
                <div>
                  <p className="font-medium text-sm mb-1">–ü—Ä–æ–±–ª–µ–º—ã:</p>
                  <ul className="text-sm space-y-1">
                    {validationResult.issues.map((issue, index) => (
                      <li key={index} className="flex items-start gap-1">
                        <span className="text-red-500">‚Ä¢</span>
                        {issue}
                      </li>
                    ))}
                  </ul>
                </div>
              )}

              {validationResult.suggestions.length > 0 && (
                <div>
                  <p className="font-medium text-sm mb-1">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</p>
                  <ul className="text-sm space-y-1">
                    {validationResult.suggestions.map((suggestion, index) => (
                      <li key={index} className="flex items-start gap-1">
                        <span className="text-blue-500">‚Ä¢</span>
                        {suggestion}
                      </li>
                    ))}
                  </ul>
                </div>
              )}
            </div>
          </AlertDescription>
        </Alert>
      )}
    </div>
  );
};
