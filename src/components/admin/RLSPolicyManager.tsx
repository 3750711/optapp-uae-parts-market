
import React, { useState } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Loader2, Shield, Trash2, RefreshCw, Eye, AlertTriangle } from 'lucide-react';
import { useToast } from '@/components/ui/use-toast';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';

interface RLSPolicy {
  schema_name: string;
  table_name: string;
  policy_name: string;
  policy_roles: string[];
  policy_cmd: string;
  policy_qual: string;
}

const RLSPolicyManager = () => {
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [isClearing, setIsClearing] = useState(false);
  const [isRestoring, setIsRestoring] = useState(false);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –ø–æ–ª–∏—Ç–∏–∫
  const { data: policies, isLoading, error, refetch } = useQuery({
    queryKey: ['rls-policies'],
    queryFn: async () => {
      console.log('üîç Fetching RLS policies...');
      const { data, error } = await supabase.rpc('get_rls_policies_status');
      
      if (error) {
        console.error('‚ùå Error fetching RLS policies:', error);
        throw error;
      }
      
      console.log('‚úÖ RLS policies fetched:', data?.length || 0, 'policies');
      return data as RLSPolicy[];
    },
    staleTime: 30000, // 30 seconds
    retry: 2
  });

  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø–æ–ª–∏—Ç–∏–∫
  const clearPoliciesMutation = useMutation({
    mutationFn: async () => {
      console.log('üßπ Clearing all RLS policies...');
      const { data, error } = await supabase.rpc('clear_all_rls_policies');
      
      if (error) {
        console.error('‚ùå Error clearing RLS policies:', error);
        throw error;
      }
      
      console.log('‚úÖ RLS policies cleared:', data);
      return data;
    },
    onSuccess: (data) => {
      toast({
        title: "–ü–æ–ª–∏—Ç–∏–∫–∏ –æ—á–∏—â–µ–Ω—ã",
        description: data || "–í—Å–µ RLS –ø–æ–ª–∏—Ç–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã",
      });
      queryClient.invalidateQueries({ queryKey: ['rls-policies'] });
    },
    onError: (error) => {
      console.error('üí• Clear policies error:', error);
      toast({
        variant: "destructive",
        title: "–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏",
        description: error instanceof Error ? error.message : "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª–∏—Ç–∏–∫–∏",
      });
    }
  });

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –ø–æ–ª–∏—Ç–∏–∫
  const restorePoliciesMutation = useMutation({
    mutationFn: async () => {
      console.log('üîß Restoring basic RLS policies...');
      const { data, error } = await supabase.rpc('restore_basic_rls_policies');
      
      if (error) {
        console.error('‚ùå Error restoring RLS policies:', error);
        throw error;
      }
      
      console.log('‚úÖ RLS policies restored:', data);
      return data;
    },
    onSuccess: (data) => {
      toast({
        title: "–ü–æ–ª–∏—Ç–∏–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã",
        description: data || "–ë–∞–∑–æ–≤—ã–µ RLS –ø–æ–ª–∏—Ç–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã",
      });
      queryClient.invalidateQueries({ queryKey: ['rls-policies'] });
    },
    onError: (error) => {
      console.error('üí• Restore policies error:', error);
      toast({
        variant: "destructive",
        title: "–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è",
        description: error instanceof Error ? error.message : "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª–∏—Ç–∏–∫–∏",
      });
    }
  });

  const handleClearPolicies = async () => {
    if (!confirm('‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï RLS –ø–æ–ª–∏—Ç–∏–∫–∏? –≠—Ç–æ –º–æ–∂–µ—Ç –Ω–∞—Ä—É—à–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º.')) {
      return;
    }
    
    setIsClearing(true);
    try {
      await clearPoliciesMutation.mutateAsync();
    } finally {
      setIsClearing(false);
    }
  };

  const handleRestorePolicies = async () => {
    setIsRestoring(true);
    try {
      await restorePoliciesMutation.mutateAsync();
    } finally {
      setIsRestoring(false);
    }
  };

  const handleRefresh = () => {
    refetch();
    toast({
      title: "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ",
      description: "–°—Ç–∞—Ç—É—Å –ø–æ–ª–∏—Ç–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω",
    });
  };

  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ–ª–∏—Ç–∏–∫ –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º
  const groupedPolicies = policies?.reduce((acc, policy) => {
    const key = policy.table_name;
    if (!acc[key]) {
      acc[key] = [];
    }
    acc[key].push(policy);
    return acc;
  }, {} as Record<string, RLSPolicy[]>) || {};

  if (isLoading) {
    return (
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Shield className="h-5 w-5" />
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ RLS –ø–æ–ª–∏—Ç–∏–∫–∞–º–∏
          </CardTitle>
        </CardHeader>
        <CardContent className="flex items-center justify-center py-8">
          <Loader2 className="h-8 w-8 animate-spin" />
          <span className="ml-2">–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª–∏—Ç–∏–∫...</span>
        </CardContent>
      </Card>
    );
  }

  if (error) {
    return (
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Shield className="h-5 w-5" />
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ RLS –ø–æ–ª–∏—Ç–∏–∫–∞–º–∏
          </CardTitle>
        </CardHeader>
        <CardContent>
          <Alert variant="destructive">
            <AlertTriangle className="h-4 w-4" />
            <AlertDescription>
              –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª–∏—Ç–∏–∫: {error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}
            </AlertDescription>
          </Alert>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Shield className="h-5 w-5" />
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ RLS –ø–æ–ª–∏—Ç–∏–∫–∞–º–∏
          </CardTitle>
          <CardDescription>
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∞–º–∏ Row Level Security –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <Badge variant="outline" className="text-lg px-3 py-1">
                –í—Å–µ–≥–æ –ø–æ–ª–∏—Ç–∏–∫: {policies?.length || 0}
              </Badge>
              <Badge variant="outline" className="text-lg px-3 py-1">
                –¢–∞–±–ª–∏—Ü: {Object.keys(groupedPolicies).length}
              </Badge>
            </div>
            <Button
              variant="outline"
              size="sm"
              onClick={handleRefresh}
              disabled={isLoading}
            >
              <RefreshCw className="h-4 w-4 mr-2" />
              –û–±–Ω–æ–≤–∏—Ç—å
            </Button>
          </div>

          {/* –î–µ–π—Å—Ç–≤–∏—è */}
          <div className="flex gap-3 pt-4 border-t">
            <Button
              variant="destructive"
              onClick={handleClearPolicies}
              disabled={isClearing || clearPoliciesMutation.isPending}
            >
              {isClearing ? (
                <Loader2 className="h-4 w-4 mr-2 animate-spin" />
              ) : (
                <Trash2 className="h-4 w-4 mr-2" />
              )}
              –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ø–æ–ª–∏—Ç–∏–∫–∏
            </Button>
            <Button
              variant="default"
              onClick={handleRestorePolicies}
              disabled={isRestoring || restorePoliciesMutation.isPending}
            >
              {isRestoring ? (
                <Loader2 className="h-4 w-4 mr-2 animate-spin" />
              ) : (
                <RefreshCw className="h-4 w-4 mr-2" />
              )}
              –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑–æ–≤—ã–µ –ø–æ–ª–∏—Ç–∏–∫–∏
            </Button>
          </div>

          {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ */}
          {policies && policies.length === 0 && (
            <Alert variant="destructive">
              <AlertTriangle className="h-4 w-4" />
              <AlertDescription>
                ‚ö†Ô∏è –ü–æ–ª–∏—Ç–∏–∫–∏ RLS –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞—Ä—É—à–µ–Ω.
                –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑–æ–≤—ã–µ –ø–æ–ª–∏—Ç–∏–∫–∏.
              </AlertDescription>
            </Alert>
          )}
        </CardContent>
      </Card>

      {/* –°–ø–∏—Å–æ–∫ –ø–æ–ª–∏—Ç–∏–∫ –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º */}
      {Object.keys(groupedPolicies).length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Eye className="h-5 w-5" />
              –¢–µ–∫—É—â–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏ –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-6">
              {Object.entries(groupedPolicies).map(([tableName, tablePolicies]) => (
                <div key={tableName} className="space-y-2">
                  <h3 className="text-lg font-medium border-b pb-2">
                    –¢–∞–±–ª–∏—Ü–∞: <span className="font-mono text-blue-600">{tableName}</span>
                    <Badge variant="secondary" className="ml-2">
                      {tablePolicies.length} –ø–æ–ª–∏—Ç–∏–∫
                    </Badge>
                  </h3>
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏</TableHead>
                        <TableHead>–ö–æ–º–∞–Ω–¥–∞</TableHead>
                        <TableHead>–£—Å–ª–æ–≤–∏–µ</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {tablePolicies.map((policy, index) => (
                        <TableRow key={index}>
                          <TableCell className="font-mono text-sm">
                            {policy.policy_name}
                          </TableCell>
                          <TableCell>
                            <Badge variant="outline">{policy.policy_cmd}</Badge>
                          </TableCell>
                          <TableCell className="font-mono text-xs max-w-md truncate">
                            {policy.policy_qual || '–ù–µ—Ç —É—Å–ª–æ–≤–∏–π'}
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default RLSPolicyManager;
