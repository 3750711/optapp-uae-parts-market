import { useState } from 'react';
import { Search, X, Users, User, Package, Box, Ship, FileText } from 'lucide-react';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Card, CardContent } from '@/components/ui/card';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import { LogisticsFilters as LogisticsFiltersType, FilterOption, FilterStats } from '@/types/logisticsFilters';
import { FilterPopoverContent } from './FilterPopoverContent';
import { SHIPMENT_STATUS_OPTIONS, CONTAINER_STATUS_OPTIONS, ORDER_STATUS_OPTIONS } from './filterConstants';

interface LogisticsFiltersProps {
  filters: LogisticsFiltersType;
  onFiltersChange: (filters: LogisticsFiltersType) => void;
  sellers: FilterOption[];
  buyers: FilterOption[];
  containers: FilterOption[];
  stats: FilterStats;
}

export const LogisticsFilters: React.FC<LogisticsFiltersProps> = ({
  filters,
  onFiltersChange,
  sellers,
  buyers,
  containers,
  stats
}) => {
  const [openPopover, setOpenPopover] = useState<string | null>(null);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –º–∞—Å—Å–∏–≤–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const toggleFilter = (key: keyof LogisticsFiltersType, value: string) => {
    const currentValues = filters[key] as string[];
    const newValues = currentValues.includes(value)
      ? currentValues.filter(v => v !== value)
      : [...currentValues, value];
    
    onFiltersChange({ ...filters, [key]: newValues });
  };

  // –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã
  const clearAllFilters = () => {
    onFiltersChange({
      sellerIds: [],
      buyerIds: [],
      containerNumbers: [],
      shipmentStatuses: [],
      containerStatuses: [],
      orderStatuses: [],
      searchTerm: ''
    });
  };

  // –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –∏–∑ –º–∞—Å—Å–∏–≤–∞
  const removeFilter = (key: keyof LogisticsFiltersType, value: string) => {
    const currentValues = filters[key] as string[];
    const newValues = currentValues.filter(v => v !== value);
    onFiltersChange({ ...filters, [key]: newValues });
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
  const hasActiveFilters = 
    filters.sellerIds.length > 0 ||
    filters.buyerIds.length > 0 ||
    filters.containerNumbers.length > 0 ||
    filters.shipmentStatuses.length > 0 ||
    filters.containerStatuses.length > 0 ||
    filters.orderStatuses.length > 0 ||
    filters.searchTerm.length > 0;

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è label –ø–æ value
  const getSellerLabel = (id: string) => sellers.find(s => s.value === id)?.label || id;
  const getBuyerLabel = (id: string) => buyers.find(b => b.value === id)?.label || id;
  const getContainerLabel = (num: string) => containers.find(c => c.value === num)?.label || num;
  const getShipmentStatusLabel = (status: string) => SHIPMENT_STATUS_OPTIONS.find(s => s.value === status)?.label || status;
  const getContainerStatusLabel = (status: string) => CONTAINER_STATUS_OPTIONS.find(s => s.value === status)?.label || status;
  const getOrderStatusLabel = (status: string) => ORDER_STATUS_OPTIONS.find(s => s.value === status)?.label || status;

  return (
    <div className="space-y-4 mb-6">
      {/* 1. –ü–û–ò–°–ö –ò –û–ß–ò–°–¢–ö–ê */}
      <div className="flex gap-2">
        <div className="relative flex-1">
          <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
          <Input
            placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞..."
            value={filters.searchTerm}
            onChange={(e) => onFiltersChange({ ...filters, searchTerm: e.target.value })}
            className="pl-9"
          />
        </div>
        {hasActiveFilters && (
          <Button variant="outline" onClick={clearAllFilters}>
            <X className="h-4 w-4 mr-2" />
            –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ
          </Button>
        )}
      </div>

      {/* 2. –ê–ö–¢–ò–í–ù–´–ï –§–ò–õ–¨–¢–†–´ (BADGES) */}
      {hasActiveFilters && (
        <div className="flex flex-wrap gap-2 p-3 bg-muted/50 rounded-lg">
          <span className="text-sm font-medium text-muted-foreground">–ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:</span>
          
          {/* –ü—Ä–æ–¥–∞–≤—Ü—ã */}
          {filters.sellerIds.map(sellerId => (
            <Badge key={sellerId} variant="secondary" className="gap-1">
              üë• {getSellerLabel(sellerId)}
              <X 
                className="h-3 w-3 cursor-pointer hover:text-destructive" 
                onClick={() => removeFilter('sellerIds', sellerId)}
              />
            </Badge>
          ))}

          {/* –ü–æ–∫—É–ø–∞—Ç–µ–ª–∏ */}
          {filters.buyerIds.map(buyerId => (
            <Badge key={buyerId} variant="secondary" className="gap-1">
              üë§ {getBuyerLabel(buyerId)}
              <X 
                className="h-3 w-3 cursor-pointer hover:text-destructive" 
                onClick={() => removeFilter('buyerIds', buyerId)}
              />
            </Badge>
          ))}

          {/* –°—Ç–∞—Ç—É—Å—ã –æ—Ç–≥—Ä—É–∑–∫–∏ */}
          {filters.shipmentStatuses.map(status => (
            <Badge key={status} variant="secondary" className="gap-1">
              {getShipmentStatusLabel(status)}
              <X 
                className="h-3 w-3 cursor-pointer hover:text-destructive" 
                onClick={() => removeFilter('shipmentStatuses', status)}
              />
            </Badge>
          ))}

          {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã */}
          {filters.containerNumbers.map(containerNum => (
            <Badge key={containerNum} variant="secondary" className="gap-1">
              üì¶ {getContainerLabel(containerNum)}
              <X 
                className="h-3 w-3 cursor-pointer hover:text-destructive" 
                onClick={() => removeFilter('containerNumbers', containerNum)}
              />
            </Badge>
          ))}

          {/* –°—Ç–∞—Ç—É—Å—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ */}
          {filters.containerStatuses.map(status => (
            <Badge key={status} variant="secondary" className="gap-1">
              üö¢ {getContainerStatusLabel(status)}
              <X 
                className="h-3 w-3 cursor-pointer hover:text-destructive" 
                onClick={() => removeFilter('containerStatuses', status)}
              />
            </Badge>
          ))}

          {/* –°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤ */}
          {filters.orderStatuses.map(status => (
            <Badge key={status} variant="secondary" className="gap-1">
              üìã {getOrderStatusLabel(status)}
              <X 
                className="h-3 w-3 cursor-pointer hover:text-destructive" 
                onClick={() => removeFilter('orderStatuses', status)}
              />
            </Badge>
          ))}
        </div>
      )}

      {/* 3. –ö–ù–û–ü–ö–ò –§–ò–õ–¨–¢–†–û–í (POPOVERS) */}
      <div className="flex flex-wrap gap-2">
        {/* –ü—Ä–æ–¥–∞–≤—Ü—ã */}
        <Popover open={openPopover === 'sellers'} onOpenChange={(open) => setOpenPopover(open ? 'sellers' : null)}>
          <PopoverTrigger asChild>
            <Button variant="outline" size="sm">
              <Users className="h-4 w-4 mr-2" />
              –ü—Ä–æ–¥–∞–≤—Ü—ã
              {filters.sellerIds.length > 0 && (
                <Badge variant="secondary" className="ml-2">
                  {filters.sellerIds.length}
                </Badge>
              )}
            </Button>
          </PopoverTrigger>
          <PopoverContent className="w-80">
            <FilterPopoverContent
              title="–ü—Ä–æ–¥–∞–≤—Ü—ã"
              options={sellers}
              selectedValues={filters.sellerIds}
              onToggle={(value) => toggleFilter('sellerIds', value)}
            />
          </PopoverContent>
        </Popover>

        {/* –ü–æ–∫—É–ø–∞—Ç–µ–ª–∏ */}
        <Popover open={openPopover === 'buyers'} onOpenChange={(open) => setOpenPopover(open ? 'buyers' : null)}>
          <PopoverTrigger asChild>
            <Button variant="outline" size="sm">
              <User className="h-4 w-4 mr-2" />
              –ü–æ–∫—É–ø–∞—Ç–µ–ª–∏
              {filters.buyerIds.length > 0 && (
                <Badge variant="secondary" className="ml-2">
                  {filters.buyerIds.length}
                </Badge>
              )}
            </Button>
          </PopoverTrigger>
          <PopoverContent className="w-80">
            <FilterPopoverContent
              title="–ü–æ–∫—É–ø–∞—Ç–µ–ª–∏"
              options={buyers}
              selectedValues={filters.buyerIds}
              onToggle={(value) => toggleFilter('buyerIds', value)}
            />
          </PopoverContent>
        </Popover>

        {/* –°—Ç–∞—Ç—É—Å –æ—Ç–≥—Ä—É–∑–∫–∏ */}
        <Popover open={openPopover === 'shipmentStatus'} onOpenChange={(open) => setOpenPopover(open ? 'shipmentStatus' : null)}>
          <PopoverTrigger asChild>
            <Button variant="outline" size="sm">
              <Package className="h-4 w-4 mr-2" />
              –°—Ç–∞—Ç—É—Å –æ—Ç–≥—Ä—É–∑–∫–∏
              {filters.shipmentStatuses.length > 0 && (
                <Badge variant="secondary" className="ml-2">
                  {filters.shipmentStatuses.length}
                </Badge>
              )}
            </Button>
          </PopoverTrigger>
          <PopoverContent className="w-80">
            <FilterPopoverContent
              title="–°—Ç–∞—Ç—É—Å –æ—Ç–≥—Ä—É–∑–∫–∏"
              options={SHIPMENT_STATUS_OPTIONS}
              selectedValues={filters.shipmentStatuses}
              onToggle={(value) => toggleFilter('shipmentStatuses', value)}
            />
          </PopoverContent>
        </Popover>

        {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã */}
        <Popover open={openPopover === 'containers'} onOpenChange={(open) => setOpenPopover(open ? 'containers' : null)}>
          <PopoverTrigger asChild>
            <Button variant="outline" size="sm">
              <Box className="h-4 w-4 mr-2" />
              –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
              {filters.containerNumbers.length > 0 && (
                <Badge variant="secondary" className="ml-2">
                  {filters.containerNumbers.length}
                </Badge>
              )}
            </Button>
          </PopoverTrigger>
          <PopoverContent className="w-80">
            <FilterPopoverContent
              title="–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"
              options={containers}
              selectedValues={filters.containerNumbers}
              onToggle={(value) => toggleFilter('containerNumbers', value)}
            />
          </PopoverContent>
        </Popover>

        {/* –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ */}
        <Popover open={openPopover === 'containerStatus'} onOpenChange={(open) => setOpenPopover(open ? 'containerStatus' : null)}>
          <PopoverTrigger asChild>
            <Button variant="outline" size="sm">
              <Ship className="h-4 w-4 mr-2" />
              –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
              {filters.containerStatuses.length > 0 && (
                <Badge variant="secondary" className="ml-2">
                  {filters.containerStatuses.length}
                </Badge>
              )}
            </Button>
          </PopoverTrigger>
          <PopoverContent className="w-80">
            <FilterPopoverContent
              title="–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
              options={CONTAINER_STATUS_OPTIONS}
              selectedValues={filters.containerStatuses}
              onToggle={(value) => toggleFilter('containerStatuses', value)}
            />
          </PopoverContent>
        </Popover>

        {/* –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ */}
        <Popover open={openPopover === 'orderStatus'} onOpenChange={(open) => setOpenPopover(open ? 'orderStatus' : null)}>
          <PopoverTrigger asChild>
            <Button variant="outline" size="sm">
              <FileText className="h-4 w-4 mr-2" />
              –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
              {filters.orderStatuses.length > 0 && (
                <Badge variant="secondary" className="ml-2">
                  {filters.orderStatuses.length}
                </Badge>
              )}
            </Button>
          </PopoverTrigger>
          <PopoverContent className="w-80">
            <FilterPopoverContent
              title="–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞"
              options={ORDER_STATUS_OPTIONS}
              selectedValues={filters.orderStatuses}
              onToggle={(value) => toggleFilter('orderStatuses', value)}
            />
          </PopoverContent>
        </Popover>
      </div>

      {/* 4. –°–¢–ê–¢–ò–°–¢–ò–ö–ê –§–ò–õ–¨–¢–†–ê–¶–ò–ò */}
      <Card className="bg-muted/30">
        <CardContent className="pt-4">
          <div className="grid grid-cols-2 md:grid-cols-5 gap-4 text-sm">
            <div>
              <div className="text-muted-foreground">–ü–æ–∫–∞–∑–∞–Ω–æ</div>
              <div className="text-2xl font-bold">
                {stats.filteredOrders}
                <span className="text-sm font-normal text-muted-foreground ml-1">
                  –∏–∑ {stats.totalOrders}
                </span>
              </div>
            </div>
            <div>
              <div className="text-muted-foreground">–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</div>
              <div className="text-xl font-semibold text-red-600">
                {stats.notShipped}
              </div>
            </div>
            <div>
              <div className="text-muted-foreground">–ß–∞—Å—Ç–∏—á–Ω–æ</div>
              <div className="text-xl font-semibold text-orange-600">
                {stats.partiallyShipped}
              </div>
            </div>
            <div>
              <div className="text-muted-foreground">–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</div>
              <div className="text-xl font-semibold text-green-600">
                {stats.inTransit}
              </div>
            </div>
            <div>
              <div className="text-muted-foreground">–°—É–º–º–∞ –¥–æ—Å—Ç–∞–≤–∫–∏</div>
              <div className="text-xl font-semibold">
                ${stats.totalDeliveryPrice.toFixed(2)}
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};
