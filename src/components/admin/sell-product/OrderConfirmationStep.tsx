import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Edit3, Save, X, ArrowLeft, CheckCircle } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import OptimizedImage from '@/components/ui/OptimizedImage';
import { Separator } from '@/components/ui/separator';

interface Product {
  id: string;
  title: string;
  price: number;
  brand?: string;
  model?: string;
  delivery_price?: number;
  place_number?: number;
  product_images?: { url: string; is_primary?: boolean }[];
}

interface SellerProfile {
  id: string;
  full_name: string;
  opt_id: string;
  telegram?: string;
}

interface BuyerProfile {
  id: string;
  full_name: string;
  opt_id: string;
  telegram?: string;
}

interface OrderConfirmationStepProps {
  product: Product;
  seller: SellerProfile;
  buyer: BuyerProfile;
  onConfirm: (orderData: {
    price: number;
    deliveryPrice?: number;
    deliveryMethod: string;
    orderImages: string[];
    editedData?: {
      title: string;
      brand: string;
      model: string;
      price: number;
      deliveryPrice: number;
      placeNumber: number;
      textOrder: string;
    };
  }) => Promise<void>;
  onBack: () => void;
  isSubmitting: boolean;
}

interface EditableData {
  title: string;
  brand: string;
  model: string;
  price: number;
  deliveryPrice: number;
  deliveryMethod: string;
  placeNumber: number;
  textOrder: string;
}

const OrderConfirmationStep: React.FC<OrderConfirmationStepProps> = ({
  product,
  seller,
  buyer,
  onConfirm,
  onBack,
  isSubmitting
}) => {
  const { toast } = useToast();
  const [isEditing, setIsEditing] = useState(false);
  const [editableData, setEditableData] = useState<EditableData>({
    title: product.title,
    brand: product.brand || '',
    model: product.model || '',
    price: product.price,
    deliveryPrice: product.delivery_price || 0,
    deliveryMethod: 'cargo_rf',
    placeNumber: product.place_number ?? 1,
    textOrder: ''
  });

  const [originalData, setOriginalData] = useState<EditableData>(editableData);

  const handleEdit = () => {
    setOriginalData({ ...editableData });
    setIsEditing(true);
  };

  const handleCancel = () => {
    setEditableData({ ...originalData });
    setIsEditing(false);
  };

  const validateForm = (): boolean => {
    if (!editableData.title.trim()) {
      toast({
        title: "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
        description: "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è",
        variant: "destructive",
      });
      return false;
    }

    if (editableData.price <= 0) {
      toast({
        title: "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
        description: "–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0",
        variant: "destructive",
      });
      return false;
    }

    if (editableData.placeNumber <= 0) {
      toast({
        title: "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
        description: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0",
        variant: "destructive",
      });
      return false;
    }

    return true;
  };

  const handleSave = () => {
    if (!validateForm()) return;
    setIsEditing(false);
  };

  const handleConfirmOrder = async () => {
    if (!validateForm()) return;

    const productImageUrls = product.product_images?.map(img => img.url) || [];
    
    try {
      const orderData = {
        price: editableData.price,
        deliveryPrice: editableData.deliveryPrice,
        deliveryMethod: editableData.deliveryMethod,
        orderImages: productImageUrls,
        editedData: {
          title: editableData.title,
          brand: editableData.brand,
          model: editableData.model,
          price: editableData.price,
          deliveryPrice: editableData.deliveryPrice,
          placeNumber: editableData.placeNumber,
          textOrder: editableData.textOrder
        }
      };
      
      await onConfirm(orderData);
    } catch (error) {
      console.error('Error creating order:', error);
    }
  };

  const updateField = (field: keyof EditableData, value: string | number) => {
    const newData = { ...editableData, [field]: value };
    setEditableData(newData);
  };

  const shouldShowDeliveryPrice = () => {
    return editableData.deliveryMethod === 'cargo_rf' && editableData.deliveryPrice > 0;
  };

  const getTotalPrice = () => {
    return editableData.price + (shouldShowDeliveryPrice() ? editableData.deliveryPrice : 0);
  };

  const getDeliveryMethodLabel = (method: string) => {
    switch (method) {
      case 'cargo_rf': return 'üöõ –î–æ—Å—Ç–∞–≤–∫–∞ Cargo –†–§';
      case 'self_pickup': return 'üì¶ –°–∞–º–æ–≤—ã–≤–æ–∑';
      case 'cargo_kz': return 'üöö –î–æ—Å—Ç–∞–≤–∫–∞ Cargo KZ';
      default: return method;
    }
  };

  if (isEditing) {
    return (
      <div className="space-y-6">
        <div className="flex items-center justify-between">
          <h3 className="text-lg font-semibold">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞</h3>
          <div className="flex gap-2">
            <Button
              variant="outline"
              size="sm"
              onClick={handleCancel}
              disabled={isSubmitting}
            >
              <X className="h-4 w-4 mr-1" />
              –û—Ç–º–µ–Ω–∏—Ç—å
            </Button>
            <Button
              size="sm"
              onClick={handleSave}
              disabled={isSubmitting}
            >
              <Save className="h-4 w-4 mr-1" />
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            </Button>
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {/* –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ */}
          <div className="md:col-span-2">
            <Label htmlFor="title">–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ *</Label>
            <Input
              id="title"
              value={editableData.title}
              onChange={(e) => updateField('title', e.target.value)}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"
              disabled={isSubmitting}
            />
          </div>

          {/* –ë—Ä–µ–Ω–¥ */}
          <div>
            <Label htmlFor="brand">–ë—Ä–µ–Ω–¥</Label>
            <Input
              id="brand"
              value={editableData.brand}
              onChange={(e) => updateField('brand', e.target.value)}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –±—Ä–µ–Ω–¥"
              disabled={isSubmitting}
            />
          </div>

          {/* –ú–æ–¥–µ–ª—å */}
          <div>
            <Label htmlFor="model">–ú–æ–¥–µ–ª—å</Label>
            <Input
              id="model"
              value={editableData.model}
              onChange={(e) => updateField('model', e.target.value)}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å"
              disabled={isSubmitting}
            />
          </div>

          {/* –¶–µ–Ω–∞ */}
          <div>
            <Label htmlFor="price">–¶–µ–Ω–∞ ($) *</Label>
            <Input
              id="price"
              type="number"
              min="0"
              step="0.01"
              value={editableData.price}
              onChange={(e) => updateField('price', parseFloat(e.target.value) || 0)}
              disabled={isSubmitting}
            />
          </div>

          {/* –°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ */}
          <div>
            <Label>–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏</Label>
            <Select
              value={editableData.deliveryMethod}
              onValueChange={(value) => updateField('deliveryMethod', value)}
              disabled={isSubmitting}
            >
              <SelectTrigger>
                <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="cargo_rf">üöõ –î–æ—Å—Ç–∞–≤–∫–∞ Cargo –†–§</SelectItem>
                <SelectItem value="self_pickup">üì¶ –°–∞–º–æ–≤—ã–≤–æ–∑</SelectItem>
                <SelectItem value="cargo_kz">üöö –î–æ—Å—Ç–∞–≤–∫–∞ Cargo KZ</SelectItem>
              </SelectContent>
            </Select>
          </div>

          {/* –¶–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ */}
          {editableData.deliveryMethod === 'cargo_rf' && (
            <div>
              <Label htmlFor="deliveryPrice">–¶–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ ($)</Label>
              <Input
                id="deliveryPrice"
                type="number"
                min="0"
                step="0.01"
                value={editableData.deliveryPrice}
                onChange={(e) => updateField('deliveryPrice', parseFloat(e.target.value) || 0)}
                disabled={isSubmitting}
              />
            </div>
          )}

          {/* –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç */}
          <div>
            <Label htmlFor="placeNumber">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç *</Label>
            <Input
              id="placeNumber"
              type="number"
              min="1"
              value={editableData.placeNumber}
              onChange={(e) => updateField('placeNumber', parseInt(e.target.value) || 1)}
              disabled={isSubmitting}
            />
          </div>

          {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <div className="md:col-span-2">
            <Label htmlFor="textOrder">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</Label>
            <Textarea
              id="textOrder"
              value={editableData.textOrder}
              onChange={(e) => updateField('textOrder', e.target.value)}
              placeholder="–£–∫–∞–∂–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞–∫–∞–∑—É"
              disabled={isSubmitting}
              rows={3}
            />
          </div>
        </div>

        <div className="flex justify-between">
          <Button variant="outline" onClick={onBack} disabled={isSubmitting}>
            <ArrowLeft className="h-4 w-4 mr-2" />
            –ù–∞–∑–∞–¥ –∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º
          </Button>
          
          <Button 
            onClick={handleConfirmOrder} 
            disabled={isSubmitting}
            className="min-w-[200px]"
          >
            {isSubmitting ? (
              <>
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞...
              </>
            ) : (
              <>
                <CheckCircle className="h-4 w-4 mr-2" />
                –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑
              </>
            )}
          </Button>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h3 className="text-lg font-semibold">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</h3>
        <Button
          variant="outline"
          size="sm"
          onClick={handleEdit}
          disabled={isSubmitting}
        >
          <Edit3 className="h-4 w-4 mr-1" />
          –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        </Button>
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ */}
      <Card>
        <CardHeader>
          <CardTitle>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <Label className="text-sm font-medium text-muted-foreground">–ù–∞–∑–≤–∞–Ω–∏–µ:</Label>
              <p className="text-base">{editableData.title}</p>
            </div>
            <div>
              <Label className="text-sm font-medium text-muted-foreground">–¶–µ–Ω–∞:</Label>
              <p className="text-base font-semibold">${editableData.price}</p>
            </div>
            <div>
              <Label className="text-sm font-medium text-muted-foreground">–ë—Ä–µ–Ω–¥:</Label>
              <p className="text-base">{editableData.brand || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
            </div>
            <div>
              <Label className="text-sm font-medium text-muted-foreground">–ú–æ–¥–µ–ª—å:</Label>
              <p className="text-base">{editableData.model || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</p>
            </div>
          </div>

          {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ */}
          {product.product_images && product.product_images.length > 0 && (
            <div>
              <Label className="text-sm font-medium text-muted-foreground mb-2 block">–ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã —Ç–æ–≤–∞—Ä–∞:</Label>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                {product.product_images.map((image, index) => (
                  <div key={index} className="aspect-square">
                    <OptimizedImage
                      src={image.url}
                      alt={`–¢–æ–≤–∞—Ä ${index + 1}`}
                      className="w-full h-full object-cover rounded-md border"
                    />
                  </div>
                ))}
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      {/* –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–∫–∞–∑–∞ */}
      <Card>
        <CardHeader>
          <CardTitle>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–∫–∞–∑–∞</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <Label className="text-sm font-medium text-muted-foreground">–î–æ—Å—Ç–∞–≤–∫–∞:</Label>
              <p className="text-base">{getDeliveryMethodLabel(editableData.deliveryMethod)}</p>
            </div>
            {shouldShowDeliveryPrice() && (
              <div>
                <Label className="text-sm font-medium text-muted-foreground">–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏:</Label>
                <p className="text-base">${editableData.deliveryPrice}</p>
              </div>
            )}
            <div>
              <Label className="text-sm font-medium text-muted-foreground">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç:</Label>
              <p className="text-base">{editableData.placeNumber}</p>
            </div>
            <div>
              <Label className="text-sm font-medium text-muted-foreground">–ò—Ç–æ–≥–æ:</Label>
              <p className="text-lg font-bold text-primary">${getTotalPrice()}</p>
            </div>
          </div>
          
          {editableData.textOrder && (
            <div>
              <Label className="text-sm font-medium text-muted-foreground">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</Label>
              <p className="text-base mt-1 p-3 bg-muted rounded-md">{editableData.textOrder}</p>
            </div>
          )}
        </CardContent>
      </Card>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <Card>
          <CardHeader>
            <CardTitle>–ü—Ä–æ–¥–∞–≤–µ—Ü</CardTitle>
          </CardHeader>
          <CardContent className="space-y-2">
            <div>
              <Label className="text-sm font-medium text-muted-foreground">–ò–º—è:</Label>
              <p className="text-base">{seller.full_name}</p>
            </div>
            <div>
              <Label className="text-sm font-medium text-muted-foreground">OPT ID:</Label>
              <p className="text-base">{seller.opt_id}</p>
            </div>
            {seller.telegram && (
              <div>
                <Label className="text-sm font-medium text-muted-foreground">Telegram:</Label>
                <p className="text-base">{seller.telegram}</p>
              </div>
            )}
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å</CardTitle>
          </CardHeader>
          <CardContent className="space-y-2">
            <div>
              <Label className="text-sm font-medium text-muted-foreground">–ò–º—è:</Label>
              <p className="text-base">{buyer.full_name}</p>
            </div>
            <div>
              <Label className="text-sm font-medium text-muted-foreground">OPT ID:</Label>
              <p className="text-base">{buyer.opt_id}</p>
            </div>
            {buyer.telegram && (
              <div>
                <Label className="text-sm font-medium text-muted-foreground">Telegram:</Label>
                <p className="text-base">{buyer.telegram}</p>
              </div>
            )}
          </CardContent>
        </Card>
      </div>

      {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
      <div className="flex justify-between">
        <Button variant="outline" onClick={onBack} disabled={isSubmitting}>
          <ArrowLeft className="h-4 w-4 mr-2" />
          –ù–∞–∑–∞–¥ –∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º
        </Button>
        
        <Button 
          onClick={handleConfirmOrder} 
          disabled={isSubmitting}
          className="min-w-[200px]"
        >
          {isSubmitting ? (
            <>
              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
              –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞...
            </>
          ) : (
            <>
              <CheckCircle className="h-4 w-4 mr-2" />
              –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑
            </>
          )}
        </Button>
      </div>
    </div>
  );
};

export default OrderConfirmationStep;