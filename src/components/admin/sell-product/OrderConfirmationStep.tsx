import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { ArrowLeft, CheckCircle } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import OptimizedImage from '@/components/ui/OptimizedImage';
import { InlineEditableField } from '@/components/ui/InlineEditableField';
import { InlineEditableTextarea } from '@/components/ui/InlineEditableTextarea';
import { InlineEditableSelect } from '@/components/ui/InlineEditableSelect';

interface Product {
  id: string;
  title: string;
  price: number;
  brand?: string;
  model?: string;
  delivery_price?: number;
  place_number?: number;
  product_images?: { url: string; is_primary?: boolean }[];
}

interface SellerProfile {
  id: string;
  full_name: string;
  opt_id: string;
  telegram?: string;
}

interface BuyerProfile {
  id: string;
  full_name: string;
  opt_id: string;
  telegram?: string;
}

interface OrderConfirmationStepProps {
  product: Product;
  seller: SellerProfile;
  buyer: BuyerProfile;
  onConfirm: (orderData: {
    price: number;
    deliveryPrice?: number;
    deliveryMethod: string;
    orderImages: string[];
    editedData?: {
      title: string;
      brand: string;
      model: string;
      price: number;
      deliveryPrice: number;
      placeNumber: number;
      textOrder: string;
    };
  }) => Promise<void>;
  onBack: () => void;
  isSubmitting: boolean;
}

interface EditableData {
  title: string;
  brand: string;
  model: string;
  price: number;
  deliveryPrice: number;
  deliveryMethod: string;
  placeNumber: number;
  textOrder: string;
}

const DELIVERY_OPTIONS = [
  { value: 'cargo_rf', label: 'üöõ –î–æ—Å—Ç–∞–≤–∫–∞ Cargo –†–§' },
  { value: 'self_pickup', label: 'üì¶ –°–∞–º–æ–≤—ã–≤–æ–∑' },
  { value: 'cargo_kz', label: 'üöö –î–æ—Å—Ç–∞–≤–∫–∞ Cargo KZ' }
];

const OrderConfirmationStep: React.FC<OrderConfirmationStepProps> = ({
  product,
  seller,
  buyer,
  onConfirm,
  onBack,
  isSubmitting
}) => {
  const { toast } = useToast();
  const [editableData, setEditableData] = useState<EditableData>({
    title: product.title,
    brand: product.brand || '',
    model: product.model || '',
    price: product.price,
    deliveryPrice: product.delivery_price || 0,
    deliveryMethod: 'cargo_rf',
    placeNumber: product.place_number ?? 1,
    textOrder: ''
  });

  // Field update handlers
  const handleFieldUpdate = async (field: keyof EditableData, value: string | number) => {
    setEditableData(prev => ({ ...prev, [field]: value }));
    
    // Show success toast for field updates
    toast({
      title: "–ü–æ–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ",
      description: "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
    });
  };

  const validateForm = (): boolean => {
    if (!editableData.title.trim()) {
      toast({
        title: "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
        description: "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è",
        variant: "destructive",
      });
      return false;
    }

    if (editableData.price <= 0) {
      toast({
        title: "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
        description: "–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0",
        variant: "destructive",
      });
      return false;
    }

    if (editableData.placeNumber <= 0) {
      toast({
        title: "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
        description: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0",
        variant: "destructive",
      });
      return false;
    }

    return true;
  };

  const handleConfirmOrder = async () => {
    if (!validateForm()) return;

    const productImageUrls = product.product_images?.map(img => img.url) || [];
    
    try {
      const orderData = {
        price: editableData.price,
        deliveryPrice: editableData.deliveryPrice,
        deliveryMethod: editableData.deliveryMethod,
        orderImages: productImageUrls,
        editedData: {
          title: editableData.title,
          brand: editableData.brand,
          model: editableData.model,
          price: editableData.price,
          deliveryPrice: editableData.deliveryPrice,
          placeNumber: editableData.placeNumber,
          textOrder: editableData.textOrder
        }
      };
      
      await onConfirm(orderData);
    } catch (error) {
      console.error('Error creating order:', error);
    }
  };

  const shouldShowDeliveryPrice = () => {
    return editableData.deliveryMethod === 'cargo_rf' && editableData.deliveryPrice > 0;
  };

  const getTotalPrice = () => {
    return editableData.price + (shouldShowDeliveryPrice() ? editableData.deliveryPrice : 0);
  };

  const getDeliveryMethodLabel = (method: string) => {
    const option = DELIVERY_OPTIONS.find(opt => opt.value === method);
    return option?.label || method;
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center">
        <h3 className="text-lg font-semibold">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ</h3>
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ */}
      <Card>
        <CardHeader>
          <CardTitle>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <Label className="text-sm font-medium text-muted-foreground">–ù–∞–∑–≤–∞–Ω–∏–µ:</Label>
              <InlineEditableField
                value={editableData.title}
                onSave={(value) => handleFieldUpdate('title', value)}
                required
                placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"
                className="text-base font-medium"
              />
            </div>
            <div>
              <Label className="text-sm font-medium text-muted-foreground">–¶–µ–Ω–∞:</Label>
              <InlineEditableField
                value={editableData.price}
                onSave={(value) => handleFieldUpdate('price', value)}
                type="price"
                min={0.01}
                step="0.01"
                className="text-base font-semibold"
              />
            </div>
            <div>
              <Label className="text-sm font-medium text-muted-foreground">–ë—Ä–µ–Ω–¥:</Label>
              <InlineEditableField
                value={editableData.brand || '–ù–µ —É–∫–∞–∑–∞–Ω'}
                onSave={(value) => handleFieldUpdate('brand', value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –±—Ä–µ–Ω–¥"
                className="text-base"
              />
            </div>
            <div>
              <Label className="text-sm font-medium text-muted-foreground">–ú–æ–¥–µ–ª—å:</Label>
              <InlineEditableField
                value={editableData.model || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
                onSave={(value) => handleFieldUpdate('model', value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å"
                className="text-base"
              />
            </div>
          </div>

          {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ */}
          {product.product_images && product.product_images.length > 0 && (
            <div>
              <Label className="text-sm font-medium text-muted-foreground mb-2 block">–ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã —Ç–æ–≤–∞—Ä–∞:</Label>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                {product.product_images.map((image, index) => (
                  <div key={index} className="aspect-square">
                    <OptimizedImage
                      src={image.url}
                      alt={`–¢–æ–≤–∞—Ä ${index + 1}`}
                      className="w-full h-full object-cover rounded-md border"
                    />
                  </div>
                ))}
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      {/* –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–∫–∞–∑–∞ */}
      <Card>
        <CardHeader>
          <CardTitle>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–∫–∞–∑–∞</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <Label className="text-sm font-medium text-muted-foreground">–î–æ—Å—Ç–∞–≤–∫–∞:</Label>
              <InlineEditableSelect
                value={editableData.deliveryMethod}
                onSave={(value) => handleFieldUpdate('deliveryMethod', value)}
                options={DELIVERY_OPTIONS}
                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏"
                className="text-base"
              />
            </div>
            {editableData.deliveryMethod === 'cargo_rf' && (
              <div>
                <Label className="text-sm font-medium text-muted-foreground">–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏:</Label>
                <InlineEditableField
                  value={editableData.deliveryPrice}
                  onSave={(value) => handleFieldUpdate('deliveryPrice', value)}
                  type="price"
                  min={0}
                  step="0.01"
                  className="text-base"
                />
              </div>
            )}
            <div>
              <Label className="text-sm font-medium text-muted-foreground">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç:</Label>
              <InlineEditableField
                value={editableData.placeNumber}
                onSave={(value) => handleFieldUpdate('placeNumber', value)}
                type="number"
                min={1}
                className="text-base"
              />
            </div>
            <div>
              <Label className="text-sm font-medium text-muted-foreground">–ò—Ç–æ–≥–æ:</Label>
              <p className="text-lg font-bold text-primary">${getTotalPrice()}</p>
            </div>
          </div>
          
          <div>
            <Label className="text-sm font-medium text-muted-foreground">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</Label>
            <InlineEditableTextarea
              value={editableData.textOrder}
              onSave={(value) => handleFieldUpdate('textOrder', value)}
              placeholder="–£–∫–∞–∂–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞–∫–∞–∑—É"
              emptyText="–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"
              className="mt-1"
            />
          </div>
        </CardContent>
      </Card>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <Card>
          <CardHeader>
            <CardTitle>–ü—Ä–æ–¥–∞–≤–µ—Ü</CardTitle>
          </CardHeader>
          <CardContent className="space-y-2">
            <div>
              <Label className="text-sm font-medium text-muted-foreground">–ò–º—è:</Label>
              <p className="text-base">{seller.full_name}</p>
            </div>
            <div>
              <Label className="text-sm font-medium text-muted-foreground">OPT ID:</Label>
              <p className="text-base">{seller.opt_id}</p>
            </div>
            {seller.telegram && (
              <div>
                <Label className="text-sm font-medium text-muted-foreground">Telegram:</Label>
                <p className="text-base">{seller.telegram}</p>
              </div>
            )}
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å</CardTitle>
          </CardHeader>
          <CardContent className="space-y-2">
            <div>
              <Label className="text-sm font-medium text-muted-foreground">–ò–º—è:</Label>
              <p className="text-base">{buyer.full_name}</p>
            </div>
            <div>
              <Label className="text-sm font-medium text-muted-foreground">OPT ID:</Label>
              <p className="text-base">{buyer.opt_id}</p>
            </div>
            {buyer.telegram && (
              <div>
                <Label className="text-sm font-medium text-muted-foreground">Telegram:</Label>
                <p className="text-base">{buyer.telegram}</p>
              </div>
            )}
          </CardContent>
        </Card>
      </div>

      {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
      <div className="flex justify-between">
        <Button variant="outline" onClick={onBack} disabled={isSubmitting}>
          <ArrowLeft className="h-4 w-4 mr-2" />
          –ù–∞–∑–∞–¥ –∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º
        </Button>
        
        <Button 
          onClick={handleConfirmOrder} 
          disabled={isSubmitting}
          className="min-w-[200px]"
        >
          {isSubmitting ? (
            <>
              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
              –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞...
            </>
          ) : (
            <>
              <CheckCircle className="h-4 w-4 mr-2" />
              –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑
            </>
          )}
        </Button>
      </div>
    </div>
  );
};

export default OrderConfirmationStep;