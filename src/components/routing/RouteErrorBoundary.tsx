
import React, { Component, ErrorInfo, ReactNode } from 'react';
import { Loader2, AlertTriangle, RefreshCw } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Alert, AlertDescription } from '@/components/ui/alert';

interface Props {
  children: ReactNode;
  fallback?: ReactNode;
}

interface State {
  hasError: boolean;
  error: Error | null;
  isChunkError: boolean;
  isRecovering: boolean;
  retryCount: number;
}

export class RouteErrorBoundary extends Component<Props, State> {
  private recoveryTimeout?: number;
  private readonly maxRetries = 3;

  constructor(props: Props) {
    super(props);
    this.state = { 
      hasError: false, 
      error: null,
      isChunkError: false,
      isRecovering: false,
      retryCount: 0
    };
  }

  static getDerivedStateFromError(error: Error): Partial<State> {
    const isChunkError = error.message.includes('loading dynamically imported module') ||
                        error.message.includes('Failed to fetch dynamically imported module') ||
                        error.message.includes('Loading chunk') ||
                        error.message.includes('ChunkLoadError') ||
                        error.name === 'ChunkLoadError';
    
    return { 
      hasError: true, 
      error,
      isChunkError
    };
  }

  componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    console.error('üö® Route error caught:', error, errorInfo);
    
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    console.log('Error details:', {
      message: error.message,
      stack: error.stack,
      componentStack: errorInfo.componentStack,
      pathname: window.location.pathname,
      timestamp: new Date().toISOString()
    });
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è chunk –æ—à–∏–±–æ–∫
    if (this.state.isChunkError && this.state.retryCount < this.maxRetries) {
      this.handleChunkErrorWithDelay();
    }
  }

  handleChunkErrorWithDelay = () => {
    this.setState({ isRecovering: true });
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
    const delay = Math.min(1000 * Math.pow(2, this.state.retryCount), 5000);
    
    this.recoveryTimeout = window.setTimeout(() => {
      this.handleChunkError();
    }, delay);
  };

  handleChunkError = async () => {
    try {
      console.log('üîÑ Attempting chunk error recovery, attempt:', this.state.retryCount + 1);
      
      // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–µ–π
      if ('caches' in window) {
        try {
          const cacheNames = await caches.keys();
          await Promise.all(cacheNames.map(name => caches.delete(name)));
          console.log('‚úÖ Browser caches cleared');
        } catch (cacheError) {
          console.warn('‚ö†Ô∏è Could not clear caches:', cacheError);
        }
      }
      
      // –û—á–∏—Å—Ç–∫–∞ sessionStorage –∏ —á–∞—Å—Ç–∏ localStorage
      sessionStorage.clear();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const authKeys = ['supabase.auth.token', 'sb-auth-token'];
      const authData: Record<string, string | null> = {};
      authKeys.forEach(key => {
        authData[key] = localStorage.getItem(key);
      });
      
      // –û—á–∏—â–∞–µ–º localStorage, –Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º auth –¥–∞–Ω–Ω—ã–µ
      localStorage.clear();
      Object.entries(authData).forEach(([key, value]) => {
        if (value) localStorage.setItem(key, value);
      });
      
      console.log('‚úÖ Storage cleared and auth data restored');
      
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
      window.location.reload();
    } catch (error) {
      console.error('‚ùå Recovery failed:', error);
      // Fallback - –ø—Ä–æ—Å—Ç–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞
      window.location.reload();
    }
  };

  handleRetry = () => {
    if (this.state.isChunkError && this.state.retryCount >= this.maxRetries) {
      // –ï—Å–ª–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –ø–æ–ø—ã—Ç–∫–∏ –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º
      this.handleChunkError();
      return;
    }

    this.setState(prevState => ({ 
      hasError: false, 
      error: null, 
      isChunkError: false,
      isRecovering: false,
      retryCount: prevState.retryCount + 1
    }));
  };

  componentWillUnmount() {
    if (this.recoveryTimeout) {
      clearTimeout(this.recoveryTimeout);
    }
  }

  render() {
    if (this.state.hasError) {
      if (this.props.fallback) {
        return this.props.fallback;
      }

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è chunk –æ—à–∏–±–æ–∫
      if (this.state.isChunkError && this.state.isRecovering) {
        return (
          <div className="flex items-center justify-center min-h-[200px]">
            <div className="text-center space-y-4">
              <Loader2 className="h-8 w-8 animate-spin mx-auto text-primary" />
              <div>
                <p className="text-gray-600">–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–π...</p>
                <p className="text-sm text-gray-500 mt-1">
                  –ü–æ–ø—ã—Ç–∫–∞ {this.state.retryCount + 1} –∏–∑ {this.maxRetries}
                </p>
              </div>
            </div>
          </div>
        );
      }

      // Chunk –æ—à–∏–±–∫–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä—É—á–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
      if (this.state.isChunkError) {
        return (
          <div className="flex items-center justify-center min-h-[200px] p-4">
            <div className="max-w-md w-full space-y-4">
              <Alert variant="destructive">
                <AlertTriangle className="h-4 w-4" />
                <AlertDescription>
                  <div className="space-y-2">
                    <p className="font-medium">–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</p>
                    <p className="text-sm">
                      –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã.
                    </p>
                    {this.state.retryCount >= this.maxRetries && (
                      <p className="text-xs text-gray-600">
                        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é.
                      </p>
                    )}
                  </div>
                </AlertDescription>
              </Alert>
              <Button 
                onClick={this.handleRetry}
                className="w-full"
                disabled={this.state.isRecovering}
              >
                {this.state.isRecovering ? (
                  <>
                    <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...
                  </>
                ) : (
                  <>
                    <RefreshCw className="h-4 w-4 mr-2" />
                    –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                  </>
                )}
              </Button>
            </div>
          </div>
        );
      }

      // –û–±—ã—á–Ω–∞—è –æ—à–∏–±–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞
      return (
        <div className="flex items-center justify-center min-h-[200px] p-4">
          <div className="max-w-md w-full space-y-4">
            <Alert variant="destructive">
              <AlertTriangle className="h-4 w-4" />
              <AlertDescription>
                –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥.
              </AlertDescription>
            </Alert>
            <div className="flex gap-2">
              <Button 
                onClick={this.handleRetry}
                variant="outline"
                className="flex-1"
              >
                <RefreshCw className="h-4 w-4 mr-2" />
                –ü–æ–≤—Ç–æ—Ä–∏—Ç—å
              </Button>
              <Button 
                onClick={() => window.history.back()}
                className="flex-1"
              >
                –ù–∞–∑–∞–¥
              </Button>
            </div>
          </div>
        </div>
      );
    }

    return this.props.children;
  }
}
