import React, { useEffect, useRef } from "react";
import { useUploadUIAdapter } from "./useUploadUIAdapter";

type Props = {
  max?: number;
  onChange?: (okItems: any[]) => void;
  onComplete?: (okItems: any[]) => void;
  buttonText?: string;
};

export default function SimplePhotoUploader({
  max = 20,
  onChange,
  onComplete,
  buttonText = "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ",
}: Props) {
  const { items, uploadFiles, removeItem, retryItem } = useUploadUIAdapter({ max, onChange, onComplete });
  const fileInputRef = useRef<HTMLInputElement>(null);

  // –¥–µ—Ä–≥–∞–µ–º onChange/onComplete —Ç–æ–ª—å–∫–æ –ø–æ —É—Å–ø–µ—à–Ω—ã–º
  useEffect(() => {
    const ok = items.filter((i: any) => i.status === "completed" && i.cloudinaryUrl);
    const okUrls = ok.map((i: any) => i.cloudinaryUrl).filter(Boolean);
    
    if (okUrls.length > 0) {
      onChange?.(okUrls);
    }
    
    // –í—ã–∑—ã–≤–∞–µ–º onComplete —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –≤—Å–µ —Ñ–∞–π–ª—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã (—É—Å–ø–µ—à–Ω–æ –∏–ª–∏ —Å –æ—à–∏–±–∫–æ–π)
    if (items.length > 0 && items.every((i: any) => i.status === "completed" || i.status === "error")) {
      onComplete?.(okUrls);
    }
  }, [items, onChange, onComplete]);

  const onPick = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(e.target.files || []);
    console.log('üì∏ SimplePhotoUploader: Files selected', { 
      fileCount: files.length,
      files: files.map(f => ({ name: f.name, type: f.type, size: f.size }))
    });
    
    // Check for HEIC files specifically
    const heicFiles = files.filter(file => 
      file.type.toLowerCase().includes('heic') || 
      file.type.toLowerCase().includes('heif') || 
      file.name.toLowerCase().endsWith('.heic') ||
      file.name.toLowerCase().endsWith('.heif')
    );
    
    if (heicFiles.length > 0) {
      console.log('üì∏ SimplePhotoUploader: HEIC files detected', { 
        count: heicFiles.length,
        files: heicFiles.map(f => ({ name: f.name, type: f.type, size: f.size }))
      });
    }
    
    if (files.length) uploadFiles?.(files);
    // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º value, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –≤—ã–±—Ä–∞—Ç—å —Ç–µ –∂–µ —Ñ–∞–π–ª—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ
    e.currentTarget.value = "";
  };

  const handleAddMore = () => fileInputRef.current?.click();

  return (
    <div className="space-y-3">
      {/* 1) –¢–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ ‚Äî –Ω–∏–∫–∞–∫–∏—Ö drag&drop */}
      <div className="w-full">
        <button
          type="button"
          onClick={handleAddMore}
          className="w-full sm:w-auto h-12 px-4 rounded-xl border border-border hover:bg-accent/50 active:scale-[.99]
                     transition text-sm sm:text-base bg-background text-foreground"
        >
          {buttonText}
        </button>
        <input
          ref={fileInputRef}
          type="file"
          accept="image/*"
          multiple
          // –º–æ–±–∏–ª—å–Ω–∞—è –∫–∞–º–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
          capture="environment"
          className="hidden"
          onChange={onPick}
        />
      </div>

      {/* 2) –°–µ—Ç–∫–∞ –ø—Ä–µ–≤—å—é: –º–æ–±–∏–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è */}
      <div
        className="
          grid gap-2
          grid-cols-2
          sm:grid-cols-3
          lg:grid-cols-4
        "
        aria-live="polite"
      >
        {items.map((it: any) => (
          <figure
            key={it.id}
            className="relative rounded-xl border border-border bg-card overflow-hidden"
          >
            {/* –ú–∏–Ω–∏-–ø—Ä–µ–≤—å—é: thumbUrl –∏–ª–∏ –æ–±—ã—á–Ω—ã–π src; –Ω–µ —Ä–µ–∂–µ–º ‚Äî object-contain */}
            {it.cloudinaryUrl || it.thumbUrl ? (
              <img
                src={it.cloudinaryUrl || it.thumbUrl}
                alt=""
                loading="lazy"
                className="w-full aspect-square object-contain bg-muted"
              />
            ) : (
              <div className="w-full aspect-square grid place-items-center text-xs text-muted-foreground bg-muted">
                {it.originalFile?.name || "–ó–∞–≥—Ä—É–∑–∫–∞..."}
              </div>
            )}

            {/* –ü—Ä–æ–≥—Ä–µ—Å—Å / —Å—Ç–∞—Ç—É—Å-–æ–≤–µ—Ä–ª–µ–π (–±–æ–ª—å—à–∏–µ –ø–∞–ª—å—Ü—ã, –º–æ–±–∞–π–ª) */}
            {it.status !== "completed" && !it.cloudinaryUrl && (
              <figcaption
                className="absolute inset-0 bg-black/40 text-white text-[11px] sm:text-xs
                           grid place-items-center p-2"
              >
                {it.status === "uploading" ? `${Math.round(it.progress || 0)}%` : statusLabel(it.status)}
              </figcaption>
            )}

            {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: —É–¥–∞–ª–∏—Ç—å / –ø–æ–≤—Ç–æ—Ä–∏—Ç—å */}
            <div className="absolute top-1 right-1 flex gap-1">
              {it.status === "error" && (
                <button
                  type="button"
                  onClick={() => retryItem?.(it.id)}
                  className="px-2 py-1 rounded-md text-[11px] sm:text-xs bg-white/90 hover:bg-white transition-colors"
                >
                  –ü–æ–≤—Ç–æ—Ä–∏—Ç—å
                </button>
              )}
              <button
                type="button"
                onClick={() => removeItem?.(it.id)}
                className="px-2 py-1 rounded-md text-[11px] sm:text-xs bg-white/90 hover:bg-white transition-colors"
                aria-label="–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ"
              >
                –£–¥–∞–ª–∏—Ç—å
              </button>
            </div>
          </figure>
        ))}
      </div>

      {/* 3) –ö–Ω–æ–ø–∫–∞ ¬´–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë¬ª (–≤–∏–¥–Ω–∞ –≤—Å–µ–≥–¥–∞) */}
      <div className="pt-1">
        <button
          type="button"
          onClick={handleAddMore}
          className="w-full sm:w-auto h-11 px-4 rounded-xl border border-border hover:bg-accent/50 text-sm bg-background text-foreground transition-colors"
        >
          –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë
        </button>
      </div>
    </div>
  );
}

function statusLabel(s: string) {
  switch (s) {
    case "pending": return "–û–∂–∏–¥–∞–Ω–∏–µ‚Ä¶";
    case "compressing": return "–ö–æ–º–ø—Ä–µ—Å—Å–∏—è‚Ä¶";
    case "signing": return "–ü–æ–¥–ø–∏—Å—å‚Ä¶";
    case "uploading": return "–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶";
    default: return "–û–±—Ä–∞–±–æ—Ç–∫–∞‚Ä¶";
  }
}