
import React, { useMemo } from 'react';
import { Navigate, useLocation } from 'react-router-dom';
import { useAuth } from '@/contexts/AuthContext';
import { Loader2, AlertTriangle, RefreshCw } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { devLog } from '@/utils/logger';

interface AdminRouteProps {
  children: React.ReactNode;
  fallback?: React.ReactNode;
}

export const AdminRoute: React.FC<AdminRouteProps> = ({ 
  children, 
  fallback 
}) => {
  const { user, profile, isLoading, isAdmin, refreshAdminStatus, isProfileLoading } = useAuth();
  const location = useLocation();

  // –¢–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤ (8 —Å–µ–∫—É–Ω–¥)
  const [adminCheckTimeout, setAdminCheckTimeout] = React.useState(false);
  
  React.useEffect(() => {
    let timer: NodeJS.Timeout;
    if (isAdmin === null && !!user && !!profile) {
      timer = setTimeout(() => {
        setAdminCheckTimeout(true);
      }, 8000);
    } else {
      setAdminCheckTimeout(false);
    }
    return () => clearTimeout(timer);
  }, [isAdmin, user, profile]);

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏—à–Ω–∏—Ö —Ä–µ-—Ä–µ–Ω–¥–µ—Ä–æ–≤
  const authState = useMemo(() => ({
    hasUser: !!user,
    hasProfile: !!profile,
    isLoading,
    isAdmin,
    isProfileLoading,
    userType: profile?.user_type,
    userId: user?.id,
    userEmail: user?.email,
    adminCheckTimeout
  }), [user, profile, isLoading, isAdmin, isProfileLoading, adminCheckTimeout]);

  devLog('üîç AdminRoute state:', authState);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  if (authState.isLoading) {
    return fallback || (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <Loader2 className="h-8 w-8 animate-spin mx-auto mb-4" />
          <p className="text-gray-600">–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞...</p>
          {authState.userEmail && (
            <p className="text-xs text-gray-500 mt-2">
              –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {authState.userEmail}
            </p>
          )}
        </div>
      </div>
    );
  }

  // –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ª–æ–≥–∏–Ω —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø—É—Ç–∏
  if (!authState.hasUser) {
    devLog('‚ùå User not authenticated, redirecting to login');
    const redirectPath = location.pathname !== '/login' ? `?from=${encodeURIComponent(location.pathname)}` : '';
    return <Navigate to={`/login${redirectPath}`} replace />;
  }

  // –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
  if (authState.isProfileLoading) {
    return fallback || (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <Loader2 className="h-8 w-8 animate-spin mx-auto mb-4" />
          <p className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è...</p>
          {authState.userEmail && (
            <p className="text-xs text-gray-500 mt-2">
              –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {authState.userEmail}
            </p>
          )}
        </div>
      </div>
    );
  }

  // –ù–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
  if (!authState.hasProfile) {
    devLog('‚ùå Profile not found for user:', authState.userId);
    return (
      <div className="min-h-screen flex items-center justify-center p-4 bg-gray-50">
        <div className="max-w-md w-full space-y-4">
          <Alert variant="destructive">
            <AlertTriangle className="h-4 w-4" />
            <AlertDescription>
              –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
              <br />
              <span className="text-xs text-gray-500 mt-1 block">
                ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {authState.userId}
              </span>
            </AlertDescription>
          </Alert>
          <div className="flex gap-2">
            <Button 
              onClick={() => window.location.reload()}
              variant="outline"
              className="flex-1"
            >
              <RefreshCw className="h-4 w-4 mr-2" />
              –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å
            </Button>
            <Button 
              onClick={() => window.location.href = '/profile'}
              className="flex-1"
            >
              –ü—Ä–æ—Ñ–∏–ª—å
            </Button>
          </div>
        </div>
      </div>
    );
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
  if (authState.isAdmin === false) {
    devLog('‚ùå User does not have admin rights:', authState.userType);
    return (
      <div className="min-h-screen flex items-center justify-center p-4 bg-gray-50">
        <div className="max-w-md w-full space-y-4">
          <Alert variant="destructive">
            <AlertTriangle className="h-4 w-4" />
            <AlertDescription>
              –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
              <br />
              <span className="text-xs text-gray-500 mt-1 block">
                –¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {authState.userType || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                <br />
                Email: {authState.userEmail}
              </span>
            </AlertDescription>
          </Alert>
          <div className="flex gap-2">
            <Button 
              onClick={() => refreshAdminStatus()}
              variant="outline"
              className="flex-1"
            >
              <RefreshCw className="h-4 w-4 mr-2" />
              –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞
            </Button>
            <Button 
              onClick={() => window.location.href = '/profile'}
              className="flex-1"
            >
              –í –ø—Ä–æ—Ñ–∏–ª—å
            </Button>
          </div>
        </div>
      </div>
    );
  }

  // isAdmin === null - –∂–¥–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
  if (authState.isAdmin === null) {
    devLog('‚è≥ Waiting for admin rights check...');
    
    // –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ü–∏—é –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if (authState.adminCheckTimeout) {
      return (
        <div className="flex items-center justify-center min-h-screen">
          <div className="max-w-md w-full space-y-4 text-center">
            <Alert>
              <AlertTriangle className="h-4 w-4" />
              <AlertDescription>
                –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∑–∞–Ω—è–ª–∞ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏, —á–µ–º –æ–∂–∏–¥–∞–ª–æ—Å—å.
              </AlertDescription>
            </Alert>
            <div className="flex gap-2">
              <Button 
                onClick={() => {
                  setAdminCheckTimeout(false);
                  refreshAdminStatus();
                }}
                variant="outline"
                className="flex-1"
              >
                <RefreshCw className="h-4 w-4 mr-2" />
                –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
              </Button>
              <Button 
                onClick={() => window.location.href = '/profile'}
                className="flex-1"
              >
                –í –ø—Ä–æ—Ñ–∏–ª—å
              </Button>
            </div>
          </div>
        </div>
      );
    }
    
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <Loader2 className="h-8 w-8 animate-spin mx-auto mb-4" />
          <p className="text-gray-600">–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞...</p>
          <p className="text-xs text-gray-500 mt-2">
            –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {profile?.email}
            <br />
            –¢–∏–ø: {authState.userType}
          </p>
          {adminCheckTimeout && (
            <Button 
              onClick={() => refreshAdminStatus()}
              variant="ghost"
              size="sm"
              className="mt-4"
            >
              –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å
            </Button>
          )}
        </div>
      </div>
    );
  }

  // isAdmin === true - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
  devLog('‚úÖ Admin access granted');
  return <>{children}</>;
};
