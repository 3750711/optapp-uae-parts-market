
import React from 'react';
import { Navigate, useLocation } from 'react-router-dom';
import { useAuth } from '@/contexts/SimpleAuthContext';
import { useProfile } from '@/contexts/ProfileProvider';
import { Loader2, AlertTriangle, RefreshCw } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Alert, AlertDescription } from '@/components/ui/alert';

interface AdminRouteProps {
  children: React.ReactNode;
  fallback?: React.ReactNode;
}

export const AdminRoute: React.FC<AdminRouteProps> = ({ 
  children, 
  fallback 
}) => {
  const { user, isLoading: authLoading } = useAuth();
  const { profile, isLoading: profileLoading, refetch } = useProfile();
  const location = useLocation();

  const isLoading = authLoading || profileLoading;
  const isAdmin = profile?.user_type === 'admin';

  console.log('üîç AdminRoute state:', { 
    hasUser: !!user, 
    hasProfile: !!profile, 
    isLoading, 
    isAdmin,
    userType: profile?.user_type,
    userId: user?.id,
    userEmail: user?.email 
  });

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  if (isLoading) {
    return fallback || (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <Loader2 className="h-8 w-8 animate-spin mx-auto mb-4" />
          <p className="text-gray-600">–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞...</p>
          {user?.email && (
            <p className="text-xs text-gray-500 mt-2">
              –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.email}
            </p>
          )}
        </div>
      </div>
    );
  }

  // –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ª–æ–≥–∏–Ω
  if (!user) {
    console.log('‚ùå User not authenticated, redirecting to login');
    const redirectPath = location.pathname !== '/login' ? `?from=${encodeURIComponent(location.pathname)}` : '';
    return <Navigate to={`/login${redirectPath}`} replace />;
  }

  // –ù–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
  if (!profile) {
    console.log('‚ùå Profile not found for user:', user?.id);
    return (
      <div className="min-h-screen flex items-center justify-center p-4 bg-gray-50">
        <div className="max-w-md w-full space-y-4">
          <Alert variant="destructive">
            <AlertTriangle className="h-4 w-4" />
            <AlertDescription>
              –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
              <br />
              <span className="text-xs text-gray-500 mt-1 block">
                ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user?.id}
              </span>
            </AlertDescription>
          </Alert>
          <div className="flex gap-2">
            <Button 
              onClick={() => refetch()}
              variant="outline"
              className="flex-1"
            >
              <RefreshCw className="h-4 w-4 mr-2" />
              –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å
            </Button>
            <Button 
              onClick={() => window.location.href = '/profile'}
              className="flex-1"
            >
              –ü—Ä–æ—Ñ–∏–ª—å
            </Button>
          </div>
        </div>
      </div>
    );
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
  if (!isAdmin) {
    console.log('‚ùå User does not have admin rights:', profile?.user_type);
    return (
      <div className="min-h-screen flex items-center justify-center p-4 bg-gray-50">
        <div className="max-w-md w-full space-y-4">
          <Alert variant="destructive">
            <AlertTriangle className="h-4 w-4" />
            <AlertDescription>
              –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
              <br />
              <span className="text-xs text-gray-500 mt-1 block">
                –¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {profile?.user_type || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                <br />
                Email: {user?.email}
              </span>
            </AlertDescription>
          </Alert>
          <div className="flex gap-2">
            <Button 
              onClick={() => refetch()}
              variant="outline"
              className="flex-1"
            >
              <RefreshCw className="h-4 w-4 mr-2" />
              –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞
            </Button>
            <Button 
              onClick={() => window.location.href = '/profile'}
              className="flex-1"
            >
              –í –ø—Ä–æ—Ñ–∏–ª—å
            </Button>
          </div>
        </div>
      </div>
    );
  }

  // –ê–¥–º–∏–Ω –¥–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
  console.log('‚úÖ Admin access granted');
  return <>{children}</>;
};
