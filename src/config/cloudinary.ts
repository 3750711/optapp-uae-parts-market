// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Cloudinary –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤
export const CLOUDINARY_CONFIG = {
  cloudName: 'dcuziurrb',
  
  // Upload presets –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–≥—Ä—É–∑–æ–∫
  uploadPresets: {
    product: 'ml_default', // –û—Å–Ω–æ–≤–Ω–æ–π preset –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å unsigned)
    productUnsigned: 'product_images_unsigned', // Unsigned preset –¥–ª—è –ø—Ä—è–º—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
    productOptimized: 'product_optimized', // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π preset (–µ—Å–ª–∏ —Å–æ–∑–¥–∞–Ω)
    thumbnail: 'thumbnail_preset' // –î–ª—è –ø—Ä–µ–≤—å—é (–µ—Å–ª–∏ —Å–æ–∑–¥–∞–Ω)
  },
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
  upload: {
    folder: 'product-images',
    maxFileSize: 10000000, // 10MB
    allowedFormats: ['jpg', 'jpeg', 'png', 'webp', 'gif'] as const,
    maxFiles: 10,
    autoOptimize: true,
    quality: 'auto:good'
  },

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
  transformations: {
    // –ü—Ä–µ–≤—å—é –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    thumbnail: {
      width: 200,
      height: 200,
      crop: 'fill',
      format: 'auto',
      quality: 'auto:good',
      dpr: 'auto'
    },
    
    // –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    medium: {
      width: 500,
      height: 500,
      crop: 'limit',
      format: 'auto',
      quality: 'auto:good',
      dpr: 'auto'
    },
    
    // –ë–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    large: {
      width: 1200,
      height: 1200,
      crop: 'limit',
      format: 'auto',
      quality: 'auto:good',
      dpr: 'auto'
    },
    
    // –°–≤–µ—Ä—Ö–º–∞–ª—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è lazy loading
    placeholder: {
      width: 50,
      height: 50,
      crop: 'fill',
      format: 'auto',
      quality: 'auto:low',
      blur: 1000,
      dpr: 'auto'
    },

    // Responsive —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
    responsive: {
      mobile: {
        width: 320,
        crop: 'limit',
        format: 'auto',
        quality: 'auto:good',
        dpr: 'auto'
      },
      tablet: {
        width: 768,
        crop: 'limit',
        format: 'auto',
        quality: 'auto:good',
        dpr: 'auto'
      },
      desktop: {
        width: 1200,
        crop: 'limit',
        format: 'auto',
        quality: 'auto:good',
        dpr: 'auto'
      }
    }
  },

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–∂–µ—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏ - PartsBay Brand
  widget: {
    theme: 'minimal',
    language: 'ru',
    sources: ['local', 'camera', 'url'],
    cropping: false,
    multiple: true,
    clientAllowedFormats: ['jpg', 'jpeg', 'png', 'webp', 'gif'] as const,
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–µ–Ω–¥–∏–Ω–≥–∞
    branding: false,  // –£–±–∏—Ä–∞–µ–º –ª–æ–≥–æ—Ç–∏–ø Cloudinary
    showPoweredBy: false,  // –£–±–∏—Ä–∞–µ–º "Powered by Cloudinary"
    
    // –£–ª—É—á—à–µ–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤
    inline: false,
    defaultSource: 'local',
    maxImageFileSize: 10000000,  // 10MB
    maxVideoFileSize: 100000000, // 100MB
    resourceType: 'auto',
    
    // –ü—Ä–µ–≤—å—é –∏ –∫—Ä–æ–ø–ø–∏–Ω–≥
    showAdvancedOptions: false,
    showSkipCropButton: false,
    showUploadMoreButton: true,
    
    // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    showProgressBar: true,
    queueViewPosition: 'bottom',
    showCompletedButton: true,
    
    // –ú–æ–±–∏–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
    googleApiKey: null,
    searchBySights: false,
    searchByRights: false,
    
    // –°—Ç–∏–ª–∏ –≤–∏–¥–∂–µ—Ç–∞ - PartsBay Brand
    styles: {
      palette: {
        window: '#FFFFFF',
        windowBorder: 'hsl(210 40% 90%)',       // --border –∏–∑ –¥–∏–∑–∞–π–Ω-—Å–∏—Å—Ç–µ–º—ã
        tabIcon: 'hsl(212 50% 18%)',           // --primary (Navy Blue)
        menuIcons: 'hsl(212 50% 18%)',         // --primary (Navy Blue)
        textDark: 'hsl(0 0% 20%)',             // --foreground
        textLight: 'hsl(0 0% 40%)',            // --muted-foreground
        link: 'hsl(199 89% 48%)',              // --accent (Deep Blue)
        action: 'hsl(199 89% 48%)',            // --accent (Deep Blue)
        inactiveTabIcon: 'hsl(0 0% 40%)',      // –ü—Ä–∏–≥–ª—É—à–µ–Ω–Ω—ã–π —Ü–≤–µ—Ç
        error: 'hsl(0 84% 60%)',               // --destructive
        inProgress: 'hsl(199 89% 48%)',        // --accent (Deep Blue)
        complete: 'hsl(142 71% 45%)',          // --success
        sourceBg: 'hsl(210 40% 98%)'           // --background
      },
      fonts: {
        default: null,
        "'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif": {
          url: null,
          active: true
        }
      },
      
      // –£–ª—É—á—à–µ–Ω–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –∏ –ø–µ—Ä–µ—Ö–æ–¥—ã
      frame: {
        background: 'rgba(255, 255, 255, 0.98)',
        border: '1px solid hsl(210 40% 90%)',
        borderRadius: '12px',
        boxShadow: '0 8px 25px -8px hsl(212 50% 18% / 0.15)' // --shadow-elegant
      },
      
      // –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
      button: {
        primary: {
          background: 'hsl(199 89% 48%)',      // --accent
          color: 'white',
          border: 'none',
          borderRadius: '8px',
          fontWeight: '500',
          transition: 'all 0.2s ease'
        },
        secondary: {
          background: 'hsl(210 40% 96%)',      // --secondary
          color: 'hsl(212 50% 18%)',           // --primary
          border: '1px solid hsl(210 40% 90%)',
          borderRadius: '8px',
          fontWeight: '500',
          transition: 'all 0.2s ease'
        }
      }
    },

    // –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏ PartsBay
    text: {
      ru: {
        'local.browse': 'üì∑ –í—ã–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞',
        'local.dd_title_single': '–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ —Å—é–¥–∞',
        'local.dd_title_multi': '–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞ —Å—é–¥–∞',
        'camera.capture': 'üì± –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä',
        'camera.cancel': '–û—Ç–º–µ–Ω–∞',
        'camera.take_pic': '–°–Ω–∏–º–æ–∫',
        'camera.explanation': '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–∞–º–µ—Ä–∞ –≤–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —Å—ä–µ–º–∫–∏ —Ç–æ–≤–∞—Ä–∞',
        'upload_tabs.url': 'üîó –ü–æ —Å—Å—ã–ª–∫–µ',
        'upload_tabs.file': 'üìÅ –° —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞',
        'upload_tabs.camera': 'üì∑ –ö–∞–º–µ—Ä–∞',
        'queue.title': '–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π',
        'queue.title_uploading_with_counter': '–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è {{num}} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π',
        'queue.title_uploading': '–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è',
        'queue.mini_title': '‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ',
        'queue.mini_title_uploading': '‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...',
        'done.title': 'üéâ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!',
        'local.success': '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã',
        'progress.uploading': '–ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—à–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏...',
        'or': '–∏–ª–∏',
        'menu.close': '–ó–∞–∫—Ä—ã—Ç—å',
        'menu.back': '–ù–∞–∑–∞–¥'
      }
    }
  }
} as const;

// –¢–∏–ø—ã –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π
export type TransformationType = keyof typeof CLOUDINARY_CONFIG.transformations;
export type ResponsiveSize = keyof typeof CLOUDINARY_CONFIG.transformations.responsive;

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL —Å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è–º–∏
export const buildCloudinaryUrl = (
  publicId: string, 
  transformation?: TransformationType | string,
  customParams?: Record<string, any>
) => {
  const baseUrl = `https://res.cloudinary.com/${CLOUDINARY_CONFIG.cloudName}/image/upload`;
  
  if (!transformation && !customParams) {
    return `${baseUrl}/${publicId}`;
  }
  
  let transformString = '';
  
  if (transformation && typeof transformation === 'string' && transformation in CLOUDINARY_CONFIG.transformations) {
    const params = CLOUDINARY_CONFIG.transformations[transformation as TransformationType];
    transformString = Object.entries(params)
      .map(([key, value]) => {
        const shortKey = getShortParam(key);
        return `${shortKey}_${value}`;
      })
      .join(',');
  } else if (typeof transformation === 'string') {
    transformString = transformation;
  }
  
  if (customParams) {
    const customString = Object.entries(customParams)
      .map(([key, value]) => {
        const shortKey = getShortParam(key);
        return `${shortKey}_${value}`;
      })
      .join(',');
    
    transformString = transformString ? `${transformString},${customString}` : customString;
  }
  
  return transformString ? `${baseUrl}/${transformString}/${publicId}` : `${baseUrl}/${publicId}`;
};

// –°–æ–∫—Ä–∞—â–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ Cloudinary
const getShortParam = (param: string): string => {
  const paramMap: Record<string, string> = {
    width: 'w',
    height: 'h',
    crop: 'c',
    format: 'f',
    quality: 'q',
    fetchFormat: 'f',
    dpr: 'dpr',
    blur: 'e_blur',
    gravity: 'g',
    radius: 'r',
    opacity: 'o',
    overlay: 'l',
    effect: 'e',
    angle: 'a',
    border: 'bo',
    color: 'co'
  };
  
  return paramMap[param] || param;
};

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è responsive URL
export const buildResponsiveUrl = (
  publicId: string,
  size: ResponsiveSize,
  customParams?: Record<string, any>
) => {
  const responsiveParams = CLOUDINARY_CONFIG.transformations.responsive[size];
  const allParams = { ...responsiveParams, ...customParams };
  
  return buildCloudinaryUrl(publicId, '', allParams);
};

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è placeholder URL –¥–ª—è lazy loading
export const buildPlaceholderUrl = (publicId: string) => {
  return buildCloudinaryUrl(publicId, 'placeholder');
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ URL
export const getOptimizedImageUrl = (
  publicId: string,
  options: {
    width?: number;
    height?: number;
    crop?: 'fill' | 'fit' | 'scale' | 'crop';
    quality?: 'auto:low' | 'auto:good' | 'auto:best' | number;
    format?: 'auto' | 'webp' | 'jpg' | 'png';
  } = {}
) => {
  const defaultOptions = {
    format: 'auto' as const,
    quality: 'auto:good' as const,
    crop: 'fit' as const,
    ...options
  };
  
  return buildCloudinaryUrl(publicId, '', defaultOptions);
};

// –í–∞–ª–∏–¥–∞—Ü–∏—è upload preset
export const validateUploadPreset = (presetName?: string): { isValid: boolean; error?: string } => {
  if (!presetName || presetName.trim() === '') {
    return {
      isValid: false,
      error: 'Upload preset –Ω–µ —É–∫–∞–∑–∞–Ω. –î–ª—è unsigned –∑–∞–≥—Ä—É–∑–∫–∏ preset –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω.'
    };
  }
  
  return { isValid: true };
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ upload preset —Å fallback
export const getUploadPreset = (type: 'product' | 'productUnsigned' | 'productOptimized' | 'thumbnail' = 'productUnsigned'): string => {
  const preset = CLOUDINARY_CONFIG.uploadPresets[type];
  
  if (!preset || preset.trim() === '') {
    console.warn(`Upload preset '${type}' –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback`);
    
    // Fallback –∫ productUnsigned, –µ—Å–ª–∏ –æ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω
    if (type !== 'productUnsigned' && CLOUDINARY_CONFIG.uploadPresets.productUnsigned) {
      return CLOUDINARY_CONFIG.uploadPresets.productUnsigned;
    }
    
    throw new Error(`Upload preset '${type}' –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ fallback –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
  }
  
  return preset;
};