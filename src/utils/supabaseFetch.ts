// Health check –¥–ª—è api.partsbay.ae –ø—Ä–æ–∫—Å–∏
let proxyHealth: 'unknown' | 'healthy' | 'failing' = 'unknown';
let lastHealthCheck = 0;

const checkProxyHealth = async (): Promise<boolean> => {
  const now = Date.now();
  if (now - lastHealthCheck < 30000 && proxyHealth !== 'unknown') {
    return proxyHealth === 'healthy';
  }
  
  try {
    const controller = new AbortController();
    setTimeout(() => controller.abort(), 3000);
    
    const response = await fetch('https://api.partsbay.ae/rest/v1/', {
      method: 'HEAD',
      signal: controller.signal,
      mode: 'cors'
    });
    
    proxyHealth = response.ok ? 'healthy' : 'failing';
    lastHealthCheck = now;
    return proxyHealth === 'healthy';
  } catch {
    proxyHealth = 'failing';
    lastHealthCheck = now;
    return false;
  }
};

export const supabaseFetch = async (url: RequestInfo | URL, options?: RequestInit): Promise<Response> => {
  const urlString = url.toString();
  const isProxyUrl = urlString.includes('api.partsbay.ae');
  
  // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è cross-origin –∑–∞–ø—Ä–æ—Å–æ–≤
  const fetchOptions = {
    ...options,
    // –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º credentials: 'same-origin' –¥–ª—è cross-origin –∑–∞–ø—Ä–æ—Å–æ–≤
    credentials: isProxyUrl ? 'omit' : (options?.credentials || 'same-origin'),
    // –ö–µ—à–∏—Ä—É–µ–º preflight –∑–∞–ø—Ä–æ—Å—ã
    mode: 'cors' as const,
  };

  // –ï—Å–ª–∏ –ø—Ä–æ–∫—Å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å—Ä–∞–∑—É –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
  if (isProxyUrl && proxyHealth === 'failing') {
    const directUrl = urlString.replace('api.partsbay.ae', 'vfiylfljiixqkjfqubyq.supabase.co');
    console.log('üîÑ Proxy known to be failing, using direct Supabase URL:', directUrl);
    return await fetch(directUrl, { ...fetchOptions, credentials: 'omit' });
  }

  try {
    const response = await fetch(url, fetchOptions);
    
    // –ï—Å–ª–∏ –ø—Ä–æ–∫—Å–∏ –æ—Ç–≤–µ—á–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –∑–¥–æ—Ä–æ–≤—ã–π
    if (isProxyUrl && response.status !== 502) {
      proxyHealth = 'healthy';
      lastHealthCheck = Date.now();
    }
    
    // –ü—Ä–∏ 502 –æ—à–∏–±–∫–µ –ø—Ä–æ–∫—Å–∏ - fallback –Ω–∞ –ø—Ä—è–º–æ–π URL
    if (response.status === 502 && isProxyUrl) {
      const directUrl = urlString.replace('api.partsbay.ae', 'vfiylfljiixqkjfqubyq.supabase.co');
      console.log('üîÑ Proxy returned 502, falling back to direct Supabase URL:', directUrl);
      proxyHealth = 'failing';
      return await fetch(directUrl, { ...fetchOptions, credentials: 'omit' });
    }
    
    return response;
  } catch (error) {
    // Network/CORS errors –¥–ª—è –ø—Ä–æ–∫—Å–∏ - fallback –Ω–∞ –ø—Ä—è–º–æ–π URL
    if (isProxyUrl) {
      const directUrl = urlString.replace('api.partsbay.ae', 'vfiylfljiixqkjfqubyq.supabase.co');
      console.log('üîÑ Proxy network/CORS error, falling back to direct Supabase URL:', directUrl);
      proxyHealth = 'failing';
      
      try {
        return await fetch(directUrl, { ...fetchOptions, credentials: 'omit' });
      } catch (fallbackError) {
        console.error('‚ùå Both proxy and direct URLs failed:', { original: error, fallback: fallbackError });
        throw fallbackError;
      }
    }
    throw error;
  }
};