import { supabase } from '@/integrations/supabase/client';
import { devLog, devError } from '@/utils/logger';

interface LogoutOptions {
  useNuclearOption?: boolean;
  skipServerInvalidation?: boolean;
}

/**
 * –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
 */
export const aggressiveLogout = async (options: LogoutOptions = {}) => {
  const { useNuclearOption = false, skipServerInvalidation = false } = options;
  
  try {
    devLog('üöÄ Starting aggressive logout process...');
    
    // 1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–ª–∞–≥ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞
    setLogoutFlag();
    
    // 2. –°–µ—Ä–≤–µ—Ä–Ω–∞—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤ (–µ—Å–ª–∏ –Ω–µ –ø—Ä–æ–ø—É—â–µ–Ω–∞)
    if (!skipServerInvalidation) {
      await serverTokenInvalidation();
    }
    
    // 3. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ Supabase –ø—Ä–æ—Ü–µ—Å—Å—ã
    await stopSupabaseProcesses();
    
    // 4. –û—á–∏—Å—Ç–∫–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    await clearClientStorage();
    
    // 5. –û—á–∏—Å—Ç–∫–∞ IndexedDB –∏ WebSQL
    await clearDatabaseStorage();
    
    // 6. –û—á–∏—Å—Ç–∫–∞ cookies
    clearAllCookies();
    
    // 7. Nuclear option –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    if (useNuclearOption) {
      await nuclearCleanup();
    }
    
    devLog('‚úÖ Aggressive logout completed successfully');
    
    // 8. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞
    setTimeout(() => {
      window.location.reload();
    }, 100);
    
  } catch (error) {
    devError('üí• Error during aggressive logout:', error);
    
    // Fallback - nuclear option
    await nuclearCleanup();
    
    setTimeout(() => {
      window.location.reload();
    }, 100);
  }
};

/**
 * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–ª–∞–≥ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞ - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
 */
const setLogoutFlag = () => {
  try {
    const logoutData = {
      timestamp: Date.now(),
      forced: true,
      version: '2.0',
      reason: 'aggressive_logout'
    };
    
    localStorage.setItem('logout_forced', JSON.stringify(logoutData));
    sessionStorage.setItem('logout_forced', JSON.stringify(logoutData));
    devLog('üè¥ Logout flag set with 30-second duration');
  } catch (error) {
    devLog('‚ö†Ô∏è Failed to set logout flag:', error);
  }
};

/**
 * –°–µ—Ä–≤–µ—Ä–Ω–∞—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤
 */
const serverTokenInvalidation = async () => {
  try {
    devLog('üîí Starting server token invalidation...');
    
    // –í—ã–∑—ã–≤–∞–µ–º RPC —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    const { error } = await supabase.rpc('force_user_logout');
    
    if (error) {
      devLog('‚ö†Ô∏è Server token invalidation failed:', error.message);
    } else {
      devLog('‚úÖ Server tokens invalidated successfully');
    }
  } catch (error) {
    devLog('‚ö†Ô∏è Server token invalidation error:', error);
  }
};

/**
 * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ Supabase –ø—Ä–æ—Ü–µ—Å—Å—ã
 */
const stopSupabaseProcesses = async () => {
  try {
    devLog('‚èπÔ∏è Stopping Supabase processes...');
    
    // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
    if (typeof (supabase.auth as any).stopAutoRefreshToken === 'function') {
      (supabase.auth as any).stopAutoRefreshToken();
      devLog('‚úÖ Auto refresh token stopped');
    }
    
    // –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤—Å–µ—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π
    try {
      const { data } = supabase.auth.onAuthStateChange(() => {});
      if (data?.subscription) {
        data.subscription.unsubscribe();
      }
    } catch (error) {
      devLog('‚ö†Ô∏è Failed to unsubscribe from auth listeners:', error);
    }
    
    devLog('‚úÖ Supabase processes stopped');
  } catch (error) {
    devLog('‚ö†Ô∏è Failed to stop Supabase processes:', error);
  }
};

/**
 * –û—á–∏—Å—Ç–∫–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
 */
const clearClientStorage = async () => {
  try {
    devLog('üßπ Clearing client storage...');
    
    // –û—á–∏—Å—Ç–∫–∞ localStorage
    const localKeysToRemove = [];
    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i);
      if (key && isSupabaseRelatedKey(key)) {
        localKeysToRemove.push(key);
      }
    }
    
    localKeysToRemove.forEach(key => {
      try {
        localStorage.removeItem(key);
        devLog(`üóëÔ∏è Removed localStorage key: ${key}`);
      } catch (error) {
        devLog(`‚ö†Ô∏è Failed to remove localStorage key ${key}:`, error);
      }
    });
    
    // –û—á–∏—Å—Ç–∫–∞ sessionStorage
    const sessionKeysToRemove = [];
    for (let i = 0; i < sessionStorage.length; i++) {
      const key = sessionStorage.key(i);
      if (key && isSupabaseRelatedKey(key)) {
        sessionKeysToRemove.push(key);
      }
    }
    
    sessionKeysToRemove.forEach(key => {
      try {
        sessionStorage.removeItem(key);
        devLog(`üóëÔ∏è Removed sessionStorage key: ${key}`);
      } catch (error) {
        devLog(`‚ö†Ô∏è Failed to remove sessionStorage key ${key}:`, error);
      }
    });
    
    devLog('‚úÖ Client storage cleared');
  } catch (error) {
    devLog('‚ö†Ô∏è Failed to clear client storage:', error);
  }
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–ª—é—á —Å–≤—è–∑–∞–Ω–Ω—ã–º —Å Supabase
 */
const isSupabaseRelatedKey = (key: string): boolean => {
  const supabasePatterns = [
    'sb-',
    'supabase',
    'auth-token',
    'vfiylfljiixqkjfqubyq',
    'auth.token',
    'supabase.auth',
    'refresh_token',
    'access_token'
  ];
  
  return supabasePatterns.some(pattern => 
    key.toLowerCase().includes(pattern.toLowerCase())
  );
};

/**
 * –û—á–∏—Å—Ç–∫–∞ IndexedDB –∏ WebSQL
 */
const clearDatabaseStorage = async () => {
  try {
    devLog('üóÑÔ∏è Clearing database storage...');
    
    // –û—á–∏—Å—Ç–∫–∞ IndexedDB
    if ('indexedDB' in window) {
      try {
        const databases = await indexedDB.databases();
        for (const db of databases) {
          if (db.name && (
            db.name.includes('supabase') || 
            db.name.includes('vfiylfljiixqkjfqubyq')
          )) {
            indexedDB.deleteDatabase(db.name);
            devLog(`üóëÔ∏è Deleted IndexedDB: ${db.name}`);
          }
        }
      } catch (error) {
        devLog('‚ö†Ô∏è Failed to clear IndexedDB:', error);
      }
    }
    
    // –û—á–∏—Å—Ç–∫–∞ WebSQL (—É—Å—Ç–∞—Ä–µ–≤—à–µ–µ, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    if ('openDatabase' in window) {
      try {
        // WebSQL is deprecated, but we'll try to clear it anyway
        devLog('üì¶ Attempting WebSQL cleanup...');
      } catch (error) {
        devLog('‚ö†Ô∏è WebSQL cleanup not available:', error);
      }
    }
    
    devLog('‚úÖ Database storage cleared');
  } catch (error) {
    devLog('‚ö†Ô∏è Failed to clear database storage:', error);
  }
};

/**
 * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö cookies
 */
const clearAllCookies = () => {
  try {
    devLog('üç™ Clearing cookies...');
    
    const cookies = document.cookie.split(';');
    
    cookies.forEach(cookie => {
      const eqPos = cookie.indexOf('=');
      const name = eqPos > -1 ? cookie.substr(0, eqPos).trim() : cookie.trim();
      
      if (isSupabaseRelatedKey(name)) {
        // –£–¥–∞–ª—è–µ–º cookie –¥–ª—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—É—Ç–µ–π –∏ –¥–æ–º–µ–Ω–æ–≤
        const domains = [
          window.location.hostname,
          `.${window.location.hostname}`,
          'localhost',
          '.localhost'
        ];
        
        const paths = ['/', '/auth', '/login', '/register'];
        
        domains.forEach(domain => {
          paths.forEach(path => {
            document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=${path}; domain=${domain};`;
            document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=${path};`;
          });
        });
        
        devLog(`üóëÔ∏è Cleared cookie: ${name}`);
      }
    });
    
    devLog('‚úÖ Cookies cleared');
  } catch (error) {
    devLog('‚ö†Ô∏è Failed to clear cookies:', error);
  }
};

/**
 * Nuclear cleanup - –ø–æ—Å–ª–µ–¥–Ω—è—è –º–µ—Ä–∞
 */
const nuclearCleanup = async () => {
  try {
    devLog('‚ò¢Ô∏è Initiating nuclear cleanup...');
    
    // –û—á–∏—Å—Ç–∏—Ç—å –í–°–ï localStorage –∏ sessionStorage
    try {
      localStorage.clear();
      sessionStorage.clear();
      devLog('üí• All storage cleared');
    } catch (error) {
      devLog('‚ö†Ô∏è Failed to clear all storage:', error);
    }
    
    // –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ cookies –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    const cookies = document.cookie.split(';');
    cookies.forEach(cookie => {
      const eqPos = cookie.indexOf('=');
      const name = eqPos > -1 ? cookie.substr(0, eqPos).trim() : cookie.trim();
      
      document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;
      document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/; domain=${window.location.hostname};`;
    });
    
    devLog('‚ò¢Ô∏è Nuclear cleanup completed');
  } catch (error) {
    devLog('üí• Nuclear cleanup failed:', error);
  }
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–ª–∞–≥ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞ - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
 */
export const checkLogoutFlag = (): boolean => {
  try {
    const localFlag = localStorage.getItem('logout_forced');
    const sessionFlag = sessionStorage.getItem('logout_forced');
    
    if (!localFlag && !sessionFlag) {
      devLog('üü¢ No logout flag found - allowing session');
      return false;
    }
    
    const flagData = JSON.parse(localFlag || sessionFlag || '{}');
    const timeDiff = Date.now() - (flagData.timestamp || 0);
    const flagAge = Math.floor(timeDiff / 1000); // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    devLog(`üîç Logout flag check: age=${flagAge}s, forced=${flagData.forced}, reason=${flagData.reason}`);
    
    // üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –§–ª–∞–≥ –¥–µ–π—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ 30 —Å–µ–∫—É–Ω–¥ (—Å–æ–∫—Ä–∞—â–µ–Ω–æ —Å 2 –º–∏–Ω—É—Ç)
    if (timeDiff < 30 * 1000) {
      devLog(`üö´ Logout flag active (${flagAge}s old) - blocking auto-login`);
      return true;
    } else {
      // –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ñ–ª–∞–≥
      devLog(`üßπ Logout flag expired (${flagAge}s old) - clearing and allowing session`);
      clearLogoutFlag();
      return false;
    }
  } catch (error) {
    devLog('‚ö†Ô∏è Failed to check logout flag:', error);
    // –ü—Ä–∏ –æ—à–∏–±–∫–µ –æ—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ –∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    clearLogoutFlag();
    return false;
  }
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–ª–∞–≥ —Å —Ä–∞–∑–ª–∏—á–µ–Ω–∏–µ–º —Ç–∏–ø–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π - –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø
 */
export const checkLogoutFlagForNewLogin = (): boolean => {
  try {
    const flagStatus = getLogoutFlagStatus();
    
    if (!flagStatus.exists) {
      devLog('üü¢ No logout flag - allowing new login');
      return false;
    }
    
    // –î–ª—è –Ω–æ–≤—ã—Ö –≤—Ö–æ–¥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–∏–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (10 —Å–µ–∫—É–Ω–¥)
    if (flagStatus.age < 10) {
      devLog(`üö´ Recent logout detected (${flagStatus.age}s ago) - briefly blocking new login`);
      return true;
    }
    
    devLog(`üü¢ Logout flag expired (${flagStatus.age}s ago) - allowing new login`);
    clearLogoutFlag();
    return false;
  } catch (error) {
    devLog('‚ö†Ô∏è Error checking logout flag for new login:', error);
    clearLogoutFlag();
    return false;
  }
};

/**
 * –û—á–∏—Å—Ç–∏—Ç—å —Ñ–ª–∞–≥ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞ - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
 */
export const clearLogoutFlag = () => {
  try {
    const hadLocalFlag = !!localStorage.getItem('logout_forced');
    const hadSessionFlag = !!sessionStorage.getItem('logout_forced');
    
    localStorage.removeItem('logout_forced');
    sessionStorage.removeItem('logout_forced');
    
    if (hadLocalFlag || hadSessionFlag) {
      devLog('üßπ Logout flag cleared successfully');
    }
  } catch (error) {
    devLog('‚ö†Ô∏è Failed to clear logout flag:', error);
  }
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ñ–ª–∞–≥–∞ –¥–ª—è debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
 */
export const getLogoutFlagStatus = () => {
  try {
    const localFlag = localStorage.getItem('logout_forced');
    const sessionFlag = sessionStorage.getItem('logout_forced');
    
    if (!localFlag && !sessionFlag) {
      return { exists: false, age: 0, source: null };
    }
    
    const flagData = JSON.parse(localFlag || sessionFlag || '{}');
    const timeDiff = Date.now() - (flagData.timestamp || 0);
    const ageSeconds = Math.floor(timeDiff / 1000);
    
    return {
      exists: true,
      age: ageSeconds,
      source: localFlag ? 'localStorage' : 'sessionStorage',
      forced: flagData.forced,
      version: flagData.version,
      reason: flagData.reason,
      isExpired: ageSeconds > 30
    };
  } catch (error) {
    return { exists: false, age: 0, source: null, error: error.message };
  }
};
