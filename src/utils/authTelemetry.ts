interface AuthTelemetryEvent {
  event: string;
  timestamp: number;
  userId?: string;
  sessionId?: string;
  [key: string]: any;
}

class AuthTelemetry {
  private events: AuthTelemetryEvent[] = [];
  private sessionId: string;
  
  constructor() {
    this.sessionId = this.generateSessionId();
    this.setupPerformanceMonitoring();
  }
  
  private generateSessionId(): string {
    return `auth_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }
  
  private setupPerformanceMonitoring() {
    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ profile_fetch —Å–æ–±—ã—Ç–∏–π
    this.trackMetric('profile_fetch_rate', () => {
      const last2Min = Date.now() - (2 * 60 * 1000);
      const recentFetches = this.events.filter(e => 
        e.event === 'profile_fetch' && 
        e.source === 'network' && 
        e.timestamp > last2Min
      );
      return recentFetches.length;
    });
    
    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ TOKEN_REFRESHED —á–∞—Å—Ç–æ—Ç—ã
    this.trackMetric('token_refresh_rate', () => {
      const last1Min = Date.now() - (60 * 1000);
      const recentRefreshes = this.events.filter(e => 
        e.event === 'token_refresh' && 
        e.timestamp > last1Min
      );
      return recentRefreshes.length;
    });
  }
  
  log(event: string, data: Record<string, any> = {}) {
    const eventData: AuthTelemetryEvent = {
      event,
      timestamp: Date.now(),
      sessionId: this.sessionId,
      ...data
    };
    
    this.events.push(eventData);
    
    // –õ–∏–º–∏—Ç —Å–æ–±—ã—Ç–∏–π –≤ –ø–∞–º—è—Ç–∏
    if (this.events.length > 100) {
      this.events = this.events.slice(-50);
    }
    
    // Dev —Ä–µ–∂–∏–º - –≤ –∫–æ–Ω—Å–æ–ª—å
    if (process.env.NODE_ENV === 'development') {
      console.log(`üìä Auth Telemetry [${event}]:`, eventData);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–µ—Ä—Ç—ã
    this.checkAlerts(eventData);
    
    // Production - –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ Sentry/–¥—Ä—É–≥—É—é —Å–∏—Å—Ç–µ–º—É
    this.sendToExternalService(eventData);
  }
  
  private checkAlerts(event: AuthTelemetryEvent) {
    switch (event.event) {
      case 'profile_fetch':
        if (event.source === 'network') {
          const profileFetchRate = this.getMetric('profile_fetch_rate');
          if (profileFetchRate > 1) {
            this.alert('profile_fetch_burst', {
              rate: profileFetchRate,
              threshold: 1,
              message: '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–≥—Ä—É–∑–æ–∫ –ø—Ä–æ—Ñ–∏–ª—è (>1 –∑–∞ 2 –º–∏–Ω—É—Ç—ã)'
            });
          }
        }
        break;
        
      case 'token_refresh':
        const refreshRate = this.getMetric('token_refresh_rate');
        if (refreshRate > 3) {
          this.alert('refresh_cycle_detected', {
            rate: refreshRate,
            threshold: 3,
            message: '–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ (>3 –∑–∞ –º–∏–Ω—É—Ç—É)'
          });
        }
        break;
        
      case 'admin_verify_call':
        // –°—á–∏—Ç–∞–µ–º verify_call –±–µ–∑ –º—É—Ç–∞—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–µ–∫
        const last10Sec = Date.now() - (10 * 1000);
        const recentVerifies = this.events.filter(e => 
          e.event === 'admin_verify_call' && 
          e.timestamp > last10Sec &&
          e.method !== 'POST' && e.method !== 'PUT' && e.method !== 'DELETE'
        );
        
        if (recentVerifies.length > 3) {
          this.alert('admin_verify_spam', {
            count: recentVerifies.length,
            threshold: 3,
            message: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ –∞–¥–º–∏–Ω –¥–æ—Å—Ç—É–ø–∞ (>3 –∑–∞ 10 —Å–µ–∫)'
          });
        }
        break;
    }
  }
  
  private alert(alertType: string, data: Record<string, any>) {
    const alertEvent = {
      event: 'alert',
      alertType,
      ...data,
      timestamp: Date.now(),
      sessionId: this.sessionId
    };
    
    console.warn(`üö® Auth Alert [${alertType}]:`, alertEvent);
    
    // –í production –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã
    if (process.env.NODE_ENV === 'production') {
      this.sendCriticalAlert(alertEvent);
    }
  }
  
  private trackMetric(metricName: string, calculator: () => number) {
    // –ü—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏
    (this as any)[`_${metricName}`] = calculator;
  }
  
  private getMetric(metricName: string): number {
    const calculator = (this as any)[`_${metricName}`];
    return calculator ? calculator() : 0;
  }
  
  private sendToExternalService(event: AuthTelemetryEvent) {
    // –í production –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Sentry, DataDog, etc.
    if (process.env.NODE_ENV === 'production') {
      // –ü—Ä–∏–º–µ—Ä –¥–ª—è Sentry
      // Sentry.addBreadcrumb({
      //   category: 'auth',
      //   message: event.event,
      //   data: event
      // });
    }
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    try {
      const stored = JSON.parse(localStorage.getItem('auth_telemetry_events') || '[]');
      stored.push(event);
      if (stored.length > 50) stored.splice(0, stored.length - 50);
      localStorage.setItem('auth_telemetry_events', JSON.stringify(stored));
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ localStorage
    }
  }
  
  private sendCriticalAlert(alert: any) {
    // –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
    if (typeof window !== 'undefined' && 'navigator' in window && navigator.sendBeacon) {
      const alertEndpoint = '/api/alerts'; // –í–∞—à endpoint
      navigator.sendBeacon(alertEndpoint, JSON.stringify(alert));
    }
  }
  
  // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  getEventsSummary() {
    const summary: Record<string, number> = {};
    this.events.forEach(event => {
      summary[event.event] = (summary[event.event] || 0) + 1;
    });
    return summary;
  }
  
  getRecentEvents(minutes: number = 5) {
    const cutoff = Date.now() - (minutes * 60 * 1000);
    return this.events.filter(e => e.timestamp > cutoff);
  }
  
  exportTelemetryData() {
    return {
      sessionId: this.sessionId,
      events: this.events,
      summary: this.getEventsSummary(),
      metrics: {
        profile_fetch_rate: this.getMetric('profile_fetch_rate'),
        token_refresh_rate: this.getMetric('token_refresh_rate'),
      }
    };
  }
}

// Singleton instance
export const authTelemetry = new AuthTelemetry();

// –ì–æ—Ç–æ–≤—ã–µ —Ö–µ–ª–ø–µ—Ä—ã
export const logAuthEvent = (event: string, data?: Record<string, any>) => {
  authTelemetry.log(event, data);
};

export const logProfileFetch = (source: 'cache' | 'network' | 'broadcast', duration?: number, userId?: string) => {
  authTelemetry.log('profile_fetch', { source, dur_ms: duration, userId });
};

export const logIsAdminChange = (isAdmin: boolean | null, userId?: string) => {
  authTelemetry.log('is_admin_change', { isAdmin, userId });
};

export const logRefreshWarning = (count: number) => {
  authTelemetry.log('refresh_loop_warning', { count1min: count });
};

export const logAdminVerifyCall = (path: string, method: string) => {
  authTelemetry.log('admin_verify_call', { path, method });
};