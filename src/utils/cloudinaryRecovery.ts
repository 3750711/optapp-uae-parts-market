
import { supabase } from "@/integrations/supabase/client";
import { uploadDirectToCloudinary } from "./cloudinaryUpload";
import { getCompressedImageUrl } from "./cloudinaryUtils";

interface RecoveryResult {
  success: boolean;
  updatedProducts: number;
  errors: string[];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è Cloudinary –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
export const recoverCloudinaryData = async (productId?: string): Promise<RecoveryResult> => {
  const result: RecoveryResult = {
    success: false,
    updatedProducts: 0,
    errors: []
  };

  try {
    console.log('üîÑ Starting Cloudinary data recovery...', { productId });

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –±–µ–∑ Cloudinary –¥–∞–Ω–Ω—ã—Ö
    let query = supabase
      .from('products')
      .select(`
        id, 
        title,
        product_images!inner(url, is_primary)
      `)
      .is('cloudinary_public_id', null);

    if (productId) {
      query = query.eq('id', productId);
    }

    const { data: products, error: fetchError } = await query.limit(10);

    if (fetchError) {
      result.errors.push(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: ${fetchError.message}`);
      return result;
    }

    if (!products || products.length === 0) {
      console.log('‚úÖ –í—Å–µ —Ç–æ–≤–∞—Ä—ã —É–∂–µ –∏–º–µ—é—Ç Cloudinary –¥–∞–Ω–Ω—ã–µ');
      result.success = true;
      return result;
    }

    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ Cloudinary –¥–∞–Ω–Ω—ã—Ö`);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä
    for (const product of products) {
      try {
        console.log(`üîß –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${product.id}`);

        // –ù–∞—Ö–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        const primaryImage = product.product_images.find(img => img.is_primary);
        const imageUrl = primaryImage?.url || product.product_images[0]?.url;

        if (!imageUrl) {
          result.errors.push(`–¢–æ–≤–∞—Ä ${product.id}: –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`);
          continue;
        }

        // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ –∏–∑ Cloudinary, –∏–∑–≤–ª–µ–∫–∞–µ–º public_id
        if (imageUrl.includes('res.cloudinary.com')) {
          const publicIdMatch = imageUrl.match(/\/v\d+\/(.+)\.(jpg|jpeg|png|webp)$/);
          if (publicIdMatch) {
            const publicId = publicIdMatch[1];
            const compressedUrl = getCompressedImageUrl(publicId);

            console.log(`üì∏ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ Cloudinary URL:`, {
              productId: product.id,
              publicId,
              compressedUrl
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä —Å Cloudinary –¥–∞–Ω–Ω—ã–º–∏
            const { error: updateError } = await supabase
              .from('products')
              .update({
                cloudinary_public_id: publicId,
                cloudinary_url: compressedUrl,
                preview_image_url: compressedUrl
              })
              .eq('id', product.id);

            if (updateError) {
              result.errors.push(`–¢–æ–≤–∞—Ä ${product.id}: –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è - ${updateError.message}`);
            } else {
              result.updatedProducts++;
              console.log(`‚úÖ –¢–æ–≤–∞—Ä ${product.id} —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
            }
          } else {
            result.errors.push(`–¢–æ–≤–∞—Ä ${product.id}: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å public_id –∏–∑ URL`);
          }
        } else {
          // –ï—Å–ª–∏ —ç—Ç–æ blob URL –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤ Cloudinary
          console.log(`üÜô –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Cloudinary –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${product.id}`);
          
          try {
            // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑ URL (–µ—Å–ª–∏ —ç—Ç–æ blob)
            if (imageUrl.startsWith('blob:') || imageUrl.startsWith('data:')) {
              const response = await fetch(imageUrl);
              const blob = await response.blob();
              const file = new File([blob], `recovery_${product.id}.jpg`, { type: 'image/jpeg' });

              const uploadResult = await uploadDirectToCloudinary(file, product.id);

              if (uploadResult.success && uploadResult.cloudinaryUrl && uploadResult.publicId) {
                const compressedUrl = getCompressedImageUrl(uploadResult.publicId);

                const { error: updateError } = await supabase
                  .from('products')
                  .update({
                    cloudinary_public_id: uploadResult.publicId,
                    cloudinary_url: compressedUrl,
                    preview_image_url: compressedUrl
                  })
                  .eq('id', product.id);

                if (updateError) {
                  result.errors.push(`–¢–æ–≤–∞—Ä ${product.id}: –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ - ${updateError.message}`);
                } else {
                  result.updatedProducts++;
                  console.log(`‚úÖ –¢–æ–≤–∞—Ä ${product.id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
                }
              } else {
                result.errors.push(`–¢–æ–≤–∞—Ä ${product.id}: –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Cloudinary - ${uploadResult.error}`);
              }
            } else {
              result.errors.push(`–¢–æ–≤–∞—Ä ${product.id}: –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø URL - ${imageUrl}`);
            }
          } catch (uploadError) {
            result.errors.push(`–¢–æ–≤–∞—Ä ${product.id}: –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ - ${uploadError instanceof Error ? uploadError.message : 'Unknown error'}`);
          }
        }
      } catch (productError) {
        result.errors.push(`–¢–æ–≤–∞—Ä ${product.id}: –æ–±—â–∞—è –æ—à–∏–±–∫–∞ - ${productError instanceof Error ? productError.message : 'Unknown error'}`);
      }
    }

    result.success = result.updatedProducts > 0 || result.errors.length === 0;
    
    console.log('üèÅ Cloudinary recovery completed:', {
      success: result.success,
      updatedProducts: result.updatedProducts,
      errorCount: result.errors.length
    });

  } catch (error) {
    console.error('üí• Recovery process failed:', error);
    result.errors.push(`–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }

  return result;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞
export const validateProductIntegrity = async (productId: string): Promise<{
  isValid: boolean;
  issues: string[];
  suggestions: string[];
}> => {
  const issues: string[] = [];
  const suggestions: string[] = [];

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    const { data: product, error } = await supabase
      .from('products')
      .select(`
        id,
        title,
        cloudinary_public_id,
        cloudinary_url,
        preview_image_url,
        product_images(url, is_primary)
      `)
      .eq('id', productId)
      .single();

    if (error) {
      issues.push(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: ${error.message}`);
      return { isValid: false, issues, suggestions };
    }

    if (!product) {
      issues.push('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return { isValid: false, issues, suggestions };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    if (!product.product_images || product.product_images.length === 0) {
      issues.push('–£ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
      suggestions.push('–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ —Ç–æ–≤–∞—Ä—É');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const hasPrimaryImage = product.product_images?.some(img => img.is_primary);
    if (!hasPrimaryImage && product.product_images?.length > 0) {
      issues.push('–ù–µ —É–∫–∞–∑–∞–Ω–æ –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
      suggestions.push('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–µ');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Cloudinary –¥–∞–Ω–Ω—ã–µ
    if (!product.cloudinary_public_id) {
      issues.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Cloudinary public_id');
      suggestions.push('–ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è Cloudinary –¥–∞–Ω–Ω—ã—Ö');
    }

    if (!product.cloudinary_url) {
      issues.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Cloudinary URL');
      suggestions.push('–ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è Cloudinary –¥–∞–Ω–Ω—ã—Ö');
    }

    if (!product.preview_image_url) {
      issues.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç preview image URL');
      suggestions.push('–ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è Cloudinary –¥–∞–Ω–Ω—ã—Ö');
    }

    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞ ${productId}:`, {
      hasImages: product.product_images?.length > 0,
      hasPrimaryImage,
      hasCloudinaryData: !!product.cloudinary_public_id,
      issuesCount: issues.length
    });

    return {
      isValid: issues.length === 0,
      issues,
      suggestions
    };

  } catch (error) {
    issues.push(`–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${error instanceof Error ? error.message : 'Unknown error'}`);
    return { isValid: false, issues, suggestions };
  }
};
