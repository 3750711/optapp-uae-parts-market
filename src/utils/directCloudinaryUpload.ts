
// –ü—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤ Cloudinary –±–µ–∑ Edge Functions
interface CloudinaryUploadResult {
  success: boolean;
  publicId?: string;
  cloudinaryUrl?: string;
  mainImageUrl?: string;
  originalSize?: number;
  compressedSize?: number;
  error?: string;
}

interface CloudinaryResponse {
  public_id: string;
  secure_url: string;
  width: number;
  height: number;
  bytes: number;
  format: string;
  version: number;
  resource_type: 'image';
}

const CLOUDINARY_CLOUD_NAME = 'dcuziurrb';
const CLOUDINARY_UPLOAD_PRESET = 'marketplace'; // –ü—É–±–ª–∏—á–Ω—ã–π upload preset

// –ü—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤ Cloudinary (–∫–∞–∫ –±—ã–ª–æ –¥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
export const uploadDirectToCloudinary = async (
  file: File,
  productId?: string,
  customPublicId?: string
): Promise<CloudinaryUploadResult> => {
  try {
    console.log('üì§ Direct Cloudinary upload started:', {
      fileName: file.name,
      fileSize: file.size,
      productId,
      customPublicId
    });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
    const maxSize = 10 * 1024 * 1024; // 10MB
    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];

    if (!allowedTypes.includes(file.type)) {
      throw new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ JPEG, PNG –∏–ª–∏ WebP.');
    }

    if (file.size > maxSize) {
      throw new Error('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB.');
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π public_id
    const timestamp = Date.now();
    const publicId = customPublicId || `product_${productId || timestamp}_${timestamp}_${Math.random().toString(36).substring(7)}`;

    // –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è –ø—Ä—è–º–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    const formData = new FormData();
    formData.append('file', file);
    formData.append('upload_preset', CLOUDINARY_UPLOAD_PRESET);
    formData.append('public_id', publicId);
    formData.append('folder', 'marketplace/products');
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
    formData.append('transformation', 'q_auto:good,f_auto,w_1920,h_1920,c_limit');

    console.log('‚òÅÔ∏è Uploading directly to Cloudinary...');

    // –ü—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤ Cloudinary
    const response = await fetch(
      `https://api.cloudinary.com/v1_1/${CLOUDINARY_CLOUD_NAME}/image/upload`,
      {
        method: 'POST',
        body: formData,
      }
    );

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Cloudinary upload failed: ${response.status} ${errorText}`);
    }

    const result: CloudinaryResponse = await response.json();

    console.log('‚úÖ Direct Cloudinary upload successful:', {
      publicId: result.public_id,
      secureUrl: result.secure_url,
      format: result.format,
      sizeKB: Math.round(result.bytes / 1024),
      dimensions: `${result.width}x${result.height}`
    });

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL
    const optimizedUrl = `https://res.cloudinary.com/${CLOUDINARY_CLOUD_NAME}/image/upload/q_auto:good,f_auto,w_1920,h_1920,c_limit/${result.public_id}`;

    return {
      success: true,
      publicId: result.public_id,
      cloudinaryUrl: optimizedUrl,
      mainImageUrl: optimizedUrl,
      originalSize: result.bytes,
      compressedSize: Math.round(result.bytes * 0.7) // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–∂–∞—Ç–∏—è
    };

  } catch (error) {
    console.error('üí• Direct Cloudinary upload error:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown upload error'
    };
  }
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–æ—Ç–∫–∞—Ç –∫ —Ä–∞–±–æ—á–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é)
export const uploadImageToCloudinary = async (
  file: File,
  productId?: string,
  customPublicId?: string
): Promise<CloudinaryUploadResult> => {
  console.log('üöÄ Starting image upload (direct to Cloudinary)');
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—É—é –∑–∞–≥—Ä—É–∑–∫—É –≤ Cloudinary
  return await uploadDirectToCloudinary(file, productId, customPublicId);
};
