interface RenderCounter {
  [componentName: string]: number;
}

interface PerformanceMetrics {
  renderCounts: RenderCounter;
  authContextLoadTime: number | null;
  cyclicalCallsDetected: boolean;
  lastCyclicalCallTimestamp: number | null;
}

// ‚úÖ –ò–ó–ú–ï–ù–ï–ù–ò–ï 1: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω –¥–ª—è —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫
const PERFORMANCE_ENABLED = true; // –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω–æ –¥–ª—è —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫

// ‚úÖ –ò–ó–ú–ï–ù–ï–ù–ò–ï 2: –£–º–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
const sendMetricsToBackend = async (metrics: PerformanceMetrics) => {
  // –í DEV - –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º, —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
  if (import.meta.env.DEV) {
    return;
  }

  // –í PROD - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
  const hasCriticalMetrics = 
    Object.values(metrics.renderCounts).some(count => count > 15) ||
    (metrics.authContextLoadTime && metrics.authContextLoadTime > 5000) ||
    metrics.cyclicalCallsDetected;

  if (!hasCriticalMetrics) {
    return; // –ù–æ—Ä–º–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ - –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
  try {
    await fetch('/api/performance-metrics', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        ...metrics,
        timestamp: Date.now(),
        userAgent: navigator.userAgent,
        url: window.location.href,
        critical: true,
        severity: 'high'
      })
    });
    console.log('üö® Critical performance metrics sent to backend');
  } catch (error) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ—Ç—Ä–∏–∫
    console.warn('Failed to send performance metrics:', error);
  }
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
export const performanceDiagnostics: PerformanceMetrics = {
  renderCounts: {},
  authContextLoadTime: null,
  cyclicalCallsDetected: false,
  lastCyclicalCallTimestamp: null
};

// ‚úÖ –ò–ó–ú–ï–ù–ï–ù–ò–ï 3: –ó–∞–º–µ–Ω—è–µ–º import.meta.env.DEV –Ω–∞ PERFORMANCE_ENABLED
// –°—á–µ—Ç—á–∏–∫ —Ä–µ–Ω–¥–µ—Ä–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
export const trackRender = (componentName: string) => {
  if (PERFORMANCE_ENABLED) {
    performanceDiagnostics.renderCounts[componentName] = 
      (performanceDiagnostics.renderCounts[componentName] || 0) + 1;
    
    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —á—Ä–µ–∑–º–µ—Ä–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ä–µ–Ω–¥–µ—Ä–æ–≤
    if (performanceDiagnostics.renderCounts[componentName] > 10) {
      console.warn(`‚ö†Ô∏è ${componentName} rendered ${performanceDiagnostics.renderCounts[componentName]} times - possible performance issue`);
    }

    // ‚úÖ –í production –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    if (import.meta.env.PROD && performanceDiagnostics.renderCounts[componentName] === 20) {
      console.warn(`üö® Critical: ${componentName} rendered 20 times in production`);
      sendMetricsToBackend(performanceDiagnostics);
    }
  }
};

// –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≥—Ä—É–∑–∫–∏ AuthContext
export const startAuthTimer = () => {
  if (PERFORMANCE_ENABLED) {
    return performance.now();
  }
  return 0;
};

export const endAuthTimer = (startTime: number) => {
  if (PERFORMANCE_ENABLED) {
    performanceDiagnostics.authContextLoadTime = performance.now() - startTime;
    console.log(`‚è±Ô∏è AuthContext load time: ${performanceDiagnostics.authContextLoadTime.toFixed(2)}ms`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–∞—è
    if (import.meta.env.PROD && performanceDiagnostics.authContextLoadTime > 5000) {
      sendMetricsToBackend(performanceDiagnostics);
    }
  }
};

// –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –≤—ã–∑–æ–≤–æ–≤
export const detectCyclicalCall = (functionName: string) => {
  if (PERFORMANCE_ENABLED) {
    const now = Date.now();
    const lastCall = performanceDiagnostics.lastCyclicalCallTimestamp;
    
    if (lastCall && (now - lastCall) < 100) { // –í—ã–∑–æ–≤—ã —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 100–º—Å
      performanceDiagnostics.cyclicalCallsDetected = true;
      console.warn(`üîÑ Cyclical call detected in ${functionName} - calls too frequent`);
      
      // –ö—Ä–∏—Ç–∏—á–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è –≤ production
      if (import.meta.env.PROD) {
        sendMetricsToBackend(performanceDiagnostics);
      }
    }
    
    performanceDiagnostics.lastCyclicalCallTimestamp = now;
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
export const getPerformanceReport = () => {
  if (PERFORMANCE_ENABLED) {
    console.group('üìä Performance Report');
    console.log('Render counts:', performanceDiagnostics.renderCounts);
    console.log('AuthContext load time:', performanceDiagnostics.authContextLoadTime + 'ms');
    console.log('Cyclical calls detected:', performanceDiagnostics.cyclicalCallsDetected);
    console.groupEnd();
  }
};

// –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤
export const resetPerformanceCounters = () => {
  if (PERFORMANCE_ENABLED) {
    performanceDiagnostics.renderCounts = {};
    performanceDiagnostics.cyclicalCallsDetected = false;
    performanceDiagnostics.lastCyclicalCallTimestamp = null;
    console.log('üîÑ Performance counters reset');
  }
};

// ‚úÖ –ò–ó–ú–ï–ù–ï–ù–ò–ï 4: –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –≤ production (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
if (typeof window !== 'undefined' && import.meta.env.PROD) {
  setInterval(() => {
    // sendMetricsToBackend —Å–∞–º–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å
    sendMetricsToBackend(performanceDiagnostics);
  }, 5 * 60 * 1000); // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
}