
// Environment check
const isDevelopment = import.meta.env.DEV;

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
import { devLog, devError, devWarn } from '@/utils/logger';

// Declare global gtag for analytics
declare global {
  interface Window {
    gtag?: (command: string, eventName: string, parameters: Record<string, any>) => void;
    __webpack_require__?: any;
  }
}

// Performance marking functions
export const perfMark = (name: string) => {
  if (typeof performance !== 'undefined' && performance.mark) {
    performance.mark(name);
  }
};

export const perfMeasure = (name: string, startMark: string, endMark: string) => {
  if (typeof performance !== 'undefined' && performance.measure) {
    try {
      performance.measure(name, startMark, endMark);
      if (isDevelopment) {
        const measure = performance.getEntriesByName(name, 'measure')[0];
        if (measure) {
          console.log(`‚è±Ô∏è ${name}: ${measure.duration.toFixed(2)}ms`);
        }
      }
    } catch (error) {
      devError('Failed to measure performance:', error);
    }
  }
};

// Chunk loading monitoring
export const monitorChunkLoading = () => {
  if (!isDevelopment || typeof window === 'undefined') return;

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞–Ω–∫–æ–≤
  window.addEventListener('error', (event) => {
    if (event.filename && event.filename.includes('chunk')) {
      console.error('üö® Chunk loading error:', {
        filename: event.filename,
        message: event.message,
        lineno: event.lineno,
        colno: event.colno
      });
      
      // –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Ç—Ä–∏–∫—É –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
      if (window.gtag) {
        window.gtag('event', 'chunk_load_error', {
          error_filename: event.filename,
          error_message: event.message
        });
      }
    }
  });

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª–µ–π
  const originalImport = window.__webpack_require__?.l;
  if (originalImport && window.__webpack_require__) {
    window.__webpack_require__.l = function(url: string, done: Function, key?: string, chunkId?: string) {
      const startTime = performance.now();
      
      const wrappedDone = (event?: Event) => {
        const endTime = performance.now();
        const loadTime = endTime - startTime;
        
        if (event && event.type === 'load') {
          console.log(`üì¶ Chunk loaded: ${url.split('/').pop()} in ${loadTime.toFixed(2)}ms`);
        } else if (event && event.type === 'error') {
          console.error(`‚ùå Chunk load failed: ${url.split('/').pop()}`);
        }
        
        return done(event);
      };
      
      return originalImport.call(this, url, wrappedDone, key, chunkId);
    };
  }
};

// Lazy loading metrics
export const trackLazyLoadTime = (componentName: string, loadTime: number) => {
  if (isDevelopment) {
    console.log(`üìä ${componentName} lazy load time: ${loadTime.toFixed(2)}ms`);
  }
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
  if (typeof window !== 'undefined' && window.gtag) {
    window.gtag('event', 'lazy_component_load', {
      component_name: componentName,
      load_time: Math.round(loadTime),
      custom_map: {
        metric1: Math.round(loadTime)
      }
    });
  }
};

// Admin cache functions
const ADMIN_CACHE_KEY = 'admin_rights_cache';
const CACHE_DURATION = 3 * 60 * 1000; // –£–º–µ–Ω—å—à–∏–ª–∏ –¥–æ 3 –º–∏–Ω—É—Ç

interface AdminCacheData {
  isAdmin: boolean;
  timestamp: number;
  userId: string;
}

export const getCachedAdminRights = (userId: string): boolean | null => {
  if (typeof window === 'undefined' || typeof localStorage === 'undefined') return null;
  
  try {
    const cached = localStorage.getItem(`${ADMIN_CACHE_KEY}_${userId}`);
    if (!cached) return null;
    
    const data: AdminCacheData = JSON.parse(cached);
    const now = Date.now();
    
    if (now - data.timestamp > CACHE_DURATION) {
      localStorage.removeItem(`${ADMIN_CACHE_KEY}_${userId}`);
      return null;
    }
    
    return data.isAdmin;
  } catch (error) {
    devError('Failed to get cached admin rights:', error);
    return null;
  }
};

export const setCachedAdminRights = (userId: string, isAdmin: boolean): void => {
  if (typeof window === 'undefined' || typeof localStorage === 'undefined') return;
  
  try {
    const data: AdminCacheData = {
      isAdmin,
      timestamp: Date.now(),
      userId
    };
    localStorage.setItem(`${ADMIN_CACHE_KEY}_${userId}`, JSON.stringify(data));
  } catch (error) {
    devError('Failed to cache admin rights:', error);
  }
};

export const clearAdminCache = (): void => {
  if (typeof window === 'undefined' || typeof localStorage === 'undefined') return;
  
  try {
    const keys = Object.keys(localStorage);
    keys.forEach(key => {
      if (key.startsWith(ADMIN_CACHE_KEY)) {
        localStorage.removeItem(key);
      }
    });
  } catch (error) {
    devError('Failed to clear admin cache:', error);
  }
};

// Query prefetching helpers
export const prefetchAdminData = async (queryClient: any) => {
  console.log('üîÑ Prefetching admin data...');
  
  // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
  try {
    await Promise.allSettled([
      queryClient.prefetchQuery({
        queryKey: ['admin', 'users', 'pending-count'],
        staleTime: 2 * 60 * 1000,
      }),
      queryClient.prefetchQuery({
        queryKey: ['admin', 'metrics'],
        staleTime: 5 * 60 * 1000,
      })
    ]);
    console.log('‚úÖ Admin data prefetched');
  } catch (error) {
    console.warn('‚ö†Ô∏è Failed to prefetch admin data:', error);
  }
};

// Throttle —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –≤—ã–∑–æ–≤–æ–≤
export const throttle = <T extends (...args: any[]) => any>(
  func: T,
  limit: number
): ((...args: Parameters<T>) => void) => {
  let inThrottle: boolean;
  return (...args: Parameters<T>) => {
    if (!inThrottle) {
      func(...args);
      inThrottle = true;
      setTimeout(() => inThrottle = false, limit);
    }
  };
};

// –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
export const measureTime = (label: string) => {
  const start = performance.now();
  return {
    end: () => {
      const end = performance.now();
      const duration = end - start;
      if (isDevelopment) {
        console.log(`‚è±Ô∏è ${label}: ${duration.toFixed(2)}ms`);
      }
      return duration;
    }
  };
};

// –£–ª—É—á—à–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
export const monitorPerformance = () => {
  if (!isDevelopment || typeof window === 'undefined') return;

  // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≥—Ä—É–∑–∫–∏
  window.addEventListener('load', () => {
    if (typeof performance !== 'undefined') {
      const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;
      console.log('üìä Performance metrics:', {
        'DOM Content Loaded': `${navigation.domContentLoadedEventEnd - navigation.domContentLoadedEventStart}ms`,
        'Load Complete': `${navigation.loadEventEnd - navigation.loadEventStart}ms`,
        'Total Load Time': `${navigation.loadEventEnd - navigation.fetchStart}ms`
      });
    }
  });

  // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–æ–ª—å—à–∏—Ö –∑–∞–¥–∞—á
  if ('PerformanceObserver' in window) {
    try {
      const observer = new PerformanceObserver((list) => {
        for (const entry of list.getEntries()) {
          if (entry.duration > 50) { // –ó–∞–¥–∞—á–∏ –¥–æ–ª—å—à–µ 50ms
            console.warn(`üêå Long task detected: ${entry.name} (${entry.duration.toFixed(2)}ms)`);
          }
        }
      });
      observer.observe({ entryTypes: ['longtask'] });
    } catch (error) {
      devError('Failed to setup performance observer:', error);
    }
  }

  // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ chunk loading
  monitorChunkLoading();
};

// –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
export const preloadCriticalResources = () => {
  if (typeof window === 'undefined' || typeof document === 'undefined') return;
  
  const criticalResources = [
    // CSS —Ñ–∞–π–ª—ã
    '/assets/index.css',
  ];

  criticalResources.forEach(resource => {
    const link = document.createElement('link');
    link.rel = 'preload';
    link.href = resource;
    
    if (resource.endsWith('.css')) {
      link.as = 'style';
    } else if (resource.endsWith('.js')) {
      link.as = 'script';
    } else if (resource.includes('font')) {
      link.as = 'font';
      link.crossOrigin = 'anonymous';
    }
    
    document.head.appendChild(link);
  });
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
export const initPerformanceOptimizations = () => {
  if (typeof window === 'undefined') return;
  
  monitorPerformance();
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
  if (typeof document !== 'undefined') {
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', () => {
        preloadCriticalResources();
      });
    } else {
      preloadCriticalResources();
    }
  }
};
