import { supabase } from "@/integrations/supabase/client";

// –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å Cloudinary —á–µ—Ä–µ–∑ Supabase secrets
interface CloudinaryConfig {
  cloudName: string;
  uploadPreset?: string;
}

interface UploadOptions {
  file: File;
  productId?: string;
  customPublicId?: string;
  resourceType?: 'image' | 'video';
  maxSize?: number; // –≤ –±–∞–π—Ç–∞—Ö
}

interface UploadResult {
  success: boolean;
  publicId?: string;
  cloudinaryUrl?: string;
  thumbnailUrl?: string;
  error?: string;
}

class SecureCloudinaryService {
  private config: CloudinaryConfig;
  
  constructor() {
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    this.config = {
      cloudName: import.meta.env.VITE_CLOUDINARY_CLOUD_NAME || 'dcuziurrb',
      uploadPreset: import.meta.env.VITE_CLOUDINARY_UPLOAD_PRESET,
    };

    if (!this.config.cloudName) {
      console.error('‚ùå Cloudinary cloud name not configured');
    }
  }

  async uploadFile(options: UploadOptions): Promise<UploadResult> {
    const { file, productId, customPublicId, resourceType = 'image', maxSize = 10 * 1024 * 1024 } = options;

    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
      if (file.size > maxSize) {
        return { 
          success: false, 
          error: `–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º—É–º: ${Math.round(maxSize / 1024 / 1024)}MB` 
        };
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é Edge –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ä–µ—Å—É—Ä—Å–∞
      const functionName = resourceType === 'video' 
        ? 'cloudinary-video-upload'
        : 'cloudinary-upload';

      // –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
      const formData = new FormData();
      formData.append('file', file);
      
      if (productId) {
        formData.append('productId', productId);
      }
      
      if (customPublicId) {
        formData.append('customPublicId', customPublicId);
      }

      console.log(`üì§ Uploading ${resourceType} to Cloudinary via Supabase Edge Function...`);

      const { data, error } = await supabase.functions.invoke(functionName, {
        body: formData,
      });

      if (error) {
        console.error(`‚ùå Upload failed:`, error);
        return { 
          success: false, 
          error: error.message || '–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏' 
        };
      }

      const result = data as UploadResult;
      
      if (result.success) {
        console.log(`‚úÖ ${resourceType} uploaded successfully:`, result.publicId);
        return result;
      } else {
        console.error('‚ùå Upload failed:', result.error);
        return { 
          success: false, 
          error: result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏' 
        };
      }

    } catch (error) {
      console.error('üí• Upload error:', error);
      return { 
        success: false, 
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' 
      };
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö URL –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  generateImageUrl(publicId: string, options?: {
    width?: number;
    height?: number;
    quality?: string;
    format?: string;
  }): string {
    const { width, height, quality = 'auto', format = 'auto' } = options || {};
    
    let transformation = `q_${quality},f_${format}`;
    
    if (width || height) {
      transformation += `,w_${width || 'auto'},h_${height || 'auto'},c_limit`;
    }
    
    // Add automatic orientation correction
    transformation += ',angle_auto_right';

    return `https://res.cloudinary.com/${this.config.cloudName}/image/upload/${transformation}/${publicId}`;
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö URL –¥–ª—è –≤–∏–¥–µ–æ
  generateVideoUrl(publicId: string, options?: {
    width?: number;
    height?: number;
    quality?: string;
  }): string {
    const { width, height, quality = 'auto' } = options || {};
    
    let transformation = `q_${quality}`;
    
    if (width || height) {
      transformation += `,w_${width || 'auto'},h_${height || 'auto'},c_fill`;
    }

    return `https://res.cloudinary.com/${this.config.cloudName}/video/upload/${transformation}/${publicId}`;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞
  async healthCheck(): Promise<boolean> {
    try {
      const response = await fetch(`https://res.cloudinary.com/${this.config.cloudName}/image/upload/sample.jpg`);
      return response.ok;
    } catch {
      return false;
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const secureCloudinary = new SecureCloudinaryService();

// –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
export const uploadImage = (file: File, productId?: string) => 
  secureCloudinary.uploadFile({ file, productId, resourceType: 'image' });

export const uploadVideo = (file: File, productId?: string) => 
  secureCloudinary.uploadFile({ file, productId, resourceType: 'video' });

export const generateOptimizedImageUrl = (publicId: string, width?: number, height?: number) =>
  secureCloudinary.generateImageUrl(publicId, { width, height, quality: 'auto', format: 'webp' });
