import { useLazyProfiles } from '@/hooks/useLazyProfiles';

export interface ParsedTelegramOrder {
  title: string;
  place_number: string;
  price: string;
  delivery_price?: string;
  buyerOptId: string;
  sellerOptId: string;
  brand?: string;
  model?: string;
}

export interface ParseResult {
  success: boolean;
  data?: ParsedTelegramOrder;
  errors: string[];
  warnings: string[];
}

/**
 * –°–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
 */
const CAR_BRANDS = [
  'Toyota', 'Honda', 'Nissan', 'Mazda', 'Subaru', 'Mitsubishi', 'Suzuki', 'Isuzu',
  'BMW', 'Mercedes', 'Mercedes-Benz', 'Audi', 'Volkswagen', 'Porsche', 'Opel',
  'Ford', 'Chevrolet', 'Cadillac', 'Buick', 'GMC', 'Lincoln',
  'Hyundai', 'Kia', 'Genesis', 'SsangYong',
  'Lexus', 'Infiniti', 'Acura',
  'Volvo', 'Saab', 'Peugeot', 'Citroen', 'Renault',
  'Fiat', 'Alfa Romeo', 'Lancia',
  'Skoda', 'Seat',
  'Jaguar', 'Land Rover', 'Range Rover', 'Mini',
  'Lada', 'VAZ', 'GAZ', 'UAZ'
];

/**
 * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞ (—É–±–∏—Ä–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä –∏ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã)
 */
const normalizeForSearch = (str: string): string => {
  return str.toLowerCase().trim();
};

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –±—Ä–µ–Ω–¥ –∏ –º–æ–¥–µ–ª—å –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
 */
export function extractBrandAndModel(title: string): { brand?: string; model?: string } {
  console.log('üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –∏ –º–æ–¥–µ–ª–∏ –∏–∑:', title);
  
  const words = title.split(/\s+/);
  let brand: string | undefined;
  let model: string | undefined;

  // –ò—â–µ–º –±—Ä–µ–Ω–¥ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ (–Ω–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É)
  for (let i = 0; i < words.length; i++) {
    const word = normalizeForSearch(words[i]);
    const foundBrand = CAR_BRANDS.find(b => 
      normalizeForSearch(b) === word
    );
    
    if (foundBrand) {
      brand = foundBrand;
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω –±—Ä–µ–Ω–¥:', brand, '–≤ –ø–æ–∑–∏—Ü–∏–∏', i);
      
      // –°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–æ–¥–µ–ª—å—é
      if (i + 1 < words.length) {
        // –û—á–∏—â–∞–µ–º –º–æ–¥–µ–ª—å –æ—Ç –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
        model = words[i + 1].replace(/[^\w\-]/g, '');
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –º–æ–¥–µ–ª—å:', model);
      }
      break;
    }
  }

  console.log('üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è:', { brand, model });
  return { brand, model };
}

/**
 * –ü–∞—Ä—Å–∏—Ç telegram —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
 */
export function parseTelegramOrder(text: string): ParseResult {
  const errors: string[] = [];
  const warnings: string[] = [];
  
  try {
    // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    const cleanText = text.trim().replace(/\r\n/g, '\n').replace(/\r/g, '\n');
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
    const titleMatch = cleanText.match(/–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:\s*(.+?)(?=\n|$)/i);
    if (!titleMatch) {
      errors.push('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞');
      return { success: false, errors, warnings };
    }
    const title = titleMatch[1].trim();

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç
    const placesMatch = cleanText.match(/–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç:\s*(\d+)/i);
    if (!placesMatch) {
      errors.push('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç');
      return { success: false, errors, warnings };
    }
    const place_number = placesMatch[1];

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
    const priceMatch = cleanText.match(/–°—Ç–æ–∏–º–æ—Å—Ç—å:\s*(\d+(?:\.\d+)?)\$/i);
    if (!priceMatch) {
      errors.push('–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞');
      return { success: false, errors, warnings };
    }
    const price = priceMatch[1];

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    const deliveryPriceMatch = cleanText.match(/–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏:\s*(\d+(?:\.\d+)?)\$/i);
    const delivery_price = deliveryPriceMatch ? deliveryPriceMatch[1] : undefined;

    // –ò–∑–≤–ª–µ–∫–∞–µ–º OPT_ID (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏)
    const lines = cleanText.split('\n').filter(line => line.trim());
    const lastTwoLines = lines.slice(-2);
    
    if (lastTwoLines.length < 2) {
      errors.push('–ù–µ –Ω–∞–π–¥–µ–Ω—ã OPT_ID –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–¥–∞–≤—Ü–∞');
      return { success: false, errors, warnings };
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ = –ø—Ä–æ–¥–∞–≤–µ—Ü, –≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ = –ø–æ–∫—É–ø–∞—Ç–µ–ª—å
    const sellerOptId = lastTwoLines[0].trim(); // MDY - –ø—Ä–æ–¥–∞–≤–µ—Ü
    const buyerOptId = lastTwoLines[1].trim();   // PETR - –ø–æ–∫—É–ø–∞—Ç–µ–ª—å

    console.log('üîç –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ OPT_ID:', { sellerOptId, buyerOptId });

    if (!buyerOptId || !sellerOptId) {
      errors.push('OPT_ID –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –∏–ª–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞ –ø—É—Å—Ç—ã');
      return { success: false, errors, warnings };
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –±—Ä–µ–Ω–¥ –∏ –º–æ–¥–µ–ª—å –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
    const { brand, model } = extractBrandAndModel(title);
    
    if (!brand) {
      warnings.push('–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –±—Ä–µ–Ω–¥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è');
    }
    if (!model) {
      warnings.push('–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è');
    }

    const result: ParsedTelegramOrder = {
      title,
      place_number,
      price,
      delivery_price,
      buyerOptId,
      sellerOptId,
      brand,
      model
    };

    return {
      success: true,
      data: result,
      errors,
      warnings
    };

  } catch (error) {
    errors.push(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    return { success: false, errors, warnings };
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
export function validateParsedOrder(data: ParsedTelegramOrder): string[] {
  const errors: string[] = [];

  if (!data.title.trim()) {
    errors.push('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
  }

  const placeNumber = parseInt(data.place_number);
  if (isNaN(placeNumber) || placeNumber <= 0) {
    errors.push('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º');
  }

  const price = parseFloat(data.price);
  if (isNaN(price) || price <= 0) {
    errors.push('–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º');
  }

  if (data.delivery_price) {
    const deliveryPrice = parseFloat(data.delivery_price);
    if (isNaN(deliveryPrice) || deliveryPrice < 0) {
      errors.push('–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º');
    }
  }

  if (!data.buyerOptId.trim()) {
    errors.push('OPT_ID –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
  }

  if (!data.sellerOptId.trim()) {
    errors.push('OPT_ID –ø—Ä–æ–¥–∞–≤—Ü–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
  }

  return errors;
}