
// –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —É—Å–ª–æ–≤–Ω—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
const isDevelopment = process.env.NODE_ENV === 'development';

// –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è throttling
const logCounts = new Map<string, number>();
const LOG_THROTTLE_LIMIT = 100;

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è development –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
export const devLog = (...args: any[]) => {
  if (isDevelopment) {
    console.log(...args);
  }
};

export const devWarn = (...args: any[]) => {
  if (isDevelopment) {
    console.warn(...args);
  }
};

export const devError = (...args: any[]) => {
  if (isDevelopment) {
    console.error(...args);
  }
};

// Throttled logging –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Å–ø–∞–º–∞ –≤ development
export const throttledDevLog = (key: string, ...args: any[]) => {
  if (!isDevelopment) return;
  
  const count = logCounts.get(key) || 0;
  if (count < LOG_THROTTLE_LIMIT) {
    console.log(...args);
    logCounts.set(key, count + 1);
  } else if (count === LOG_THROTTLE_LIMIT) {
    console.log(`üîï Further "${key}" logs suppressed (${LOG_THROTTLE_LIMIT}+ calls)`);
    logCounts.set(key, count + 1);
  }
};

// –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –¥–ª—è production
export const prodError = (error: Error | string, context?: Record<string, any>) => {
  const errorMessage = typeof error === 'string' ? error : error.message;
  const stack = typeof error === 'object' ? error.stack : undefined;
  
  // –í—Å–µ–≥–¥–∞ –ª–æ–≥–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
  console.error('üö® Critical Error:', errorMessage, context);
  
  // –í production –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
  if (!isDevelopment && typeof window !== 'undefined') {
    try {
      // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å error monitoring
      if (window.gtag) {
        window.gtag('event', 'exception', {
          description: errorMessage,
          fatal: true,
          custom_map: context
        });
      }
      
      // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ error reporting service
      const errorEvent = new CustomEvent('critical-error', {
        detail: { message: errorMessage, stack, context, timestamp: Date.now() }
      });
      window.dispatchEvent(errorEvent);
    } catch (reportingError) {
      console.error('Failed to report error:', reportingError);
    }
  }
};

// Performance logging
export const perfStart = (label: string) => {
  if (isDevelopment && typeof performance !== 'undefined') {
    performance.mark(`${label}-start`);
  }
};

export const perfEnd = (label: string) => {
  if (isDevelopment && typeof performance !== 'undefined') {
    try {
      performance.mark(`${label}-end`);
      performance.measure(label, `${label}-start`, `${label}-end`);
      const measure = performance.getEntriesByName(label, 'measure')[0];
      if (measure) {
        console.log(`‚è±Ô∏è ${label}: ${measure.duration.toFixed(2)}ms`);
      }
    } catch (error) {
      console.warn(`Failed to measure performance for ${label}:`, error);
    }
  }
};

// –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤ (–¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–µ—Å—Å–∏–π)
export const resetLogCounters = () => {
  logCounts.clear();
};

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –≤ development)
export const getLogStats = () => {
  if (!isDevelopment) return {};
  return Object.fromEntries(logCounts);
};
