
// –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —É—Å–ª–æ–≤–Ω—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
const isDevelopment = import.meta.env.DEV;
const isProduction = import.meta.env.PROD;

// –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è throttling
const logCounts = new Map<string, number>();
const LOG_THROTTLE_LIMIT = 50; // –£–º–µ–Ω—å—à–∏–ª–∏ –ª–∏–º–∏—Ç

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const LOG_CONFIG = {
  enableDevLogs: isDevelopment,
  enableProdCriticalOnly: isProduction,
  enablePerformanceLogs: isDevelopment,
  throttleEnabled: true,
  maxLogHistory: 100
};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è development –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ production)
export const devLog = (...args: any[]) => {
  if (LOG_CONFIG.enableDevLogs) {
    console.log(...args);
  }
};

export const devWarn = (...args: any[]) => {
  if (LOG_CONFIG.enableDevLogs) {
    console.warn(...args);
  }
};

export const devError = (...args: any[]) => {
  if (LOG_CONFIG.enableDevLogs) {
    console.error(...args);
  }
};

// Production error logging (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –¥–ª—è production)
export const prodError = (error: Error | string, context?: Record<string, any>) => {
  const errorMessage = typeof error === 'string' ? error : error.message;
  const stack = typeof error === 'object' ? error.stack : undefined;
  
  // –í production –ª–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
  if (isProduction) {
    console.error('üö® Production Error:', errorMessage, context);
  } else {
    // –í development –ª–æ–≥–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ
    console.error('üî¥ Error:', errorMessage, context, stack ? { stack } : {});
  }
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
  if (typeof window !== 'undefined') {
    try {
      const errorEvent = new CustomEvent('production-error', {
        detail: { 
          message: errorMessage, 
          stack, 
          context, 
          timestamp: Date.now(),
          url: window.location.href,
          userAgent: navigator.userAgent
        }
      });
      window.dispatchEvent(errorEvent);
    } catch (reportingError) {
      console.error('Failed to report production error:', reportingError);
    }
  }
};

// Throttled logging –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Å–ø–∞–º–∞ (—Ç–æ–ª—å–∫–æ –≤ development)
export const throttledDevLog = (key: string, ...args: any[]) => {
  if (!LOG_CONFIG.enableDevLogs || !LOG_CONFIG.throttleEnabled) return;
  
  const count = logCounts.get(key) || 0;
  if (count < LOG_THROTTLE_LIMIT) {
    console.log(...args);
    logCounts.set(key, count + 1);
  } else if (count === LOG_THROTTLE_LIMIT) {
    console.log(`üîï Further "${key}" logs suppressed (${LOG_THROTTLE_LIMIT}+ calls)`);
    logCounts.set(key, count + 1);
  }
};

// –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ (–≤—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–Ω—ã)
export const criticalError = (error: Error | string, context?: Record<string, any>) => {
  const errorMessage = typeof error === 'string' ? error : error.message;
  const stack = typeof error === 'object' ? error.stack : undefined;
  
  // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è –≤—Å–µ–≥–¥–∞
  console.error('üö® Critical Error:', errorMessage, context);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≤–Ω–µ—à–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  if (typeof window !== 'undefined') {
    try {
      // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ error monitoring
      const errorEvent = new CustomEvent('critical-error', {
        detail: { 
          message: errorMessage, 
          stack, 
          context, 
          timestamp: Date.now(),
          url: window.location.href,
          userAgent: navigator.userAgent
        }
      });
      window.dispatchEvent(errorEvent);
    } catch (reportingError) {
      console.error('Failed to report critical error:', reportingError);
    }
  }
};

// Performance logging (—Ç–æ–ª—å–∫–æ –≤ development)
export const perfStart = (label: string) => {
  if (LOG_CONFIG.enablePerformanceLogs && typeof performance !== 'undefined') {
    performance.mark(`${label}-start`);
  }
};

export const perfEnd = (label: string) => {
  if (LOG_CONFIG.enablePerformanceLogs && typeof performance !== 'undefined') {
    try {
      performance.mark(`${label}-end`);
      performance.measure(label, `${label}-start`, `${label}-end`);
      const measure = performance.getEntriesByName(label, 'measure')[0];
      if (measure) {
        console.log(`‚è±Ô∏è ${label}: ${measure.duration.toFixed(2)}ms`);
      }
    } catch (error) {
      console.warn(`Failed to measure performance for ${label}:`, error);
    }
  }
};

// –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
export const trackMetric = (name: string, value: number, tags?: Record<string, string>) => {
  if (!LOG_CONFIG.enablePerformanceLogs) return;
  
  const metric = {
    name,
    value,
    tags,
    timestamp: Date.now(),
    url: typeof window !== 'undefined' ? window.location.pathname : ''
  };
  
  console.log(`üìä Metric: ${name} = ${value}`, metric);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  if (typeof window !== 'undefined') {
    window.dispatchEvent(new CustomEvent('performance-metric', { detail: metric }));
  }
};

// –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤
export const resetLogCounters = () => {
  logCounts.clear();
};

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
export const getLogStats = () => {
  if (!isDevelopment) return { disabled: 'production mode' };
  return {
    counters: Object.fromEntries(logCounts),
    config: LOG_CONFIG,
    totalLogs: Array.from(logCounts.values()).reduce((sum, count) => sum + count, 0)
  };
};
