
// –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —É—Å–ª–æ–≤–Ω—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
const isDevelopment = import.meta.env.DEV;
const isProduction = import.meta.env.PROD;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è - –æ—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –≤ production –∫—Ä–æ–º–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
const LOG_CONFIG = {
  enableDevLogs: isDevelopment,
  enableProdCriticalOnly: isProduction,
  enablePerformanceLogs: false, // –û—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è production
  throttleEnabled: isDevelopment,
  maxLogHistory: isDevelopment ? 100 : 10
};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è development –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ production)
export const devLog = (...args: any[]) => {
  if (LOG_CONFIG.enableDevLogs) {
    console.log(...args);
  }
};

export const devWarn = (...args: any[]) => {
  if (LOG_CONFIG.enableDevLogs) {
    console.warn(...args);
  }
};

export const devError = (...args: any[]) => {
  if (LOG_CONFIG.enableDevLogs) {
    console.error(...args);
  }
};

// Production error logging (—Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏)
export const prodError = (error: Error | string, context?: Record<string, any>) => {
  const errorMessage = typeof error === 'string' ? error : error.message;
  
  // –í production –ª–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Å–æ–ª—å –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
  if (isProduction) {
    console.error('üö® Critical Error:', errorMessage);
  } else {
    // –í development –ª–æ–≥–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ
    const stack = typeof error === 'object' ? error.stack : undefined;
    console.error('üî¥ Error:', errorMessage, context, stack ? { stack } : {});
  }
};

// –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ (–≤—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–Ω—ã, –Ω–æ —É–ø—Ä–æ—â–µ–Ω—ã)
export const criticalError = (error: Error | string, context?: Record<string, any>) => {
  const errorMessage = typeof error === 'string' ? error : error.message;
  console.error('üö® Critical Error:', errorMessage);
};

// Performance logging (–æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ production)
export const perfStart = (label: string) => {
  // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–µ–Ω–æ
};

export const perfEnd = (label: string) => {
  // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–µ–Ω–æ
};

// –û—Ç–∫–ª—é—á–µ–Ω–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
export const trackMetric = (name: string, value: number, tags?: Record<string, string>) => {
  // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–µ–Ω–æ
};

// Throttled logging (—Ç–æ–ª—å–∫–æ –¥–ª—è development)
export const throttledDevLog = (key: string, ...args: any[]) => {
  if (LOG_CONFIG.enableDevLogs) {
    console.log(...args);
  }
};

// –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export const resetLogCounters = () => {};
export const getLogStats = () => ({ disabled: 'production mode' });
