
import { logger } from '@/utils/logger';

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —É–º–Ω–æ–≥–æ —Å–∂–∞—Ç–∏—è
export const COMPRESSION_THRESHOLDS = {
  NO_COMPRESSION: 400 * 1024,     // 400KB - –Ω–µ —Å–∂–∏–º–∞–µ–º
  LIGHT_COMPRESSION: 2 * 1024 * 1024,  // 2MB - –ª–µ–≥–∫–æ–µ —Å–∂–∞—Ç–∏–µ
  HEAVY_COMPRESSION: 10 * 1024 * 1024  // 10MB - –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Å–∂–∞—Ç–∏–µ
};

export interface SmartCompressionOptions {
  maxSizeMB: number;
  maxWidthOrHeight: number;
  initialQuality: number;
  fileType: string;
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∂–∞—Ç–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
 * @param fileSize –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö
 * @param fileName –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞
 * @returns –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∂–∞—Ç–∏—è –∏–ª–∏ null –µ—Å–ª–∏ —Å–∂–∞—Ç–∏–µ –Ω–µ –Ω—É–∂–Ω–æ
 */
export const getSmartCompressionSettings = (fileSize: number, fileName?: string): SmartCompressionOptions | null => {
  // Check if it's a HEIC file
  const isHeicFile = fileName && 
    (fileName.toLowerCase().endsWith('.heic') || fileName.toLowerCase().endsWith('.heif'));
  
  // HEIC files should be handled by Cloudinary conversion, not compressed locally
  if (isHeicFile) {
    logger.log(`üîÑ HEIC file detected: ${fileName} - will be converted by Cloudinary`);
    return null; // Skip local compression for HEIC files
  }
  
  // –§–∞–π–ª—ã –º–µ–Ω—å—à–µ 400KB –Ω–µ —Å–∂–∏–º–∞–µ–º - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
  if (fileSize < COMPRESSION_THRESHOLDS.NO_COMPRESSION) {
    logger.log(`üéØ No compression needed for file ${Math.round(fileSize / 1024)}KB (< 400KB threshold)`);
    return null;
  }
  
  // –§–∞–π–ª—ã 400KB-2MB - –ª–µ–≥–∫–æ–µ —Å–∂–∞—Ç–∏–µ, –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
  if (fileSize < COMPRESSION_THRESHOLDS.LIGHT_COMPRESSION) {
    logger.log(`üü¢ Light compression for file ${Math.round(fileSize / 1024)}KB (400KB-2MB range)`);
    return {
      maxSizeMB: 1.5,
      maxWidthOrHeight: 1920,
      initialQuality: 0.9,
      fileType: 'image/webp'
    };
  }
  
  // –§–∞–π–ª—ã 2MB-10MB - —Å—Ä–µ–¥–Ω–µ–µ —Å–∂–∞—Ç–∏–µ
  if (fileSize < COMPRESSION_THRESHOLDS.HEAVY_COMPRESSION) {
    logger.log(`üü° Medium compression for file ${Math.round(fileSize / 1024)}KB (2MB-10MB range)`);
    return {
      maxSizeMB: 1,
      maxWidthOrHeight: 1600,
      initialQuality: 0.8,
      fileType: 'image/webp'
    };
  }
  
  // –§–∞–π–ª—ã –±–æ–ª—å—à–µ 10MB - –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Å–∂–∞—Ç–∏–µ
  logger.log(`üî¥ Heavy compression for file ${Math.round(fileSize / 1024)}KB (>10MB)`);
  return {
    maxSizeMB: 0.5,
    maxWidthOrHeight: 1200,
    initialQuality: 0.6,
    fileType: 'image/webp'
  };
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —Å–∂–∏–º–∞—Ç—å —Ñ–∞–π–ª
 * @param fileSize –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö
 * @param fileName –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞
 * @returns true –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω—É–∂–Ω–æ —Å–∂–∏–º–∞—Ç—å
 */
export const shouldCompressFile = (fileSize: number, fileName?: string): boolean => {
  // Don't compress HEIC files locally - let Cloudinary handle them
  const isHeicFile = fileName && 
    (fileName.toLowerCase().endsWith('.heic') || fileName.toLowerCase().endsWith('.heif'));
  
  if (isHeicFile) {
    return false;
  }
  
  return fileSize >= COMPRESSION_THRESHOLDS.NO_COMPRESSION;
};

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param bytes –†–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö
 * @returns –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
 */
export const formatFileSize = (bytes: number): string => {
  if (bytes === 0) return '0 B';
  const k = 1024;
  const sizes = ['B', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];
};

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∂–∞—Ç–∏—è
 * @param originalSize –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä
 * @param compressedSize –°–∂–∞—Ç—ã–π —Ä–∞–∑–º–µ—Ä
 * @returns –ü—Ä–æ—Ü–µ–Ω—Ç —Å–∂–∞—Ç–∏—è
 */
export const getCompressionRatio = (originalSize: number, compressedSize: number): number => {
  if (originalSize === 0) return 0;
  return Math.round((1 - compressedSize / originalSize) * 100);
};
