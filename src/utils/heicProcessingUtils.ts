// HEIC processing utility functions

export const isHeicFile = (file: File): boolean => {
  const type = (file.type || '').toLowerCase();
  const name = (file.name || '').toLowerCase();
  
  return type.includes('heic') || 
         type.includes('heif') || 
         name.endsWith('.heic') || 
         name.endsWith('.heif');
};

export const logHeicProcessing = (stage: 'detected' | 'converting' | 'success' | 'error', file?: File, result?: any) => {
  const timestamp = new Date().toISOString();
  
  switch (stage) {
    case 'detected':
      console.log(`üîÑ HEIC Processing [${timestamp}]: –§–∞–π–ª HEIC –æ–±–Ω–∞—Ä—É–∂–µ–Ω`, {
        fileName: file?.name,
        fileSize: file?.size ? `${Math.round(file.size / 1024)}KB` : 'unknown',
        fileType: file?.type,
        status: '–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ JPEG...'
      });
      break;
      
    case 'converting':
      console.log(`‚öôÔ∏è HEIC Processing [${timestamp}]: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...`, {
        fileName: file?.name,
        status: '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è WASM –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏'
      });
      break;
      
    case 'success':
      console.log(`‚úÖ HEIC Processing [${timestamp}]: –£—Å–ø–µ—à–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è HEIC ‚Üí JPEG`, {
        fileName: file?.name,
        originalSize: file?.size ? `${Math.round(file.size / 1024)}KB` : 'unknown',
        convertedSize: result?.blob?.size ? `${Math.round(result.blob.size / 1024)}KB` : 'unknown',
        dimensions: result?.width && result?.height ? `${result.width}x${result.height}` : 'unknown',
        compressionRatio: file?.size && result?.blob?.size 
          ? `${Math.round((1 - result.blob.size / file.size) * 100)}% —Å–∂–∞—Ç–∏–µ` 
          : 'unknown'
      });
      break;
      
    case 'error':
      console.error(`‚ùå HEIC Processing [${timestamp}]: –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏`, {
        fileName: file?.name,
        error: result?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        fallback: '–§–∞–π–ª –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∫–∞–∫ –µ—Å—Ç—å'
      });
      break;
  }
};

export const getHeicStatusMessage = (status: string, fileName?: string): string => {
  const fileInfo = fileName ? ` (${fileName.substring(0, 20)}${fileName.length > 20 ? '...' : ''})` : '';
  const isHeic = fileName?.toLowerCase().match(/\.(heic|heif)$/i);
  
  switch (status) {
    case 'pending':
      return isHeic ? `–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ HEIC —Ñ–∞–π–ª–∞${fileInfo}` : `–û–∂–∏–¥–∞–Ω–∏–µ${fileInfo}`;
    case 'compressing':
      return isHeic 
        ? `–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º HEIC –≤ JPEG${fileInfo}` 
        : `–°–∂–∞—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è${fileInfo}`;
    case 'signing':
      return `–ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ${fileInfo}`;
    case 'uploading':
      return isHeic ? `–ó–∞–≥—Ä—É–∂–∞–µ–º JPEG${fileInfo}` : `–ó–∞–≥—Ä—É–∑–∫–∞${fileInfo}`;  
    case 'completed':
    case 'success':
      return isHeic ? `HEIC –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω ‚úÖ` : `–ì–æ—Ç–æ–≤–æ ‚úÖ`;
    case 'error':
      return isHeic ? `–û—à–∏–±–∫–∞ HEIC ‚ùå` : `–û—à–∏–±–∫–∞ ‚ùå`;
    default:
      return isHeic ? `–û–±—Ä–∞–±–æ—Ç–∫–∞ HEIC${fileInfo}` : `–û–±—Ä–∞–±–æ—Ç–∫–∞${fileInfo}`;  
  }
};