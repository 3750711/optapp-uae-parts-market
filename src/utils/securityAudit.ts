import { supabase } from '@/integrations/supabase/client';

export interface SecurityAuditResult {
  score: number;
  issues: SecurityIssue[];
  recommendations: string[];
  timestamp: Date;
}

export interface SecurityIssue {
  severity: 'low' | 'medium' | 'high' | 'critical';
  category: 'rls' | 'validation' | 'authentication' | 'authorization' | 'data_exposure' | 'configuration';
  description: string;
  table?: string;
  details?: string;
}

class SecurityAuditService {
  
  async performSecurityAudit(): Promise<SecurityAuditResult> {
    console.log('üîí Starting security audit...');
    
    const issues: SecurityIssue[] = [];
    let score = 100;

    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ RLS –ø–æ–ª–∏—Ç–∏–∫
    await this.checkRLSPolicies(issues);
    
    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    await this.checkAuthentication(issues);
    
    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º
    await this.checkDataAccess(issues);
    
    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    this.checkInputValidation(issues);
    
    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    this.checkSecurityConfiguration(issues);

    // –í—ã—á–∏—Å–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—á–µ—Ç
    score = this.calculateSecurityScore(issues);
    
    const recommendations = this.generateRecommendations(issues);
    
    console.log(`üîí Security audit completed. Score: ${score}/100`);
    
    return {
      score,
      issues,
      recommendations,
      timestamp: new Date()
    };
  }

  private async checkRLSPolicies(issues: SecurityIssue[]) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ RLS –Ω–∞ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
      const criticalTables = [
        'profiles', 'products', 'orders', 'stores', 
        'product_images', 'product_videos', 'store_images'
      ];
      
      for (const table of criticalTables) {
        const { data, error } = await supabase
          .from(table)
          .select('id')
          .limit(1);
          
        if (error && error.code === 'PGRST301') {
          // RLS –≤–∫–ª—é—á–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç
          continue;
        } else if (!error) {
          // RLS –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
          issues.push({
            severity: 'high',
            category: 'rls',
            description: `–¢–∞–±–ª–∏—Ü–∞ ${table} –º–æ–∂–µ—Ç –Ω–µ –∏–º–µ—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö RLS –ø–æ–ª–∏—Ç–∏–∫`,
            table,
            details: '–î–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏'
          });
        }
      }
    } catch (error) {
      console.error('Error checking RLS policies:', error);
    }
  }

  private async checkAuthentication(issues: SecurityIssue[]) {
    const { data: { user } } = await supabase.auth.getUser();
    
    if (!user) {
      issues.push({
        severity: 'medium',
        category: 'authentication',
        description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω',
        details: '–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é
    const { data: { session } } = await supabase.auth.getSession();
    
    if (session && session.expires_at && session.expires_at < Date.now() / 1000) {
      issues.push({
        severity: 'medium',
        category: 'authentication',
        description: '–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞',
        details: '–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è'
      });
    }
  }

  private async checkDataAccess(issues: SecurityIssue[]) {
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const { data: otherUsersData, error } = await supabase
        .from('profiles')
        .select('id, email')
        .limit(10);
        
      if (otherUsersData && otherUsersData.length > 1) {
        issues.push({
          severity: 'critical',
          category: 'data_exposure',
          description: '–í–æ–∑–º–æ–∂–Ω–∞—è —É—Ç–µ—á–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
          table: 'profiles',
          details: '–î–æ—Å—Ç—É–ø –∫ –ø—Ä–æ—Ñ–∏–ª—è–º –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
        });
      }
    } catch (error) {
      // –≠—Ç–æ —Ö–æ—Ä–æ—à–æ - RLS –±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø
    }
  }

  private checkInputValidation(issues: SecurityIssue[]) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
    const hasValidation = typeof window !== 'undefined' && 
                         window.location.pathname.includes('admin');
                         
    if (!hasValidation) {
      issues.push({
        severity: 'medium',
        category: 'validation',
        description: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞',
        details: '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å XSS –∏ SQL injection –∑–∞—â–∏—Ç—É'
      });
    }
  }

  private checkSecurityConfiguration(issues: SecurityIssue[]) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTPS
    if (typeof window !== 'undefined' && window.location.protocol !== 'https:') {
      issues.push({
        severity: 'high',
        category: 'configuration',
        description: '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –∑–∞—â–∏—â–µ–Ω–æ HTTPS',
        details: '–î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤ –Ω–µ–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage –Ω–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (typeof window !== 'undefined') {
      const storage = window.localStorage;
      for (let i = 0; i < storage.length; i++) {
        const key = storage.key(i);
        const value = storage.getItem(key || '');
        
        if (key?.toLowerCase().includes('password') || 
            key?.toLowerCase().includes('secret') ||
            value?.includes('eyJ')) { // JWT —Ç–æ–∫–µ–Ω—ã
          issues.push({
            severity: 'medium',
            category: 'data_exposure',
            description: '–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ localStorage',
            details: `–ö–ª—é—á: ${key}`
          });
        }
      }
    }
  }

  private calculateSecurityScore(issues: SecurityIssue[]): number {
    let score = 100;
    
    issues.forEach(issue => {
      switch (issue.severity) {
        case 'critical':
          score -= 25;
          break;
        case 'high':
          score -= 15;
          break;
        case 'medium':
          score -= 8;
          break;
        case 'low':
          score -= 3;
          break;
      }
    });
    
    return Math.max(0, score);
  }

  private generateRecommendations(issues: SecurityIssue[]): string[] {
    const recommendations: string[] = [];
    
    const criticalIssues = issues.filter(i => i.severity === 'critical');
    const highIssues = issues.filter(i => i.severity === 'high');
    
    if (criticalIssues.length > 0) {
      recommendations.push('üö® –ö–†–ò–¢–ò–ß–ù–û: –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏');
    }
    
    if (highIssues.length > 0) {
      recommendations.push('‚ö†Ô∏è –ò—Å–ø—Ä–∞–≤—å—Ç–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤—ã—Å–æ–∫–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞');
    }
    
    if (issues.some(i => i.category === 'rls')) {
      recommendations.push('üîí –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ RLS –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü');
    }
    
    if (issues.some(i => i.category === 'validation')) {
      recommendations.push('‚úÖ –î–æ–±–∞–≤—å—Ç–µ –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞');
    }
    
    if (issues.some(i => i.category === 'authentication')) {
      recommendations.push('üîê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
    }
    
    recommendations.push('üìä –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–æ–¥–∏—Ç–µ –∞—É–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');
    recommendations.push('üõ°Ô∏è –í–∫–ª—é—á–∏—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ');
    
    return recommendations;
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const securityAudit = new SecurityAuditService();

// –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
export const performQuickSecurityCheck = async (): Promise<boolean> => {
  const result = await securityAudit.performSecurityAudit();
  return result.score >= 80; // –°—á–∏—Ç–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –µ—Å–ª–∏ —Å—á–µ—Ç >= 80
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
export const getDetailedSecurityReport = async (): Promise<SecurityAuditResult> => {
  return await securityAudit.performSecurityAudit();
};
