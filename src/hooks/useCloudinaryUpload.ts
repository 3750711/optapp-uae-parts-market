import { useState, useCallback } from 'react';
import { toast } from "@/hooks/use-toast";
import { uploadToCloudinary } from "@/utils/cloudinaryUpload";
import { CLOUDINARY_CONFIG } from '@/config/cloudinary';

// === –°–¢–ê–†–´–ô –•–£–ö (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π useCloudinaryUpload) ===
interface CloudinaryUploadProgress {
  fileId: string;
  fileName: string;
  progress: number;
  status: 'pending' | 'uploading' | 'processing' | 'success' | 'error';
  error?: string;
  url?: string;
  mainImageUrl?: string;
  publicId?: string;
}

interface CloudinaryUploadOptions {
  productId?: string;
  uploadToCloudinary?: boolean;
}

export const useCloudinaryUpload = () => {
  const [isUploading, setIsUploading] = useState(false);
  const [uploadProgress, setUploadProgress] = useState<CloudinaryUploadProgress[]>([]);

  const uploadFile = useCallback(async (
    file: File,
    fileId: string,
    options: CloudinaryUploadOptions = {}
  ): Promise<string> => {
    try {
      console.log('üöÄ Starting Cloudinary-only upload process for:', file.name);

      // Update progress - starting upload
      setUploadProgress(prev => prev.map(p => 
        p.fileId === fileId 
          ? { ...p, status: 'uploading', progress: 10 }
          : p
      ));

      // Create a blob URL for preview
      const blobUrl = URL.createObjectURL(file);

      setUploadProgress(prev => prev.map(p => 
        p.fileId === fileId 
          ? { ...p, progress: 50, url: blobUrl }
          : p
      ));

      // Upload directly to Cloudinary
      setUploadProgress(prev => prev.map(p => 
        p.fileId === fileId 
          ? { ...p, status: 'processing', progress: 70 }
          : p
      ));

      console.log('‚òÅÔ∏è Starting Cloudinary upload...');
      const cloudinaryResult = await uploadToCloudinary(file, options.productId);

      // Clean up blob URL
      URL.revokeObjectURL(blobUrl);

      if (cloudinaryResult.success && cloudinaryResult.mainImageUrl) {
        console.log('‚úÖ Cloudinary upload successful:', cloudinaryResult.publicId);
        
        setUploadProgress(prev => prev.map(p => 
          p.fileId === fileId 
            ? { 
                ...p, 
                status: 'success', 
                progress: 100,
                mainImageUrl: cloudinaryResult.mainImageUrl,
                publicId: cloudinaryResult.publicId
              }
            : p
        ));

        return cloudinaryResult.mainImageUrl;
      } else {
        throw new Error(cloudinaryResult.error || 'Cloudinary upload failed');
      }

    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Upload failed';
      console.error('üí• Upload error:', errorMessage);

      setUploadProgress(prev => prev.map(p => 
        p.fileId === fileId 
          ? { ...p, status: 'error', error: errorMessage }
          : p
      ));

      throw error;
    }
  }, []);

  const uploadFiles = useCallback(async (
    files: File[],
    options: CloudinaryUploadOptions = {}
  ): Promise<string[]> => {
    setIsUploading(true);

    // Initialize progress tracking
    const initialProgress: CloudinaryUploadProgress[] = files.map((file, index) => ({
      fileId: `file-${Date.now()}-${index}`,
      fileName: file.name,
      progress: 0,
      status: 'pending'
    }));
    
    setUploadProgress(initialProgress);

    const uploadedUrls: string[] = [];
    const errors: string[] = [];

    try {
      for (let i = 0; i < files.length; i++) {
        try {
          const fileId = initialProgress[i].fileId;
          const url = await uploadFile(files[i], fileId, options);
          uploadedUrls.push(url);
        } catch (error) {
          errors.push(`${files[i].name}: ${error instanceof Error ? error.message : 'Unknown error'}`);
        }
      }

      if (uploadedUrls.length > 0) {
        toast({
          title: "–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
          description: `–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${uploadedUrls.length} –∏–∑ ${files.length} —Ñ–∞–π–ª–æ–≤ –≤ Cloudinary`,
        });
      }

      if (errors.length > 0) {
        toast({
          title: "–û—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏",
          description: `–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å ${errors.length} —Ñ–∞–π–ª–æ–≤ –≤ Cloudinary`,
          variant: "destructive",
        });
      }

      return uploadedUrls;
    } finally {
      setIsUploading(false);
    }
  }, [uploadFile]);

  const clearProgress = useCallback(() => {
    setUploadProgress([]);
  }, []);

  return {
    isUploading,
    uploadProgress,
    uploadFiles,
    clearProgress
  };
};

// === –ù–û–í–´–ô –•–£–ö (Cloudinary Upload Widget) ===
interface CloudinaryUploadResult {
  public_id: string;
  secure_url: string;
  url: string;
  width: number;
  height: number;
  format: string;
  bytes: number;
}

interface UploadProgress {
  fileId: string;
  fileName: string;
  progress: number;
  status: 'pending' | 'uploading' | 'success' | 'error';
  error?: string;
  result?: CloudinaryUploadResult;
}

interface ValidationError {
  file: string;
  error: string;
}

export const useNewCloudinaryUpload = () => {
  const [isUploading, setIsUploading] = useState(false);
  const [uploadProgress, setUploadProgress] = useState<UploadProgress[]>([]);
  const [validationErrors, setValidationErrors] = useState<ValidationError[]>([]);

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
  const validateFiles = useCallback((files: FileList | File[]): ValidationError[] => {
    const errors: ValidationError[] = [];
    const fileArray = Array.isArray(files) ? files : Array.from(files);

    fileArray.forEach(file => {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
      if (file.size > CLOUDINARY_CONFIG.upload.maxFileSize) {
        errors.push({
          file: file.name,
          error: `–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º—É–º: ${CLOUDINARY_CONFIG.upload.maxFileSize / 1024 / 1024}MB`
        });
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞
      const fileExtension = file.name.split('.').pop()?.toLowerCase() as any;
      if (!fileExtension || !CLOUDINARY_CONFIG.upload.allowedFormats.includes(fileExtension)) {
        errors.push({
          file: file.name,
          error: `–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç. –†–∞–∑—Ä–µ—à–µ–Ω—ã: ${CLOUDINARY_CONFIG.upload.allowedFormats.join(', ')}`
        });
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ MIME
      if (!file.type.startsWith('image/')) {
        errors.push({
          file: file.name,
          error: '–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º'
        });
      }
    });

    return errors;
  }, []);

  const openUploadWidget = useCallback((
    onSuccess: (results: CloudinaryUploadResult[]) => void,
    options: {
      multiple?: boolean;
      maxFiles?: number;
      folder?: string;
      productId?: string;
    } = {}
  ) => {
    setValidationErrors([]);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º Cloudinary Upload Widget –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
    if (typeof window !== 'undefined' && !(window as any).cloudinary) {
      const script = document.createElement('script');
      script.src = 'https://upload-widget.cloudinary.com/global/all.js';
      script.onload = () => initializeWidget();
      document.head.appendChild(script);
    } else {
      initializeWidget();
    }

    function initializeWidget() {
      const cloudinary = (window as any).cloudinary;
      
      // –°–æ–∑–¥–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π ID —Å —É—á–µ—Ç–æ–º productId
      const publicIdPrefix = options.productId ? `products/${options.productId}` : 'products';
      
      const widget = cloudinary.createUploadWidget(
        {
          cloudName: CLOUDINARY_CONFIG.cloudName,
          uploadPreset: CLOUDINARY_CONFIG.uploadPresets.product,
          folder: options.folder || CLOUDINARY_CONFIG.upload.folder,
          publicIdPrefix: publicIdPrefix,
          multiple: options.multiple ?? true,
          maxFiles: options.maxFiles || CLOUDINARY_CONFIG.upload.maxFiles,
          maxFileSize: CLOUDINARY_CONFIG.upload.maxFileSize,
          clientAllowedFormats: CLOUDINARY_CONFIG.upload.allowedFormats,
          sources: CLOUDINARY_CONFIG.widget.sources,
          showAdvancedOptions: CLOUDINARY_CONFIG.widget.showAdvancedOptions,
          cropping: CLOUDINARY_CONFIG.widget.cropping,
          theme: CLOUDINARY_CONFIG.widget.theme,
          language: CLOUDINARY_CONFIG.widget.language,
          text: CLOUDINARY_CONFIG.widget.text,
          styles: CLOUDINARY_CONFIG.widget.styles,
          
          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
          transformation: [
            {
              quality: CLOUDINARY_CONFIG.upload.quality,
              format: 'auto'
            }
          ]
        },
        (error: any, result: any) => {
          if (!error && result && result.event === 'success') {
            const uploadResult: CloudinaryUploadResult = {
              public_id: result.info.public_id,
              secure_url: result.info.secure_url,
              url: result.info.url,
              width: result.info.width,
              height: result.info.height,
              format: result.info.format,
              bytes: result.info.bytes
            };

            console.log('‚úÖ Cloudinary upload success:', {
              publicId: uploadResult.public_id,
              url: uploadResult.secure_url,
              size: `${uploadResult.width}x${uploadResult.height}`,
              bytes: uploadResult.bytes
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            setUploadProgress(prev => prev.map(p => 
              p.fileName === result.info.original_filename 
                ? { ...p, status: 'success', progress: 100, result: uploadResult }
                : p
            ));
          }

          if (result && result.event === 'close') {
            // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            const successResults = uploadProgress
              .filter(p => p.status === 'success' && p.result)
              .map(p => p.result!) as CloudinaryUploadResult[];
            
            if (successResults.length > 0) {
              onSuccess(successResults);
              toast({
                title: "–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
                description: `–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${successResults.length} —Ñ–∞–π–ª–æ–≤ –≤ Cloudinary`,
              });
            }
            
            setIsUploading(false);
            setUploadProgress([]);
          }

          if (result && result.event === 'upload') {
            const progress = Math.round((result.info.bytes / result.info.total_bytes) * 100);
            setUploadProgress(prev => {
              const existing = prev.find(p => p.fileName === result.info.original_filename);
              if (existing) {
                return prev.map(p => 
                  p.fileName === result.info.original_filename 
                    ? { ...p, progress, status: 'uploading' }
                    : p
                );
              } else {
                return [...prev, {
                  fileId: `file-${Date.now()}-${Math.random()}`,
                  fileName: result.info.original_filename,
                  progress,
                  status: 'uploading'
                }];
              }
            });
          }

          if (error) {
            console.error('‚ùå Cloudinary upload error:', error);
            setValidationErrors(prev => [...prev, {
              file: 'upload',
              error: error.message || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞"
            }]);
            
            toast({
              title: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏",
              description: error.message || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞",
              variant: "destructive"
            });
          }
        }
      );

      setIsUploading(true);
      widget.open();
    }
  }, [uploadProgress]);

  // –ú–µ—Ç–æ–¥ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
  const uploadWithValidation = useCallback(async (
    files: FileList | File[],
    options: {
      productId?: string;
      folder?: string;
      onProgress?: (progress: UploadProgress[]) => void;
    } = {}
  ): Promise<string[]> => {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤
    const errors = validateFiles(files);
    if (errors.length > 0) {
      setValidationErrors(errors);
      errors.forEach(error => {
        toast({
          title: "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
          description: `${error.file}: ${error.error}`,
          variant: "destructive"
        });
      });
      return [];
    }

    // –ó–∞–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ –≤–∏–¥–∂–µ—Ç
    return new Promise((resolve) => {
      openUploadWidget(
        (results) => {
          const urls = results.map(result => result.secure_url);
          resolve(urls);
        },
        {
          multiple: true,
          maxFiles: Array.from(files).length,
          productId: options.productId,
          folder: options.folder
        }
      );
    });
  }, [openUploadWidget, validateFiles]);

  const clearProgress = useCallback(() => {
    setUploadProgress([]);
    setValidationErrors([]);
  }, []);

  const clearErrors = useCallback(() => {
    setValidationErrors([]);
  }, []);

  return {
    isUploading,
    uploadProgress,
    validationErrors,
    openUploadWidget,
    uploadWithValidation,
    validateFiles,
    clearProgress,
    clearErrors
  };
};