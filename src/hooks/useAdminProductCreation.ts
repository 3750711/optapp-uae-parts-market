
import { useState } from "react";
import { useNavigate } from "react-router-dom";
import { useToast } from "@/hooks/use-toast";
import { supabase } from "@/integrations/supabase/client";
import { AdminProductFormValues } from "@/schemas/adminProductSchema";
import { extractPublicIdFromUrl } from "@/utils/cloudinaryUtils";

interface CreateProductParams {
  values: AdminProductFormValues;
  imageUrls: string[];
  videoUrls: string[];
  primaryImage?: string;
  sellers: Array<{ id: string; full_name: string; opt_id?: string }>;
  brands: Array<{ id: string; name: string }>;
  brandModels: Array<{ id: string; name: string; brand_id: string }>;
}

export const useAdminProductCreation = () => {
  const navigate = useNavigate();
  const { toast } = useToast();
  const [isCreating, setIsCreating] = useState(false);

  const createProductWithTransaction = async ({
    values,
    imageUrls,
    videoUrls,
    primaryImage,
    sellers,
    brands,
    brandModels
  }: CreateProductParams) => {
    if (isCreating) {
      console.warn("Product creation already in progress");
      return;
    }

    setIsCreating(true);
    
    // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
    console.log("üöÄ Starting admin product creation:", {
      title: values.title,
      sellerId: values.sellerId,
      imageCount: imageUrls.length,
      videoCount: videoUrls.length,
      timestamp: new Date().toISOString()
    });

    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º
      if (imageUrls.length === 0) {
        throw new Error("–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é");
      }

      const selectedBrand = brands.find(brand => brand.id === values.brandId);
      const selectedSeller = sellers.find(seller => seller.id === values.sellerId);
      
      if (!selectedBrand) {
        throw new Error("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –º–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è");
      }

      if (!selectedSeller) {
        throw new Error("–ù–µ –Ω–∞–π–¥–µ–Ω –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–¥–∞–≤–µ—Ü");
      }

      let modelName = null;
      if (values.modelId) {
        const selectedModel = brandModels.find(model => model.id === values.modelId);
        modelName = selectedModel?.name || null;
      }

      // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      const { data: product, error: productError } = await supabase
        .from('products')
        .insert({
          title: values.title,
          price: Number(values.price),
          condition: "–ù–æ–≤—ã–π",
          brand: selectedBrand.name,
          model: modelName,
          description: values.description || null,
          seller_id: values.sellerId,
          seller_name: selectedSeller.full_name,
          status: 'active',
          place_number: Number(values.placeNumber) || 1,
          delivery_price: Number(values.deliveryPrice) || 0,
        })
        .select()
        .single();

      if (productError) {
        console.error("‚ùå Product creation failed:", productError);
        throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: ${productError.message}`);
      }

      console.log("‚úÖ Product created successfully:", product.id);

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const imageErrors: string[] = [];
      for (const url of imageUrls) {
        const { error: imageError } = await supabase
          .from('product_images')
          .insert({
            product_id: product.id,
            url: url,
            is_primary: url === primaryImage
          });
          
        if (imageError) {
          console.error("‚ùå Image insert failed:", imageError);
          imageErrors.push(`–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${url}: ${imageError.message}`);
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä —Å Cloudinary –¥–∞–Ω–Ω—ã–º–∏ –µ—Å–ª–∏ –µ—Å—Ç—å primary image
      if (primaryImage) {
        try {
          const publicId = extractPublicIdFromUrl(primaryImage);
          if (publicId) {
            const { error: updateError } = await supabase
              .from('products')
              .update({
                cloudinary_public_id: publicId,
                cloudinary_url: primaryImage
              })
              .eq('id', product.id);

            if (updateError) {
              console.error("‚ö†Ô∏è Cloudinary data update failed:", updateError);
              // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
            }
          }
        } catch (cloudinaryError) {
          console.error("‚ö†Ô∏è Cloudinary processing error:", cloudinaryError);
          // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        }
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –µ—Å–ª–∏ –µ—Å—Ç—å
      const videoErrors: string[] = [];
      for (const videoUrl of videoUrls) {
        const { error: videoError } = await supabase
          .from('product_videos')
          .insert({
            product_id: product.id,
            url: videoUrl
          });
          
        if (videoError) {
          console.error("‚ùå Video insert failed:", videoError);
          videoErrors.push(`–í–∏–¥–µ–æ ${videoUrl}: ${videoError.message}`);
        }
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –µ—Å–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç)
      try {
        await supabase.functions.invoke('send-telegram-notification', {
          body: { productId: product.id }
        });
      } catch (notificationError) {
        console.error("‚ö†Ô∏è Notification failed:", notificationError);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      let successMessage = `–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞ ${selectedSeller.full_name}`;
      
      if (imageErrors.length > 0) {
        successMessage += `\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${imageErrors.length} –∏–∑ ${imageUrls.length}`;
      }
      
      if (videoErrors.length > 0) {
        successMessage += `\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–∏–¥–µ–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${videoErrors.length} –∏–∑ ${videoUrls.length}`;
      }

      toast({
        title: "–¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω",
        description: successMessage,
      });

      console.log("‚úÖ Product creation completed successfully:", {
        productId: product.id,
        imageErrors: imageErrors.length,
        videoErrors: videoErrors.length
      });

      return product;

    } catch (error) {
      console.error("üí• Critical error in product creation:", error);
      
      toast({
        title: "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞",
        description: error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        variant: "destructive",
      });
      
      throw error;
    } finally {
      setIsCreating(false);
    }
  };

  return {
    createProductWithTransaction,
    isCreating
  };
};
