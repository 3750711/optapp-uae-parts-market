import { useInfiniteQuery } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { LogisticsFilters } from '@/types/logisticsFilters';
import { Database } from "@/integrations/supabase/types";

const ITEMS_PER_PAGE = 20;

export interface SortConfig {
  field: string;
  direction: 'asc' | 'desc';
}

type ContainerStatus = 'waiting' | 'sent_from_uae' | 'transit_iran' | 'to_kazakhstan' | 'customs' | 'cleared_customs' | 'received';

export type Order = Database['public']['Tables']['orders']['Row'] & {
  buyer: {
    full_name: string | null;
    location: string | null;
    opt_id: string | null;
  } | null;
  seller: {
    full_name: string | null;
    location: string | null;
    opt_id: string | null;
  } | null;
  containers: {
    status: ContainerStatus | null;
  }[] | null;
};

export const useServerFilteredOrders = (
  appliedFilters: LogisticsFilters,
  sortConfig: SortConfig
) => {
  return useInfiniteQuery({
    queryKey: ['logistics-orders-filtered', appliedFilters, sortConfig],
    queryFn: async ({ pageParam = 0 }) => {
      console.log('üîç [ServerFilter] Starting query with:', {
        pageParam,
        searchTerm: appliedFilters.searchTerm,
        hasSearch: !!appliedFilters.searchTerm.trim()
      });
      
      const from = pageParam * ITEMS_PER_PAGE;
      const to = from + ITEMS_PER_PAGE - 1;

      console.log('üìç [Pagination] Offset calculation:', {
        pageParam,
        ITEMS_PER_PAGE,
        from,
        to,
        willFetch: `orders[${from}...${to}]`
      });

      // 1. –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
      let query = supabase
        .from('orders')
        .select(`
          *,
          buyer:profiles!orders_buyer_id_fkey (full_name, location, opt_id),
          seller:profiles!orders_seller_id_fkey (full_name, location, opt_id),
          containers(status)
        `, { count: 'exact' });

      // === 2. SEARCH TERM (–ø–æ 5 –ø–æ–ª—è–º + —Ü–µ–Ω–∞/–Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞) ===
      if (appliedFilters.searchTerm.trim()) {
        // –£–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –º–∏–Ω—É—Å –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏
        const term = appliedFilters.searchTerm.trim().replace(/^-+/, '');
        
        // –ï—Å–ª–∏ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞—è - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫
        if (!term) {
          console.log('‚ö†Ô∏è [Search] Empty term after cleanup, skipping');
          return { orders: [], totalCount: 0 };
        }
        
        const isNumeric = /^\d+(\.\d+)?$/.test(term);
        
        console.log('üîé [Search Query]', {
          originalTerm: appliedFilters.searchTerm.trim(),
          cleanedTerm: term,
          isNumeric,
          willUseExactMatch: isNumeric
        });
        
        if (isNumeric) {
          if (term.includes('.')) {
            // –î—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ - —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ —Ü–µ–Ω–µ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
            console.log('‚úÖ [Search] Exact match for price/delivery:', term);
            query = query.or(`price.eq.${parseFloat(term)},delivery_price_confirm.eq.${parseFloat(term)}`.replace(/\s+/g, ''));
          } else {
            // –¶–µ–ª–æ–µ —á–∏—Å–ª–æ - —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π
            console.log('‚úÖ [Search] Exact match for order/price/delivery:', term);
            const num = parseFloat(term);
            query = query.or(`order_number.eq.${parseInt(term)},price.eq.${num},delivery_price_confirm.eq.${num}`.replace(/\s+/g, ''));
          }
        } else {
          // –ì–ò–ë–†–ò–î–ù–´–ô –ü–û–ò–°–ö: —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –ò –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤
          
          console.log('üîé [Search] Hybrid search mode', {
            originalTerm: term,
            hasSpaces: term.includes(' ')
          });
          
          // 1Ô∏è‚É£ –ë–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫ –° –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ–±–µ–ª–∞–º–∏
          let searchConditions = `title.ilike.%${term}%,brand.ilike.%${term}%,model.ilike.%${term}%,description.ilike.%${term}%,container_number.ilike.%${term}%`;

          // 2Ô∏è‚É£ –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–µ–ª—ã, –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ë–ï–ó –ø—Ä–æ–±–µ–ª–æ–≤
          const termWithoutSpaces = term.replace(/\s+/g, '');
          if (termWithoutSpaces !== term) {
            console.log('üìù [Search] Adding no-space fallback:', termWithoutSpaces);
            searchConditions += `,title.ilike.%${termWithoutSpaces}%,brand.ilike.%${termWithoutSpaces}%,model.ilike.%${termWithoutSpaces}%,description.ilike.%${termWithoutSpaces}%,container_number.ilike.%${termWithoutSpaces}%`;
          }

          // 3Ô∏è‚É£ –ï—Å–ª–∏ –µ—Å—Ç—å —á–∏—Å–ª–æ–≤–∞—è —á–∞—Å—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–∏—Å–∫ –ø–æ —á–∏—Å–ª–æ–≤—ã–º –ø–æ–ª—è–º
          const numericPart = term.match(/\d+(\.\d+)?/)?.[0];
          if (numericPart) {
            const numValue = parseFloat(numericPart);
            const intValue = parseInt(numericPart, 10);
            console.log('üî¢ [Search] Adding numeric search:', { intValue, numValue });
            searchConditions += `,order_number.eq.${intValue},price.eq.${numValue},delivery_price_confirm.eq.${numValue}`;
          }

          // –ü–µ—Ä–µ–¥–∞—ë–º –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
          query = query.or(searchConditions);
        }
      }

      // 3. –§–ò–õ–¨–¢–†: –ü—Ä–æ–¥–∞–≤—Ü—ã
      if (appliedFilters.sellerIds.length > 0) {
        query = query.in('seller_id', appliedFilters.sellerIds);
      }

      // 4. –§–ò–õ–¨–¢–†: –ü–æ–∫—É–ø–∞—Ç–µ–ª–∏
      if (appliedFilters.buyerIds.length > 0) {
        query = query.in('buyer_id', appliedFilters.buyerIds);
      }

      // 5. –§–ò–õ–¨–¢–†: –°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–∞
      if (appliedFilters.orderStatuses.length > 0) {
        query = query.in('status', appliedFilters.orderStatuses);
      }

      // 6. –§–ò–õ–¨–¢–†: –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ
      if (appliedFilters.readyForShipment !== null && appliedFilters.readyForShipment !== undefined) {
        query = query.eq('ready_for_shipment', appliedFilters.readyForShipment);
      }

      // 7-9. –§–ò–õ–¨–¢–†–´ —á–µ—Ä–µ–∑ RPC (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)
      const rpcCalls: Promise<string[] | null>[] = [];

      // –î–æ–±–∞–≤–ª—è–µ–º RPC –≤—ã–∑–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
      if (appliedFilters.containerNumbers.length > 0) {
        rpcCalls.push(
          supabase.rpc('filter_orders_by_containers', { 
            container_numbers: appliedFilters.containerNumbers 
          }).then(({ data, error }) => {
            if (error) throw error;
            return data && data.length > 0 ? data.map(row => row.order_id) : [];
          })
        );
      }

      // –î–æ–±–∞–≤–ª—è–µ–º RPC –≤—ã–∑–æ–≤ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
      if (appliedFilters.containerStatuses.length > 0) {
        rpcCalls.push(
          supabase.rpc('filter_orders_by_container_statuses', { 
            container_statuses: appliedFilters.containerStatuses 
          }).then(({ data, error }) => {
            if (error) throw error;
            return data && data.length > 0 ? data.map(row => row.order_id) : [];
          })
        );
      }

      // –î–æ–±–∞–≤–ª—è–µ–º RPC –≤—ã–∑–æ–≤ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ –æ—Ç–≥—Ä—É–∑–∫–∏
      if (appliedFilters.shipmentStatuses.length > 0) {
        rpcCalls.push(
          supabase.rpc('filter_orders_by_shipment_statuses', { 
            shipment_statuses: appliedFilters.shipmentStatuses 
          }).then(({ data, error }) => {
            if (error) throw error;
            return data && data.length > 0 ? data.map(row => row.order_id) : [];
          })
        );
      }

      let containerFilteredIds: string[] | null = null;
      let containerStatusFilteredIds: string[] | null = null;
      let shipmentStatusFilteredIds: string[] | null = null;

      // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ RPC –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      if (rpcCalls.length > 0) {
        const results = await Promise.all(rpcCalls);
        
        // –ï—Å–ª–∏ —Ö–æ—Ç—å –æ–¥–∏–Ω –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ - –Ω–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
        if (results.some(r => r.length === 0)) {
          return { orders: [], totalCount: 0 };
        }

        // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º
        let resultIndex = 0;
        if (appliedFilters.containerNumbers.length > 0) {
          containerFilteredIds = results[resultIndex++];
        }
        if (appliedFilters.containerStatuses.length > 0) {
          containerStatusFilteredIds = results[resultIndex++];
        }
        if (appliedFilters.shipmentStatuses.length > 0) {
          shipmentStatusFilteredIds = results[resultIndex++];
        }
      }

      // –ü—Ä–∏–º–µ–Ω—è–µ–º RPC —Ñ–∏–ª—å—Ç—Ä—ã —á–µ—Ä–µ–∑ intersection (AND –ª–æ–≥–∏–∫–∞)
      const rpcFilteredIds = [
        containerFilteredIds,
        containerStatusFilteredIds,
        shipmentStatusFilteredIds
      ].filter(ids => ids !== null);

      if (rpcFilteredIds.length > 0) {
        // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–∞—Å—Å–∏–≤–æ–≤ (AND –ª–æ–≥–∏–∫–∞)
        const intersectedIds = rpcFilteredIds.reduce((acc, ids) => {
          if (acc === null) return ids;
          return acc!.filter(id => ids!.includes(id));
        }, null as string[] | null);

        if (intersectedIds && intersectedIds.length > 0) {
          query = query.in('id', intersectedIds);
        } else {
          return { orders: [], totalCount: 0 };
        }
      }

      // 9. –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
      if (sortConfig.field && sortConfig.direction) {
        query = query.order(sortConfig.field, { ascending: sortConfig.direction === 'asc' });
      } else {
        query = query.order('created_at', { ascending: false });
      }

      // 10. –ü–∞–≥–∏–Ω–∞—Ü–∏—è
      const { data: orders, error, count } = await query.range(from, to);

      if (error) throw error;

      console.log('‚úÖ [ServerFilter] Query completed:', {
        ordersCount: orders?.length || 0,
        totalCount: count,
        searchTerm: appliedFilters.searchTerm
      });
      
      return {
        orders: orders as Order[],
        totalCount: count || 0
      };
    },
    getNextPageParam: (lastPage, allPages) => {
      const totalCount = lastPage?.totalCount || 0;
      const loadedOrders = allPages.reduce((acc, page) => acc + (page.orders?.length || 0), 0);
      
      // –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–∞–≤–∏–ª–æ: –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–æ >= –≤—Å–µ–≥–æ, –±–æ–ª—å—à–µ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ—Ç
      const hasMore = totalCount > 0 && loadedOrders < totalCount;
      const nextPageParam = hasMore ? allPages.length : undefined;
      
      console.log('üîÑ [Pagination] getNextPageParam:', {
        loadedOrders,
        totalCount,
        currentPages: allPages.length,
        hasMore,
        nextPageParam,
        calculation: hasMore ? `${allPages.length} √ó 20 = ${allPages.length * 20} offset` : 'no more pages'
      });
      
      return nextPageParam;
    },
    initialPageParam: 0,
    staleTime: 30000, // 30 —Å–µ–∫—É–Ω–¥
    gcTime: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç
    refetchOnWindowFocus: false,
    refetchOnMount: false,
    maxPages: 100 // –ú–∞–∫—Å–∏–º—É–º 2000 –∑–∞–∫–∞–∑–æ–≤ (100 —Å—Ç—Ä–∞–Ω–∏—Ü √ó 20 —Ç–æ–≤–∞—Ä–æ–≤)
  });
};
