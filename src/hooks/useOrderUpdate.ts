
import { useState } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { toast } from '@/hooks/use-toast';

interface UseOrderUpdateProps {
  orderId: string;
  onSuccess?: () => void;
}

export const useOrderUpdate = ({ orderId, onSuccess }: UseOrderUpdateProps) => {
  const [isUpdating, setIsUpdating] = useState(false);

  const updateOrderMedia = async (images?: string[], videos?: string[]) => {
    if (!orderId) {
      console.error('Order ID is required');
      return false;
    }

    setIsUpdating(true);
    try {
      console.log('üîÑ Updating order media:', orderId, { 
        images: images?.length, 
        videos: videos?.length 
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é update_order_media
      if (images) {
        const { error: imagesError } = await supabase.rpc('update_order_media', {
          p_order_id: orderId,
          p_images: images,
          p_video_url: null // –ù–µ —Ç—Ä–æ–≥–∞–µ–º video_url
        });

        if (imagesError) {
          console.error('‚ùå Error updating order images:', imagesError);
          toast({
            title: "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è",
            description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∑–∞–∫–∞–∑–µ",
            variant: "destructive",
          });
          return false;
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ —Ç–∞–±–ª–∏—Ü—É order_videos
      if (videos) {
        // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–∏–¥–µ–æ
        const { error: deleteError } = await supabase
          .from('order_videos')
          .delete()
          .eq('order_id', orderId);

        if (deleteError) {
          console.error('‚ùå Error deleting existing videos:', deleteError);
          toast({
            title: "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è",
            description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤–∏–¥–µ–æ –≤ –∑–∞–∫–∞–∑–µ",
            variant: "destructive",
          });
          return false;
        }

        // –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –≤–∏–¥–µ–æ
        if (videos.length > 0) {
          const videosToInsert = videos.map(url => ({
            order_id: orderId,
            url: url
          }));

          const { error: insertError } = await supabase
            .from('order_videos')
            .insert(videosToInsert);

          if (insertError) {
            console.error('‚ùå Error inserting new videos:', insertError);
            toast({
              title: "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è",
              description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∏–¥–µ–æ –≤ –∑–∞–∫–∞–∑–µ",
              variant: "destructive",
            });
            return false;
          }
        }
      }

      console.log('‚úÖ Order media updated successfully');
      onSuccess?.();
      return true;
    } catch (error) {
      console.error('‚ùå Error in updateOrderMedia:', error);
      toast({
        title: "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è",
        description: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤",
        variant: "destructive",
      });
      return false;
    } finally {
      setIsUpdating(false);
    }
  };

  return {
    updateOrderMedia,
    isUpdating
  };
};
