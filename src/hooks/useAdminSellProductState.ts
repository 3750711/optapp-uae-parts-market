
import { useState, useCallback, useEffect } from 'react';
import { useToast } from '@/hooks/use-toast';
import { supabase } from '@/integrations/supabase/client';
import { useOptimizedFormAutosave } from './useOptimizedFormAutosave';
import { Product } from '@/types/product';

interface BuyerProfile {
  id: string;
  full_name: string;
  opt_id: string;
  telegram?: string;
}

interface SellProductState {
  step: number; // 1 - –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞, 2 - –≤—ã–±–æ—Ä –ø–æ–∫—É–ø–∞—Ç–µ–ª—è, 3 - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
  selectedProduct: Product | null;
  selectedBuyer: BuyerProfile | null;
  buyers: BuyerProfile[];
  isLoading: boolean;
  createdOrder: any;
  createdOrderImages: string[];
}

interface AutosaveData {
  step: number;
  selectedProduct: Product | null;
  selectedBuyer: BuyerProfile | null;
}

const BUYERS_CACHE_KEY = 'adminSellProduct_buyers';
const CACHE_DURATION = 30 * 60 * 1000; // 30 minutes

export const useAdminSellProductState = () => {
  const { toast } = useToast();
  
  const [state, setState] = useState<SellProductState>({
    step: 1,
    selectedProduct: null,
    selectedBuyer: null,
    buyers: [],
    isLoading: false,
    createdOrder: null,
    createdOrderImages: []
  });

  // Prepare autosave data
  const autosaveData: AutosaveData = {
    step: state.step,
    selectedProduct: state.selectedProduct,
    selectedBuyer: state.selectedBuyer,
  };

  // Setup autosave
  const {
    loadSavedData,
    clearSavedData,
    draftExists,
    saveNow
  } = useOptimizedFormAutosave({
    key: 'admin_sell_product',
    data: autosaveData,
    delay: 2000,
    enabled: !!state.selectedProduct || !!state.selectedBuyer || state.step > 1,
    excludeFields: []
  });

  const updateState = useCallback((updates: Partial<SellProductState>) => {
    setState(prevState => ({ ...prevState, ...updates }));
  }, []);

  // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
  const loadBuyers = useCallback(async () => {
    console.log('üîÑ Starting buyer loading process...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π
    const cached = localStorage.getItem(BUYERS_CACHE_KEY);
    
    if (cached) {
      try {
        const { data, timestamp } = JSON.parse(cached);
        if (Date.now() - timestamp < CACHE_DURATION) {
          console.log('‚úÖ Using cached buyers:', data.length, 'buyers found');
          updateState({ buyers: data });
          return;
        }
        console.log('‚è∞ Cache expired, loading fresh data...');
      } catch (error) {
        console.error('‚ùå Error parsing cached buyers:', error);
        localStorage.removeItem(BUYERS_CACHE_KEY);
      }
    } else {
      console.log('üì≠ No cached buyers found, loading from database...');
    }

    updateState({ isLoading: true });
    
    try {
      console.log('üîç Attempting RPC call to get_active_buyers...');
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
      const { data, error } = await supabase.rpc('get_active_buyers', {
        limit_count: 100 // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      });

      if (error) {
        console.warn('‚ö†Ô∏è RPC function failed, falling back to direct query. RPC Error:', {
          message: error.message,
          code: error.code,
          details: error.details
        });
        
        // Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –µ—Å–ª–∏ RPC —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
        console.log('üîÑ Attempting direct query to profiles table...');
        const { data: fallbackData, error: fallbackError } = await supabase
          .from("profiles")
          .select("id, full_name, opt_id, telegram")
          .eq("user_type", "buyer")
          .eq("verification_status", "verified") // –¢–æ–ª—å–∫–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏
          .not("opt_id", "is", null)
          .neq("opt_id", "")
          .order("opt_id")
          .limit(100);

        if (fallbackError) {
          console.error('‚ùå Direct query failed:', {
            message: fallbackError.message,
            code: fallbackError.code,
            details: fallbackError.details,
            hint: fallbackError.hint
          });
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π –¥–æ—Å—Ç—É–ø–∞
          if (fallbackError.code === 'PGRST301' || fallbackError.message.includes('permission')) {
            console.error('üö´ Access denied - RLS policy may be blocking seller access to buyer profiles');
            throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—è–º –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞.');
          }
          
          throw fallbackError;
        }
        
        const buyers = (fallbackData || []).filter(buyer => 
          buyer.opt_id && buyer.opt_id.trim() !== '' && buyer.full_name && buyer.full_name.trim() !== ''
        );
        
        console.log('‚úÖ Direct query successful:', buyers.length, 'verified buyers loaded');
        updateState({ buyers, isLoading: false });
        
        // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
        try {
          localStorage.setItem(BUYERS_CACHE_KEY, JSON.stringify({
            data: buyers,
            timestamp: Date.now()
          }));
          console.log('üíæ Buyers cached successfully');
        } catch (cacheError) {
          console.warn('‚ö†Ô∏è Failed to cache buyers:', cacheError);
        }
        
        return;
      }

      const buyers = (data || []).filter(buyer => 
        buyer.opt_id && buyer.opt_id.trim() !== '' && buyer.full_name && buyer.full_name.trim() !== ''
      );
      
      console.log('‚úÖ RPC call successful:', buyers.length, 'buyers loaded via RPC');
      updateState({ buyers, isLoading: false });
      
      // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      try {
        localStorage.setItem(BUYERS_CACHE_KEY, JSON.stringify({
          data: buyers,
          timestamp: Date.now()
        }));
        console.log('üíæ Buyers cached successfully');
      } catch (cacheError) {
        console.warn('‚ö†Ô∏è Failed to cache buyers:', cacheError);
      }
      
    } catch (error: any) {
      console.error("‚ùå Critical error loading buyers:", {
        message: error.message,
        code: error.code,
        details: error.details,
        hint: error.hint,
        stack: error.stack
      });
      
      // –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let userMessage = "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π";
      let description = "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É";
      
      if (error.message?.includes('–¥–æ—Å—Ç—É–ø–∞') || error.message?.includes('permission')) {
        userMessage = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π";
        description = "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞ –∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É";
      } else if (error.code === 'PGRST301') {
        userMessage = "–û—à–∏–±–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞";
        description = "–ü–æ–ª–∏—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –±–ª–æ–∫–∏—Ä—É—é—Ç –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ—Ñ–∏–ª—è–º –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π";
      }
      
      toast({
        title: userMessage,
        description: description,
        variant: "destructive",
      });
      updateState({ isLoading: false });
    }
  }, [updateState, toast]);

  const resetState = useCallback(() => {
    setState({
      step: 1,
      selectedProduct: null,
      selectedBuyer: null,
      buyers: state.buyers, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π
      isLoading: false,
      createdOrder: null,
      createdOrderImages: []
    });
    clearSavedData();
  }, [state.buyers, clearSavedData]);

  // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π
  const clearCache = useCallback(() => {
    localStorage.removeItem(BUYERS_CACHE_KEY);
  }, []);

  // Restore saved state
  const restoreSavedState = useCallback(() => {
    const savedData = loadSavedData();
    if (savedData) {
      console.log('üîÑ Restoring saved sell product state:', savedData);
      setState(prevState => ({
        ...prevState,
        step: savedData.step || 1,
        selectedProduct: savedData.selectedProduct || null,
        selectedBuyer: savedData.selectedBuyer || null,
      }));
      
      toast({
        title: "–°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ",
        description: "–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
      });
      
      return true;
    }
    return false;
  }, [loadSavedData, toast]);

  return {
    state,
    updateState,
    loadBuyers,
    resetState,
    clearCache,
    restoreSavedState,
    clearSavedData,
    draftExists,
    saveNow
  };
};
