
import { useState } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { toast } from '@/hooks/use-toast';
import { useAuth } from '@/contexts/AuthContext';

interface UseOrderResendNotificationProps {
  orderId: string;
  onSuccess?: () => void;
}

export const useOrderResendNotification = ({ orderId, onSuccess }: UseOrderResendNotificationProps) => {
  const [isResending, setIsResending] = useState(false);
  const [shouldShowButton, setShouldShowButton] = useState(false);
  const { profile, user } = useAuth();

  const checkShouldShowButton = async () => {
    if (!orderId || !user || !profile) return false;

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —Å—Ç–æ—Ä–æ–Ω–µ
      const isAdmin = profile.user_type === 'admin';
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
      const { data: order, error } = await supabase
        .from('orders')
        .select('seller_id, is_modified')
        .eq('id', orderId)
        .single();

      if (error) {
        console.error('Error fetching order:', error);
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const canResend = isAdmin || order.seller_id === user.id;
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –∏ –∑–∞–∫–∞–∑ –∏–∑–º–µ–Ω–µ–Ω
      const shouldShow = canResend && (order.is_modified === true);
      
      setShouldShowButton(shouldShow);
      return shouldShow;
    } catch (error) {
      console.error('Error in checkShouldShowButton:', error);
      return false;
    }
  };

  const resendNotification = async () => {
    if (!orderId) {
      console.error('Order ID is required');
      return false;
    }

    setIsResending(true);
    try {
      console.log('üîÑ Resending notification for order:', orderId);

      // –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫–∏ –≤ –ë–î
      const { data: resendResult, error: resendError } = await supabase.rpc('resend_order_notification', {
        p_order_id: orderId
      });

      if (resendError) {
        console.error('‚ùå Error updating resend notification data:', resendError);
        toast({
          title: "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
          description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
          variant: "destructive",
        });
        return false;
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const { data: orderData, error: orderError } = await supabase
        .from('orders')
        .select(`
          *,
          buyer:profiles!orders_buyer_id_fkey (
            telegram,
            full_name,
            opt_id
          ),
          seller:profiles!orders_seller_id_fkey (
            telegram,
            full_name,
            opt_id
          )
        `)
        .eq('id', orderId)
        .single();

      if (orderError) {
        console.error('‚ùå Error fetching order data:', orderError);
        toast({
          title: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏",
          description: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞",
          variant: "destructive",
        });
        return false;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ edge-—Ñ—É–Ω–∫—Ü–∏—é
      const { data: notificationResult, error: notificationError } = await supabase.functions.invoke('send-telegram-notification', {
        body: { 
          order: {
            ...orderData,
            seller_opt_id: orderData.seller?.opt_id,
            buyer_opt_id: orderData.buyer?.opt_id,
            telegram_url_order: orderData.seller?.telegram,
            telegram_url_buyer: orderData.buyer?.telegram
          },
          action: 'resend'
        }
      });

      if (notificationError) {
        console.error('‚ùå Error sending notification:', notificationError);
        toast({
          title: "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏",
          description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram",
          variant: "destructive",
        });
        return false;
      }

      console.log('‚úÖ Notification resent successfully');
      toast({
        title: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
        description: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram",
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
      setShouldShowButton(false);
      onSuccess?.();
      return true;
    } catch (error) {
      console.error('‚ùå Error in resendNotification:', error);
      toast({
        title: "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏",
        description: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
        variant: "destructive",
      });
      return false;
    } finally {
      setIsResending(false);
    }
  };

  return {
    resendNotification,
    isResending,
    shouldShowButton,
    checkShouldShowButton
  };
};
