
import { useState, useEffect } from 'react';
import { useQuery } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { getCachedAdminRights, setCachedAdminRights } from '@/utils/performanceUtils';

export const useOptimizedAdminAccess = (userId?: string) => {
  const [hasAdminAccess, setHasAdminAccess] = useState(false);
  const [isInitializing, setIsInitializing] = useState(true);
  const [initializationError, setInitializationError] = useState<string | null>(null);

  const { data: adminStatus, isLoading, error } = useQuery({
    queryKey: ['admin-access', userId],
    queryFn: async () => {
      if (!userId) {
        throw new Error('No user ID provided');
      }

      console.log('üîê Checking admin access for user:', userId);

      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
      const cachedAccess = getCachedAdminRights(userId);
      if (cachedAccess !== null) {
        console.log('‚úÖ Using cached admin access:', cachedAccess);
        return cachedAccess;
      }

      // –ï—Å–ª–∏ –∫—ç—à–∞ –Ω–µ—Ç, –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ë–î
      const { data: profile, error: profileError } = await supabase
        .from('profiles')
        .select('user_type')
        .eq('id', userId)
        .single();

      if (profileError) {
        console.error('‚ùå Error fetching user profile:', profileError);
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
      }

      const isAdmin = profile?.user_type === 'admin';
      
      // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      setCachedAdminRights(userId, isAdmin);
      
      console.log(isAdmin ? '‚úÖ Admin access confirmed' : '‚ùå Admin access denied');
      return isAdmin;
    },
    enabled: !!userId,
    staleTime: 1000 * 60 * 5, // 5 –º–∏–Ω—É—Ç –∫—ç—à
    gcTime: 1000 * 60 * 30, // 30 –º–∏–Ω—É—Ç –≤ –ø–∞–º—è—Ç–∏
    retry: 1,
  });

  useEffect(() => {
    if (!isLoading) {
      setIsInitializing(false);
      
      if (error) {
        const errorMessage = error instanceof Error ? error.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞';
        setInitializationError(errorMessage);
      } else if (adminStatus !== undefined) {
        setHasAdminAccess(adminStatus);
        if (!adminStatus) {
          setInitializationError('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ');
        }
      }
    }
  }, [isLoading, error, adminStatus]);

  return {
    hasAdminAccess,
    isInitializing,
    initializationError
  };
};
