
import { useQuery } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/contexts/AuthContext';
import { useToast } from '@/hooks/use-toast';
import { useNavigate } from 'react-router-dom';
import { useEffect } from 'react';

interface AccessValidationResult {
  hasAccess: boolean;
  userType: string | null;
  isLoading: boolean;
  error: Error | null;
}

export const useServerAccessValidation = (requiredRole: 'admin' | 'seller' | 'buyer' | null = null) => {
  const { user, profile } = useAuth();
  const { toast } = useToast();
  const navigate = useNavigate();

  // –°–µ—Ä–≤–µ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
  const { data: serverValidation, isLoading, error } = useQuery({
    queryKey: ['access-validation', user?.id, requiredRole],
    queryFn: async () => {
      if (!user?.id) {
        throw new Error('User not authenticated');
      }

      // –í—ã–∑—ã–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
      const { data, error } = await supabase.rpc('validate_user_access', {
        p_user_id: user.id,
        p_required_role: requiredRole
      });

      if (error) {
        console.error('‚ùå Server access validation error:', error);
        throw error;
      }

      console.log('‚úÖ Server access validation result:', data);
      return data;
    },
    enabled: !!user?.id,
    staleTime: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç
    gcTime: 10 * 60 * 1000, // 10 –º–∏–Ω—É—Ç
    retry: (failureCount, error) => {
      // –ù–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      if (error.message.includes('not authenticated') || 
          error.message.includes('access denied')) {
        return false;
      }
      return failureCount < 2;
    }
  });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –ø—Ä–∏–Ω–∏–º–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
  useEffect(() => {
    if (serverValidation && !serverValidation.has_access) {
      toast({
        title: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω",
        description: "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ",
        variant: "destructive",
      });
      
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
      if (profile?.user_type === 'seller') {
        navigate('/seller/dashboard');
      } else if (profile?.user_type === 'buyer') {
        navigate('/');
      } else {
        navigate('/login');
      }
    }
  }, [serverValidation, profile, toast, navigate]);

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  useEffect(() => {
    if (error) {
      console.error('üîí Access validation error:', error);
    }
  }, [error]);

  const result: AccessValidationResult = {
    hasAccess: serverValidation?.has_access ?? false,
    userType: serverValidation?.user_type ?? profile?.user_type ?? null,
    isLoading,
    error
  };

  return result;
};

// –•—É–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
export const useAdminAccessValidation = () => {
  return useServerAccessValidation('admin');
};

// –•—É–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–æ–≤
export const useSellerAccessValidation = () => {
  return useServerAccessValidation('seller');
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
export const AccessGuard: React.FC<{ 
  children: React.ReactNode; 
  requiredRole: 'admin' | 'seller' | 'buyer';
}> = ({ children, requiredRole }) => {
  const { hasAccess, isLoading } = useServerAccessValidation(requiredRole);

  if (isLoading) {
    return (
      <div className="flex h-screen items-center justify-center">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-optapp-yellow"></div>
      </div>
    );
  }

  if (!hasAccess) {
    return (
      <div className="flex h-screen items-center justify-center">
        <div className="text-center">
          <h2 className="text-2xl font-bold text-gray-900 mb-2">–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</h2>
          <p className="text-gray-600">–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã</p>
        </div>
      </div>
    );
  }

  return <>{children}</>;
};
