import { useRef, useCallback } from 'react';
import { useOptimizedAdminAccess } from './useOptimizedAdminAccess';

interface CacheEntry {
  result: boolean;
  timestamp: number;
}

/**
 * Anti-burst wrapper –¥–ª—è verifyAdminAccess –∏ –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
 * –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∞–º-–≤—ã–∑–æ–≤—ã –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∞–¥–º–∏–Ω–∫–µ
 */
export const useAntiBurstAdminAccess = () => {
  const { isAdmin, isCheckingAdmin, hasAdminAccess } = useOptimizedAdminAccess();
  const cacheRef = useRef<CacheEntry | null>(null);
  
  const CACHE_DURATION_MS = 5000; // 5 —Å–µ–∫—É–Ω–¥ –∫—ç—à–∞ –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
  
  /**
   * –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è –ª—é–±—ã—Ö –∞–¥–º–∏–Ω—Å–∫–∏—Ö API –≤—ã–∑–æ–≤–æ–≤
   * –ï—Å–ª–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–µ–∫ —É–∂–µ –±—ã–ª —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º
   */
  const withAntiBurst = useCallback(async <T>(
    operation: () => Promise<T>,
    options: {
      bypassCache?: boolean; // –¥–ª—è –º—É—Ç–∞—Ü–∏–π
      operationName?: string; // –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    } = {}
  ): Promise<T> => {
    const { bypassCache = false, operationName = 'unknown' } = options;
    const now = Date.now();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à —Ç–æ–ª—å–∫–æ –¥–ª—è non-mutation –æ–ø–µ—Ä–∞—Ü–∏–π
    if (!bypassCache && cacheRef.current) {
      const { result, timestamp } = cacheRef.current;
      const age = now - timestamp;
      
      if (age < CACHE_DURATION_MS && result) {
        console.log(`üö´ Anti-burst: Skipping ${operationName}, using cached result (${age}ms old)`);
        return result as T;
      }
    }
    
    try {
      console.log(`üîÑ Anti-burst: Executing ${operationName}`);
      const result = await operation();
      
      // –ö—ç—à–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
      if (typeof result === 'boolean' && result) {
        cacheRef.current = { result, timestamp: now };
      }
      
      return result;
    } catch (error) {
      console.error(`‚ùå Anti-burst: ${operationName} failed:`, error);
      throw error;
    }
  }, []);
  
  /**
   * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –ª–æ–≥–∞—É—Ç–µ –∏–ª–∏ —Å–º–µ–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
   */
  const clearCache = useCallback(() => {
    cacheRef.current = null;
  }, []);
  
  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∞
   */
  const isCacheValid = useCallback(() => {
    if (!cacheRef.current) return false;
    const age = Date.now() - cacheRef.current.timestamp;
    return age < CACHE_DURATION_MS;
  }, []);
  
  return {
    isAdmin,
    isCheckingAdmin,
    hasAdminAccess,
    withAntiBurst,
    clearCache,
    isCacheValid,
    // –ì–æ—Ç–æ–≤—ã–µ –æ–±—ë—Ä—Ç–∫–∏ –¥–ª—è —Ç–∏–ø–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
    safeAdminCheck: useCallback(() => {
      return withAntiBurst(
        async () => hasAdminAccess,
        { operationName: 'admin_access_check' }
      );
    }, [withAntiBurst, hasAdminAccess]),
  };
};