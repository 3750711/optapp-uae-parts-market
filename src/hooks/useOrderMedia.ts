
import { useState, useEffect, useCallback } from 'react';
import { useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { toast } from '@/hooks/use-toast';

interface UseOrderMediaProps {
  order: any;
  open: boolean;
}

export const useOrderMedia = ({ order, open }: UseOrderMediaProps) => {
  const queryClient = useQueryClient();
  const [orderImages, setOrderImages] = useState<string[]>([]);
  const [orderVideos, setOrderVideos] = useState<string[]>([]);

  useEffect(() => {
    if (order && open) {
      const loadMedia = async () => {
        try {
          console.log('üé¨ Loading media for order:', order.id);
          
          // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
          setOrderImages(order.images || []);
          
          // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã order_videos (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
          const { data: videosData, error: videosError } = await supabase
            .from('order_videos')
            .select('url')
            .eq('order_id', order.id);

          if (videosError) throw videosError;
          
          let videoUrls: string[] = [];
          
          if (videosData && videosData.length > 0) {
            // –ï—Å—Ç—å –≤–∏–¥–µ–æ –≤ —Ç–∞–±–ª–∏—Ü–µ order_videos - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
            videoUrls = videosData.map(v => v.url);
            console.log('‚úÖ Using videos from order_videos table:', videoUrls.length);
          } else {
            // –ù–µ—Ç –≤–∏–¥–µ–æ –≤ —Ç–∞–±–ª–∏—Ü–µ order_videos - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ video_url
            const legacyVideoUrls = order.video_url || [];
            if (legacyVideoUrls.length > 0) {
              videoUrls = legacyVideoUrls;
              console.log('üì¶ Using legacy videos from video_url field:', videoUrls.length);
            }
          }
          
          setOrderVideos(videoUrls);
          console.log('üé¨ Final video URLs loaded:', videoUrls);

        } catch (error) {
          console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –∑–∞–∫–∞–∑–∞:", error);
          toast({ 
            title: "–û—à–∏–±–∫–∞", 
            description: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –∑–∞–∫–∞–∑–∞.", 
            variant: "destructive" 
          });
        }
      };
      loadMedia();
    }
  }, [order, open]);

  const handleImagesChange = useCallback((newUrls: string[]) => {
    console.log('üì∏ Images changed:', newUrls.length);
    setOrderImages(newUrls);
  }, []);
  
  const handleVideosChange = useCallback((newUrls: string[]) => {
    console.log('üé¨ Videos changed:', newUrls.length);
    setOrderVideos(newUrls);
  }, []);
  
  const handleVideoDelete = useCallback(async (urlToDelete: string) => {
    if (!order?.id) return;
    
    console.log('üóëÔ∏è Deleting video:', urlToDelete);
    const newVideoList = orderVideos.filter(url => url !== urlToDelete);
    setOrderVideos(newVideoList);
    
    // –£–¥–∞–ª—è–µ–º –∏–∑ —Ç–∞–±–ª–∏—Ü—ã order_videos
    try {
      const { error } = await supabase
        .from('order_videos')
        .delete()
        .eq('order_id', order.id)
        .eq('url', urlToDelete);
      
      if (error) {
        console.error('‚ùå Error deleting video from order_videos:', error);
        toast({ 
          title: '–û—à–∏–±–∫–∞', 
          description: '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
          variant: 'destructive'
        });
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∏–¥–µ–æ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        setOrderVideos(orderVideos);
      } else {
        console.log('‚úÖ Video deleted from order_videos table');
        toast({ title: '–í–∏–¥–µ–æ —É–¥–∞–ª–µ–Ω–æ' });
      }
    } catch (error) {
      console.error('‚ùå Error in handleVideoDelete:', error);
      setOrderVideos(orderVideos);
    }
  }, [order?.id, orderVideos]);

  return {
    orderImages,
    orderVideos,
    handleImagesChange,
    handleVideosChange,
    handleVideoDelete
  };
};
