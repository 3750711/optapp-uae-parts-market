
import { useQuery } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { getCachedAdminRights } from '@/utils/performanceUtils';

interface ProfileShort {
  id: string;
  opt_id: string;
  full_name: string;
}

interface SellerProfile extends ProfileShort {
  telegram: string;
}

export const useOptimizedProfiles = (userId?: string) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  const cachedAdminRights = userId ? getCachedAdminRights(userId) : null;
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –Ω–∞ 5 –º–∏–Ω—É—Ç
  const {
    data: buyerProfiles = [],
    isLoading: isBuyersLoading,
    error: buyersError
  } = useQuery({
    queryKey: ['admin', 'buyer-profiles'],
    queryFn: async () => {
      console.log('üîç Fetching buyer profiles with optimization...');
      const { data, error } = await supabase
        .from('profiles')
        .select('id, opt_id, full_name')
        .eq('user_type', 'buyer')
        .not('opt_id', 'is', null)
        .limit(100); // –õ–∏–º–∏—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç

      if (error) {
        console.error('‚ùå Error fetching buyer profiles:', error);
        throw error;
      }

      console.log('‚úÖ Buyer profiles loaded:', data?.length || 0);
      return data as ProfileShort[] || [];
    },
    staleTime: 1000 * 60 * 5, // 5 –º–∏–Ω—É—Ç –∫—ç—à
    gcTime: 1000 * 60 * 10, // 10 –º–∏–Ω—É—Ç –≤ –ø–∞–º—è—Ç–∏
    enabled: cachedAdminRights === true || cachedAdminRights === null, // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –∏–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ
  });

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –Ω–∞ 5 –º–∏–Ω—É—Ç
  const {
    data: sellerProfiles = [],
    isLoading: isSellersLoading,
    error: sellersError
  } = useQuery({
    queryKey: ['admin', 'seller-profiles'],
    queryFn: async () => {
      console.log('üîç Fetching seller profiles with optimization...');
      const { data, error } = await supabase
        .from('profiles')
        .select('id, opt_id, full_name, telegram')
        .eq('user_type', 'seller')
        .limit(100); // –õ–∏–º–∏—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç

      if (error) {
        console.error('‚ùå Error fetching seller profiles:', error);
        throw error;
      }

      console.log('‚úÖ Seller profiles loaded:', data?.length || 0);
      return data as SellerProfile[] || [];
    },
    staleTime: 1000 * 60 * 5, // 5 –º–∏–Ω—É—Ç –∫—ç—à
    gcTime: 1000 * 60 * 10, // 10 –º–∏–Ω—É—Ç –≤ –ø–∞–º—è—Ç–∏
    enabled: cachedAdminRights === true || cachedAdminRights === null,
  });

  return {
    buyerProfiles,
    sellerProfiles,
    isLoading: isBuyersLoading || isSellersLoading,
    error: buyersError || sellersError
  };
};
