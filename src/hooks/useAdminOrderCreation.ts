
import { useState, useCallback } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';

interface SellerProfile {
  id: string;
  full_name: string;
  opt_id: string;
  telegram?: string;
}

interface BuyerProfile {
  id: string;
  full_name: string;
  opt_id: string;
  telegram?: string;
}

interface Product {
  id: string;
  title: string;
  price: number;
  brand?: string;
  model?: string;
  status: string;
  product_images?: { url: string; is_primary?: boolean }[];
  delivery_price?: number;
  lot_number: number;
}

export const useAdminOrderCreation = () => {
  const { toast } = useToast();
  const [isCreatingOrder, setIsCreatingOrder] = useState(false);

  const createOrder = useCallback(async (
    selectedSeller: SellerProfile,
    selectedProduct: Product,
    selectedBuyer: BuyerProfile,
    orderData: {
      price: number;
      deliveryPrice?: number;
      deliveryMethod: string;
      orderImages: string[];
    }
  ) => {
    if (isCreatingOrder) {
      console.log("Order creation already in progress, ignoring duplicate request");
      return null;
    }

    setIsCreatingOrder(true);

    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      console.log("üîç Validating input data:", {
        selectedSeller: {
          id: selectedSeller.id,
          full_name: selectedSeller.full_name,
          opt_id: selectedSeller.opt_id
        },
        selectedProduct: {
          id: selectedProduct.id,
          title: selectedProduct.title,
          price: selectedProduct.price,
          brand: selectedProduct.brand,
          model: selectedProduct.model,
          delivery_price: selectedProduct.delivery_price,
          images_count: selectedProduct.product_images?.length || 0,
          product_images: selectedProduct.product_images
        },
        selectedBuyer: {
          id: selectedBuyer.id,
          full_name: selectedBuyer.full_name,
          opt_id: selectedBuyer.opt_id
        },
        orderData: {
          price: orderData.price,
          deliveryPrice: orderData.deliveryPrice,
          deliveryMethod: orderData.deliveryMethod,
          orderImages_count: orderData.orderImages.length,
          orderImages: orderData.orderImages
        }
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (!selectedSeller.full_name || !selectedSeller.opt_id) {
        console.error("‚ùå Missing seller data:", { full_name: selectedSeller.full_name, opt_id: selectedSeller.opt_id });
        throw new Error('–î–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–≤—Ü–∞ –Ω–µ–ø–æ–ª–Ω—ã');
      }

      if (!selectedBuyer.opt_id) {
        console.error("‚ùå Missing buyer opt_id:", selectedBuyer.opt_id);
        throw new Error('OPT_ID –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω');
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è delivery_method
      const validDeliveryMethods = ['cargo_rf', 'cargo_kz', 'self_pickup'];
      if (!validDeliveryMethods.includes(orderData.deliveryMethod)) {
        throw new Error(`Invalid delivery method: ${orderData.deliveryMethod}`);
      }

      // üì∏ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏–∑ —Ñ–æ—Ä–º—ã
      const productImages = selectedProduct.product_images?.map(img => img.url) || [];
      console.log("üì∏ Product images from selectedProduct:", {
        product_images_raw: selectedProduct.product_images,
        product_images_urls: productImages,
        count: productImages.length
      });

      const additionalImages = orderData.orderImages || [];
      console.log("üì∏ Additional images from orderData:", {
        orderImages: additionalImages,
        count: additionalImages.length
      });

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º: —Å–Ω–∞—á–∞–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞, –ø–æ—Ç–æ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ
      const combinedImages = [...productImages, ...additionalImages];
      console.log("üì∏ Combined images:", {
        productImages_count: productImages.length,
        additionalImages_count: additionalImages.length,
        combinedImages_count: combinedImages.length,
        combinedImages: combinedImages
      });

      // üí∞ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
      let finalDeliveryPrice = null;
      
      // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã (orderData.deliveryPrice)
      if (orderData.deliveryPrice !== undefined && orderData.deliveryPrice !== null) {
        finalDeliveryPrice = orderData.deliveryPrice;
        console.log("üí∞ Using delivery price from form:", finalDeliveryPrice);
      }
      // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–æ–≤–∞—Ä–∞ (selectedProduct.delivery_price)
      else if (selectedProduct.delivery_price !== undefined && selectedProduct.delivery_price !== null) {
        finalDeliveryPrice = selectedProduct.delivery_price;
        console.log("üí∞ Using delivery price from product:", finalDeliveryPrice);
      }
      
      console.log("üí∞ Final delivery price logic:", {
        formDeliveryPrice: orderData.deliveryPrice,
        productDeliveryPrice: selectedProduct.delivery_price,
        finalDeliveryPrice: finalDeliveryPrice
      });

      // üöó –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–æ–¥–µ–ª—å —Ç–æ–≤–∞—Ä–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å null)
      const productModel = selectedProduct.model || '';
      console.log("üöó Product model processing:", {
        original_model: selectedProduct.model,
        processed_model: productModel
      });

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º RPC —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
      const orderPayload = {
        p_title: selectedProduct.title,
        p_price: orderData.price, // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ü–µ–Ω–µ –∏–∑ —Ñ–æ—Ä–º—ã
        p_place_number: 1,
        p_seller_id: selectedSeller.id,
        p_order_seller_name: selectedSeller.full_name, // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–¥–∞–µ–º –∏–º—è –ø—Ä–æ–¥–∞–≤—Ü–∞
        p_seller_opt_id: selectedSeller.opt_id, // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–¥–∞–µ–º OPT_ID –ø—Ä–æ–¥–∞–≤—Ü–∞
        p_buyer_id: selectedBuyer.id,
        p_brand: selectedProduct.brand || '',
        p_model: productModel, // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
        p_status: 'admin_confirmed' as const,
        p_order_created_type: 'product_order' as const,
        p_telegram_url_order: null,
        p_images: combinedImages, // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        p_product_id: selectedProduct.id,
        p_delivery_method: orderData.deliveryMethod as 'cargo_rf' | 'cargo_kz' | 'self_pickup',
        p_text_order: '',
        p_delivery_price_confirm: finalDeliveryPrice // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
      };

      console.log("‚úÖ Final RPC payload with FIXES:", orderPayload);

      const { data: orderId, error: orderError } = await supabase
        .rpc('admin_create_order', orderPayload);

      if (orderError) {
        console.error("‚ùå Error creating order:", orderError);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if (orderError.message?.includes('Product is not available for order')) {
          toast({
            title: "–¢–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
            description: "–≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä —É–∂–µ –ø—Ä–æ–¥–∞–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞",
            variant: "destructive",
          });
          return 'product_unavailable';
        }
        
        if (orderError.message?.includes('An active order already exists')) {
          toast({
            title: "–ó–∞–∫–∞–∑ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
            description: "–î–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑",
            variant: "destructive",
          });
          return 'order_exists';
        }
        
        throw orderError;
      }

      console.log("‚úÖ Order created with ID:", orderId);

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
      const { data: createdOrder, error: fetchError } = await supabase
        .from('orders')
        .select('*')
        .eq('id', orderId)
        .single();

      if (fetchError) {
        console.error("‚ùå Error fetching created order:", fetchError);
        throw fetchError;
      }

      // üîç –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
      console.log("üîç DETAILED validation of created order data:", {
        order_id: createdOrder.id,
        order_number: createdOrder.order_number,
        title: createdOrder.title,
        price: createdOrder.price,
        delivery_price_confirm: createdOrder.delivery_price_confirm,
        order_seller_name: createdOrder.order_seller_name,
        seller_opt_id: createdOrder.seller_opt_id,
        buyer_opt_id: createdOrder.buyer_opt_id,
        brand: createdOrder.brand,
        model: createdOrder.model,
        product_id: createdOrder.product_id,
        images_count: createdOrder.images?.length || 0,
        images: createdOrder.images,
        delivery_method: createdOrder.delivery_method
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –ø–æ–ª—è
      const validationErrors = [];
      
      if (!createdOrder.order_seller_name || createdOrder.order_seller_name === 'Unknown Seller') {
        validationErrors.push('–ò–º—è –ø—Ä–æ–¥–∞–≤—Ü–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å');
      }
      
      if (!createdOrder.seller_opt_id) {
        validationErrors.push('OPT_ID –ø—Ä–æ–¥–∞–≤—Ü–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è');
      }
      
      if (!createdOrder.buyer_opt_id) {
        validationErrors.push('OPT_ID –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è');
      }
      
      // ‚úÖ –ù–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      if (!createdOrder.images || createdOrder.images.length === 0) {
        console.warn("‚ö†Ô∏è No images saved in order - this is the main issue!");
        validationErrors.push('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å');
      } else {
        console.log("‚úÖ Images successfully saved:", createdOrder.images);
      }

      // ‚úÖ –ù–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê: –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
      if (finalDeliveryPrice !== null && createdOrder.delivery_price_confirm !== finalDeliveryPrice) {
        console.warn("‚ö†Ô∏è Delivery price mismatch:", {
          expected: finalDeliveryPrice,
          actual: createdOrder.delivery_price_confirm
        });
        validationErrors.push('–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      }

      // ‚úÖ –ù–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ú–æ–¥–µ–ª—å
      if (selectedProduct.model && !createdOrder.model) {
        console.warn("‚ö†Ô∏è Model not saved:", {
          expected: selectedProduct.model,
          actual: createdOrder.model
        });
        validationErrors.push('–ú–æ–¥–µ–ª—å —Ç–æ–≤–∞—Ä–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞—Å—å');
      }

      if (validationErrors.length > 0) {
        console.error("‚ùå Order validation failed:", validationErrors);
        toast({
          title: "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
          description: `–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã: ${validationErrors.join(', ')}`,
          variant: "destructive",
        });
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
      if (createdOrder) {
        try {
          console.log("üì± Sending Telegram notification for order creation:", createdOrder);
          
          const { error: notificationError } = await supabase.functions.invoke('send-telegram-notification', {
            body: {
              order: createdOrder,
              action: 'create'
            }
          });

          if (notificationError) {
            console.error("‚ùå Error sending order creation notification:", notificationError);
          } else {
            console.log("‚úÖ Order creation notification sent successfully");
          }
        } catch (notificationError) {
          console.error("‚ùå Exception while sending order notification:", notificationError);
        }
      }

      toast({
        title: "–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω",
        description: `–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"`,
      });

      return createdOrder;

    } catch (error) {
      console.error("üí• Error creating order:", error);
      const errorMessage = error instanceof Error ? error.message : "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
      toast({
        title: "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞",
        description: `–î–µ—Ç–∞–ª–∏: ${errorMessage}`,
        variant: "destructive",
      });
      throw error;
    } finally {
      setIsCreatingOrder(false);
    }
  }, [toast, isCreatingOrder]);

  return {
    createOrder,
    isCreatingOrder
  };
};
