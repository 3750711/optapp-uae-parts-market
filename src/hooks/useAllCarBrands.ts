import { useQuery } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { useState, useCallback, useMemo } from 'react';

export interface CarBrand {
  id: string;
  name: string;
}

export interface CarModel {
  id: string;
  name: string;
  brand_id: string;
}

const CACHE_DURATION = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage
const saveToCache = (key: string, value: any) => {
  try {
    const item = {
      value,
      timestamp: Date.now(),
      version: 1
    };
    localStorage.setItem(key, JSON.stringify(item));
  } catch (error) {
    console.warn('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage:', error);
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ localStorage
const loadFromCache = (key: string) => {
  try {
    const itemString = localStorage.getItem(key);
    if (!itemString) return null;
    
    const item = JSON.parse(itemString);
    
    if (item.version !== 1 || Date.now() - item.timestamp > CACHE_DURATION) {
      localStorage.removeItem(key);
      return null;
    }
    
    return item.value;
  } catch (error) {
    localStorage.removeItem(key);
    return null;
  }
};

export const useAllCarBrands = () => {
  const [selectedBrandId, setSelectedBrandId] = useState<string | null>(null);
  const [brandSearchTerm, setBrandSearchTerm] = useState('');
  const [modelSearchTerm, setModelSearchTerm] = useState('');

  // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –±—Ä–µ–Ω–¥–æ–≤
  const {
    data: brandsData,
    isLoading: isLoadingBrands,
    error: brandsError,
    refetch: refetchBrands
  } = useQuery({
    queryKey: ['admin-all-car-brands'],
    queryFn: async () => {
      // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫—ç—à–∞
      const cached = loadFromCache('admin-all-car-brands');
      if (cached) {
        console.log('üóÑÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω—ã –≤—Å–µ –º–∞—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏–∑ –∫—ç—à–∞ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏');
        return cached;
      }
      
      console.log('üîç –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –º–∞—Ä–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–¥–º–∏–Ω–∫–∏');
      
      const { data, error } = await supabase
        .from('car_brands')
        .select('id, name')
        .order('name', { ascending: true });
      
      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ä–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π:', error);
        throw error;
      }
      
      // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      saveToCache('admin-all-car-brands', data);
      
      console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–∞—Ä–æ–∫ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏:', data?.length);
      return data || [];
    },
    staleTime: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
    gcTime: 60 * 60 * 1000, // 1 —á–∞—Å
  });

  // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞
  const {
    data: modelsData,
    isLoading: isLoadingModels,
    error: modelsError,
    refetch: refetchModels
  } = useQuery({
    queryKey: ['admin-all-car-models', selectedBrandId],
    queryFn: async () => {
      if (!selectedBrandId) return [];
      
      // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫—ç—à–∞
      const cacheKey = `admin-all-car-models-${selectedBrandId}`;
      const cached = loadFromCache(cacheKey);
      if (cached) {
        console.log('üóÑÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω—ã –≤—Å–µ –º–æ–¥–µ–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏–∑ –∫—ç—à–∞ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏', { brandId: selectedBrandId });
        return cached;
      }
      
      console.log('üîç –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–¥–º–∏–Ω–∫–∏', { brandId: selectedBrandId });
      
      const { data, error } = await supabase
        .from('car_models')
        .select('id, name, brand_id')
        .eq('brand_id', selectedBrandId)
        .order('name', { ascending: true });
      
      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π:', error);
        throw error;
      }
      
      // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      saveToCache(cacheKey, data);
      
      console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–æ–¥–µ–ª–µ–π –¥–ª—è –∞–¥–º–∏–Ω–∫–∏:', data?.length);
      return data || [];
    },
    staleTime: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
    gcTime: 60 * 60 * 1000, // 1 —á–∞—Å
    enabled: !!selectedBrandId,
  });

  // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  const {
    data: allModelsData,
    isLoading: isLoadingAllModels
  } = useQuery({
    queryKey: ['admin-all-models'],
    queryFn: async () => {
      const { data, error } = await supabase
        .from('car_models')
        .select('id, name, brand_id')
        .order('name', { ascending: true });
      
      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π:', error);
        throw error;
      }
      
      return data || [];
    },
    staleTime: 15 * 60 * 1000,
    gcTime: 60 * 60 * 1000,
  });

  const brandModelCounts = useMemo(() => {
    if (!allModelsData) return new Map<string, number>();
    return allModelsData.reduce((acc, model) => {
        const count = acc.get(model.brand_id) || 0;
        acc.set(model.brand_id, count + 1);
        return acc;
    }, new Map<string, number>());
  }, [allModelsData]);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –±—Ä–µ–Ω–¥–æ–≤ –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
  const filteredBrands = useMemo(() => {
    if (!brandsData) return [];
    
    if (!brandSearchTerm.trim()) return brandsData;
    
    return brandsData.filter(brand =>
      brand.name.toLowerCase().includes(brandSearchTerm.toLowerCase())
    );
  }, [brandsData, brandSearchTerm]);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
  const filteredModels = useMemo(() => {
    if (!modelsData) return [];
    
    if (!modelSearchTerm.trim()) return modelsData;
    
    return modelsData.filter(model =>
      model.name.toLowerCase().includes(modelSearchTerm.toLowerCase())
    );
  }, [modelsData, modelSearchTerm]);

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ ID
  const findBrandNameById = useCallback((brandId: string | null): string | null => {
    if (!brandId || !brandsData) return null;
    const brand = brandsData.find(brand => brand.id === brandId);
    return brand?.name || null;
  }, [brandsData]);

  const findModelNameById = useCallback((modelId: string | null): string | null => {
    if (!modelId || !modelsData) return null;
    const model = modelsData.find(model => model.id === modelId);
    return model?.name || null;
  }, [modelsData]);

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∏–º–µ–Ω–∏
  const findBrandIdByName = useCallback((brandName: string | null): string | null => {
    if (!brandName || !brandsData) return null;
    const brand = brandsData.find(brand => brand.name.toLowerCase() === brandName.toLowerCase());
    return brand?.id || null;
  }, [brandsData]);

  const findModelIdByName = useCallback((modelName: string | null): string | null => {
    if (!modelName || !allModelsData) return null;
    const model = allModelsData.find(model => model.name.toLowerCase() === modelName.toLowerCase());
    return model?.id || null;
  }, [allModelsData]);

  // –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏ –¥–ª—è –±—Ä–µ–Ω–¥–∞
  const validateModelBrand = useCallback((modelId: string, brandId: string): boolean => {
    if (!allModelsData) return false;
    const model = allModelsData.find(m => m.id === modelId);
    return model?.brand_id === brandId;
  }, [allModelsData]);

  return {
    // –î–∞–Ω–Ω—ã–µ
    brands: filteredBrands,
    brandModels: filteredModels,
    allModels: allModelsData || [],
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    isLoadingBrands,
    isLoadingModels,
    isLoading: isLoadingBrands || isLoadingModels || isLoadingAllModels,
    
    // –û—à–∏–±–∫–∏
    brandsError,
    modelsError,
    
    // –í—ã–±—Ä–∞–Ω–Ω—ã–π –±—Ä–µ–Ω–¥
    selectedBrandId,
    selectedBrand: selectedBrandId,
    setSelectedBrandId,
    selectBrand: setSelectedBrandId,
    
    // –ü–æ–∏—Å–∫
    brandSearchTerm,
    setBrandSearchTerm,
    modelSearchTerm,
    setModelSearchTerm,
    
    // –§—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    refetchBrands,
    refetchModels,
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    findBrandNameById,
    findModelNameById,
    findBrandIdByName,
    findModelIdByName,
    validateModelBrand,
    brandModelCounts,
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    totalBrands: brandsData?.length || 0,
    totalModels: modelsData?.length || 0,
    filteredBrandsCount: filteredBrands.length,
    filteredModelsCount: filteredModels.length
  };
};
