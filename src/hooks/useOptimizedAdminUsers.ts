
import { useQuery } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/contexts/AuthContext';
import { useToast } from '@/hooks/use-toast';
import { ProfileType } from '@/components/profile/types';

interface UseOptimizedAdminUsersProps {
  search: string;
  status: string;
  userType: string;
  optStatus: string;
  ratingFrom: string;
  ratingTo: string;
  dateFrom: Date | undefined;
  dateTo: Date | undefined;
  sortField: string;
  sortDirection: 'asc' | 'desc';
  currentPage: number;
  pageSize: number;
}

export const useOptimizedAdminUsers = (filters: UseOptimizedAdminUsersProps) => {
  const { user } = useAuth();
  const { toast } = useToast();

  return useQuery({
    queryKey: ['admin', 'users-optimized', filters],
    queryFn: async () => {
      console.log('üîç Executing optimized users search...');
      const startTime = performance.now();

      // Rate limiting check
      if (user?.id) {
        const rateLimitOk = await supabase.rpc('check_search_rate_limit', {
          p_user_id: user.id,
          p_search_type: 'admin_users'
        });

        if (!rateLimitOk) {
          throw new Error('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
      }

      // –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
      const selectFields = [
        'id', 'email', 'full_name', 'company_name', 'opt_id', 'phone', 'telegram',
        'user_type', 'verification_status', 'opt_status', 'rating', 'communication_ability',
        'created_at', 'avatar_url', 'location'
      ].join(', ');

      let query = supabase
        .from('profiles')
        .select(selectFields, { count: 'exact' });

      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
      if (filters.status !== 'all') {
        query = query.eq('verification_status', filters.status);
      }

      if (filters.userType !== 'all') {
        query = query.eq('user_type', filters.userType);
      }

      if (filters.optStatus !== 'all') {
        query = query.eq('opt_status', filters.optStatus);
      }

      // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫
      if (filters.search && filters.search.length >= 2) {
        const searchTerm = filters.search.trim();
        
        if (searchTerm.length >= 3) {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
          query = query.textSearch('fts', `'${searchTerm}':*`, {
            type: 'websearch',
            config: 'russian'
          });
        } else {
          // Fallback –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
          query = query.or(`full_name.ilike.%${searchTerm}%,email.ilike.%${searchTerm}%,opt_id.ilike.%${searchTerm}%`);
        }
      }

      // –§–∏–ª—å—Ç—Ä—ã –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
      if (filters.ratingFrom) {
        query = query.gte('rating', parseFloat(filters.ratingFrom));
      }
      if (filters.ratingTo) {
        query = query.lte('rating', parseFloat(filters.ratingTo));
      }

      // –§–∏–ª—å—Ç—Ä—ã –ø–æ –¥–∞—Ç–∞–º
      if (filters.dateFrom) {
        query = query.gte('created_at', filters.dateFrom.toISOString());
      }
      if (filters.dateTo) {
        const dateTo = new Date(filters.dateTo);
        dateTo.setHours(23, 59, 59, 999);
        query = query.lte('created_at', dateTo.toISOString());
      }

      // –ü–∞–≥–∏–Ω–∞—Ü–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
      const from = (filters.currentPage - 1) * filters.pageSize;
      const to = from + filters.pageSize - 1;

      const { data, count, error } = await query
        .order(filters.sortField, { ascending: filters.sortDirection === 'asc' })
        .range(from, to);

      if (error) {
        console.error('‚ùå Users query error:', error);
        throw error;
      }

      const endTime = performance.now();
      console.log(`‚úÖ Users query completed in ${(endTime - startTime).toFixed(2)}ms`);

      return {
        users: data as ProfileType[],
        totalCount: count || 0,
        totalPages: Math.ceil((count || 0) / filters.pageSize)
      };
    },
    staleTime: 2 * 60 * 1000, // –£–º–µ–Ω—å—à–µ–Ω–æ –¥–æ 2 –º–∏–Ω—É—Ç –¥–ª—è –±–æ–ª–µ–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    gcTime: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç –≤ –ø–∞–º—è—Ç–∏
    refetchOnWindowFocus: false,
    retry: (failureCount, error) => {
      // –ù–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–∏ rate limiting
      if (error.message.includes('–ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤')) {
        return false;
      }
      return failureCount < 2;
    },
    meta: {
      onError: (error: Error) => {
        console.error('‚ùå Admin users query error:', error);
        toast({
          title: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
          description: error.message,
          variant: "destructive",
        });
      }
    }
  });
};
