
import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/contexts/AuthContext';
import { Notification } from '@/types/notification';
import { toast } from '@/hooks/use-toast';
import { getNotificationTranslations } from '@/utils/notificationTranslations';

// –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê REACT DISPATCHER
console.log('üîç [useNotifications] React hooks availability check:', {
  useState: typeof useState,
  useEffect: typeof useEffect,
  useCallback: typeof useCallback,
  useMemo: typeof useMemo,
  reactInternals: typeof (React as any)?.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,
  dispatcher: (React as any)?.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED?.ReactCurrentDispatcher?.current
});

export const useNotifications = () => {
  console.log('üîç [useNotifications] Hook execution start');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ React dispatcher –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ö—É–∫–æ–≤
  const reactInternals = (React as any)?.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
  if (!reactInternals?.ReactCurrentDispatcher?.current) {
    console.error('‚ùå [useNotifications] React dispatcher is null! Hook called outside React context');
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return {
      notifications: [],
      unreadCount: 0,
      loading: false,
      markAsRead: () => Promise.resolve(),
      markAllAsRead: () => Promise.resolve(),
      deleteNotification: () => Promise.resolve(),
      refetch: () => Promise.resolve()
    };
  }

  const [notifications, setNotifications] = useState<Notification[]>([]);
  const [unreadCount, setUnreadCount] = useState(0);
  const [loading, setLoading] = useState(true);
  
  console.log('üîç [useNotifications] State hooks initialized successfully');
  
  const { user, profile } = useAuth();

  // Memoize unread count calculation to avoid recalculation on every render
  const memoizedUnreadCount = useMemo(() => {
    return notifications.filter(n => !n.read).length;
  }, [notifications]);

  // Get translations based on user type
  const translations = useMemo(() => {
    return getNotificationTranslations(profile?.user_type || 'buyer');
  }, [profile?.user_type]);

  // Optimized fetch notifications with better query
  const fetchNotifications = useCallback(async () => {
    if (!user) return;

    try {
      console.log('üîç [useNotifications] Fetching notifications for user:', user.id);
      
      const { data, error } = await supabase
        .from('notifications')
        .select('id, user_id, type, title, message, title_en, message_en, language, data, read, created_at, updated_at')
        .eq('user_id', user.id)
        .order('created_at', { ascending: false })
        .limit(30); // Reduced limit for better performance

      if (error) throw error;

      console.log('üîç [useNotifications] Notifications fetched:', data?.length || 0);

      // Process notifications to show correct language based on user type
      const processedNotifications = (data || []).map(notification => {
        const userType = profile?.user_type || 'buyer';
        const isSellerViewingEnglish = userType === 'seller';
        
        return {
          ...notification,
          title: isSellerViewingEnglish && notification.title_en 
            ? notification.title_en 
            : notification.title || translations.notificationTitles[notification.type as keyof typeof translations.notificationTitles] || 'Notification',
          message: isSellerViewingEnglish && notification.message_en 
            ? notification.message_en 
            : notification.message || translations.notificationMessages[notification.type as keyof typeof translations.notificationMessages]?.(notification.data) || ''
        };
      });

      setNotifications(processedNotifications);
      setUnreadCount(processedNotifications?.filter(n => !n.read).length || 0);
    } catch (error) {
      console.error('‚ùå [useNotifications] Error fetching notifications:', error);
      const errorTitle = profile?.user_type === 'seller' ? 'Error' : '–û—à–∏–±–∫–∞';
      const errorDesc = profile?.user_type === 'seller' ? 'Failed to load notifications' : '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è';
      
      toast({
        title: errorTitle,
        description: errorDesc,
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  }, [user, profile?.user_type, translations]);

  // Optimized mark notification as read
  const markAsRead = useCallback(async (notificationId: string) => {
    try {
      const { error } = await supabase
        .from('notifications')
        .update({ read: true })
        .eq('id', notificationId)
        .eq('user_id', user?.id);

      if (error) throw error;

      // Update local state optimistically
      setNotifications(prev => 
        prev.map(n => n.id === notificationId ? { ...n, read: true } : n)
      );
    } catch (error) {
      console.error('‚ùå [useNotifications] Error marking notification as read:', error);
    }
  }, [user?.id]);

  // Optimized mark all as read
  const markAllAsRead = useCallback(async () => {
    if (!user) return;

    try {
      const { error } = await supabase
        .from('notifications')
        .update({ read: true })
        .eq('user_id', user.id)
        .eq('read', false);

      if (error) throw error;

      setNotifications(prev => prev.map(n => ({ ...n, read: true })));
    } catch (error) {
      console.error('‚ùå [useNotifications] Error marking all notifications as read:', error);
    }
  }, [user]);

  // Optimized delete notification
  const deleteNotification = useCallback(async (notificationId: string) => {
    try {
      const { error } = await supabase
        .from('notifications')
        .delete()
        .eq('id', notificationId)
        .eq('user_id', user?.id);

      if (error) throw error;

      setNotifications(prev => prev.filter(n => n.id !== notificationId));
    } catch (error) {
      console.error('‚ùå [useNotifications] Error deleting notification:', error);
    }
  }, [user?.id]);

  // –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û: Setup real-time subscription
  useEffect(() => {
    if (!user) return;

    console.log('üîç [useNotifications] Setting up for user:', user.id);
    
    // –¢–æ–ª—å–∫–æ –±–∞–∑–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –±–µ–∑ Realtime –ø–æ–¥–ø–∏—Å–æ–∫
    fetchNotifications();
    
    // REALTIME –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù –î–õ–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò
    console.log('‚ö†Ô∏è [useNotifications] Realtime subscriptions disabled for diagnostics');
    
    /*
    const channel = supabase
      .channel('notifications-changes')
      .on(
        'postgres_changes',
        {
          event: 'INSERT',
          schema: 'public',
          table: 'notifications',
          filter: `user_id=eq.${user.id}`
        },
        (payload) => {
          // ... realtime logic
        }
      )
      .on(
        'postgres_changes',
        {
          event: 'UPDATE',
          schema: 'public',
          table: 'notifications',
          filter: `user_id=eq.${user.id}`
        },
        (payload) => {
          // ... realtime logic
        }
      )
      .subscribe();

    return () => {
      supabase.removeChannel(channel);
    };
    */
  }, [user, fetchNotifications]); // –£–±—Ä–∞–ª–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç profile –∏ translations

  console.log('üîç [useNotifications] Hook execution complete');

  return {
    notifications,
    unreadCount: memoizedUnreadCount,
    loading,
    markAsRead,
    markAllAsRead,
    deleteNotification,
    refetch: fetchNotifications
  };
};
