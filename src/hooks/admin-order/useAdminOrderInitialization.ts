
import { useState, useEffect, useCallback } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { useAuth } from '@/contexts/AuthContext';
import { useAdminAccess } from '@/hooks/useAdminAccess';
import { supabase } from '@/integrations/supabase/client';
import { BuyerProfile, SellerProfile } from '@/types/order';

interface InitializationState {
  isInitializing: boolean;
  error: string | null;
}

export const useAdminOrderInitialization = () => {
  const navigate = useNavigate();
  const location = useLocation();
  const { user } = useAuth();
  const { isAdmin } = useAdminAccess();

  const [initState, setInitState] = useState<InitializationState>({
    isInitializing: true,
    error: null
  });

  const [buyerProfiles, setBuyerProfiles] = useState<BuyerProfile[]>([]);
  const [sellerProfiles, setSellerProfiles] = useState<SellerProfile[]>([]);

  const loadBuyerProfiles = useCallback(async (): Promise<void> => {
    try {
      console.log('üîÑ Loading buyer profiles...');
      const { data, error } = await supabase
        .from('profiles')
        .select('id, full_name, opt_id, telegram')
        .eq('user_type', 'buyer')
        .not('opt_id', 'is', null)
        .neq('opt_id', '')
        .order('opt_id', { ascending: true })
        .limit(200);

      if (error) {
        console.error('‚ùå Error loading buyer profiles:', error);
        throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π: ${error.message}`);
      }

      const profiles = (data || [])
        .filter(profile => profile.opt_id && profile.opt_id.trim()) // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
        .map(profile => ({
          ...profile,
          user_type: 'buyer' as const
        }));

      console.log('‚úÖ Loaded buyer profiles:', profiles.length);
      console.log('üìã Sample OPT_IDs:', profiles.slice(0, 5).map(p => p.opt_id));
      setBuyerProfiles(profiles);
    } catch (error) {
      console.error('‚ùå Exception in loadBuyerProfiles:', error);
      throw error;
    }
  }, []);

  const loadSellerProfiles = useCallback(async (): Promise<void> => {
    try {
      console.log('üîÑ Loading seller profiles...');
      const { data, error } = await supabase
        .from('profiles')
        .select('id, full_name, opt_id, telegram')
        .eq('user_type', 'seller')
        .order('full_name', { ascending: true })
        .limit(200);

      if (error) {
        console.error('‚ùå Error loading seller profiles:', error);
        throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π –ø—Ä–æ–¥–∞–≤—Ü–æ–≤: ${error.message}`);
      }

      const profiles = (data || []).map(profile => ({
        ...profile,
        user_type: 'seller' as const
      }));

      console.log('‚úÖ Loaded seller profiles:', profiles.length);
      setSellerProfiles(profiles);
    } catch (error) {
      console.error('‚ùå Exception in loadSellerProfiles:', error);
      throw error;
    }
  }, []);

  useEffect(() => {
    const initialize = async () => {
      try {
        console.log('üöÄ Starting admin order initialization...');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞
        const validRoutes = ['/admin/free-order', '/admin/orders/create'];
        if (!validRoutes.includes(location.pathname)) {
          console.warn('‚ö†Ô∏è Invalid route:', location.pathname);
          setInitState({ isInitializing: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç' });
          navigate('/admin/dashboard');
          return;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if (isAdmin === false) {
          console.warn('‚ö†Ô∏è User is not admin');
          setInitState({ isInitializing: false, error: '–ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
          setTimeout(() => navigate('/'), 2000);
          return;
        }

        // –ñ–¥–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if (isAdmin === null) {
          console.log('‚è≥ Waiting for admin access check...');
          return; // –ï—â–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
        }

        console.log('‚úÖ Admin access confirmed, loading data...');

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        await Promise.all([
          loadBuyerProfiles(),
          loadSellerProfiles()
        ]);

        console.log('‚úÖ All initialization data loaded successfully');
        setInitState({ isInitializing: false, error: null });
      } catch (error) {
        console.error('‚ùå Initialization error:', error);
        const errorMessage = error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏';
        setInitState({ 
          isInitializing: false, 
          error: errorMessage
        });
      }
    };

    initialize();
  }, [isAdmin, location.pathname, navigate, loadBuyerProfiles, loadSellerProfiles]);

  return {
    ...initState,
    buyerProfiles,
    sellerProfiles,
    hasAdminAccess: isAdmin === true
  };
};
