
import React from 'react';
import { toast } from '@/hooks/use-toast';
import { supabase } from '@/integrations/supabase/client';
import { useErrorHandler } from '@/hooks/useErrorHandler';

interface UseAdminProductsActionsProps {
  selectedProducts: string[];
  setSelectedProducts: (products: string[]) => void;
  refetch: () => void;
}

export const useAdminProductsActions = ({
  selectedProducts,
  setSelectedProducts,
  refetch
}: UseAdminProductsActionsProps) => {
  const [isDeleting, setIsDeleting] = React.useState(false);
  const [isUpdatingStatus, setIsUpdatingStatus] = React.useState(false);
  const { handleError } = useErrorHandler();

  const handleBulkStatusChange = async (status: string) => {
    if (selectedProducts.length === 0) {
      toast({
        title: "–í–Ω–∏–º–∞–Ω–∏–µ",
        description: "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞",
        variant: "destructive",
      });
      return;
    }

    setIsUpdatingStatus(true);
    try {
      console.log('üîÑ Updating status for products:', selectedProducts, 'to:', status);
      
      const { error } = await supabase
        .from('products')
        .update({ status })
        .in('id', selectedProducts);

      if (error) {
        console.error('‚ùå Error updating products status:', error);
        throw error;
      }

      toast({
        title: "–£—Å–ø–µ—à–Ω–æ",
        description: `–°—Ç–∞—Ç—É—Å ${selectedProducts.length} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "${status}"`,
      });

      setSelectedProducts([]);
      refetch();
    } catch (error) {
      handleError(error, {
        customMessage: '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–æ–≤',
        logError: true
      });
    } finally {
      setIsUpdatingStatus(false);
    }
  };

  const handleBulkDelete = async () => {
    if (selectedProducts.length === 0) {
      toast({
        title: "–í–Ω–∏–º–∞–Ω–∏–µ",
        description: "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
        variant: "destructive",
      });
      return;
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    const confirmed = window.confirm(
      `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å ${selectedProducts.length} —Ç–æ–≤–∞—Ä–æ–≤? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`
    );
    
    if (!confirmed) {
      return;
    }

    setIsDeleting(true);
    try {
      console.log('üóëÔ∏è Deleting products:', selectedProducts);
      
      const { error } = await supabase
        .from('products')
        .delete()
        .in('id', selectedProducts);

      if (error) {
        console.error('‚ùå Error deleting products:', error);
        throw error;
      }

      toast({
        title: "–£—Å–ø–µ—à–Ω–æ",
        description: `${selectedProducts.length} —Ç–æ–≤–∞—Ä–æ–≤ —É–¥–∞–ª–µ–Ω–æ`,
      });

      setSelectedProducts([]);
      refetch();
    } catch (error) {
      handleError(error, {
        customMessage: '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä—ã',
        logError: true
      });
    } finally {
      setIsDeleting(false);
    }
  };

  return { 
    handleBulkStatusChange, 
    handleBulkDelete, 
    isDeleting,
    isUpdatingStatus
  };
};
