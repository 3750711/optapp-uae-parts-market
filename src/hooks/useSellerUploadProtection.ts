import { useEffect, useRef } from "react";
import { isPWAMode } from "@/utils/pwaOptimizations";
import { useIsMobile } from "@/hooks/use-mobile";
import { logger } from "@/utils/logger";

interface UploadProtectionOptions {
  isUploading: boolean;
  uploadProgress?: number;
  warningMessage?: string;
}

export function useSellerUploadProtection({
  isUploading,
  uploadProgress,
  warningMessage = "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É?"
}: UploadProtectionOptions) {
  const isMobile = useIsMobile();
  const initialStateRef = useRef<History["state"] | null>(null);
  
  useEffect(() => {
    if (!isUploading) return;
    
    // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö –∏/–∏–ª–∏ –≤ PWA ‚Äî –ù–ï –≤–µ—à–∞–µ–º beforeunload, —á—Ç–æ–±—ã –Ω–µ —É–±–∏—Ç—å bfcache
    if (isMobile || isPWAMode()) {
      logger.log('üì± Mobile/PWA detected - skipping beforeunload protection to preserve bfcache');
      return;
    }

    const onBeforeUnload = (e: BeforeUnloadEvent) => {
      e.preventDefault();
      e.returnValue = warningMessage;
      
      logger.log('üõ°Ô∏è Upload protection triggered:', {
        isUploading,
        progress: uploadProgress,
        timestamp: new Date().toISOString()
      });
      
      return warningMessage;
    };
    
    logger.log('üõ°Ô∏è Seller upload protection enabled');
    window.addEventListener("beforeunload", onBeforeUnload);
    
    return () => {
      logger.log('üõ°Ô∏è Seller upload protection disabled');
      window.removeEventListener("beforeunload", onBeforeUnload);
    };
  }, [isUploading, isMobile, warningMessage, uploadProgress]);

  // Additional protection for popstate (back button)
  useEffect(() => {
    if (!isUploading) return;

    // –ó–∞–ø–æ–º–Ω–∏–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    if (initialStateRef.current === null) {
      initialStateRef.current = window.history.state ?? null;
    }

    const onPopState = (e: PopStateEvent) => {
      if (isUploading) {
        logger.log('üîô Back navigation during upload - showing confirmation');
        
        const shouldLeave = window.confirm(warningMessage);
        if (!shouldLeave) {
          // Push current state back to prevent navigation
          const protectionState = { uploadProtection: true, timestamp: Date.now() };
          window.history.pushState(protectionState, '', window.location.href);
        }
      }
    };

    window.addEventListener('popstate', onPopState);
    
    return () => {
      window.removeEventListener('popstate', onPopState);
      
      // –ê–∫–∫—É—Ä–∞—Ç–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
      try {
        if (initialStateRef.current !== null) {
          window.history.replaceState(initialStateRef.current, document.title, location.href);
        }
      } catch (error) {
        logger.warn('‚ö†Ô∏è History state restoration failed:', error);
        // –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
      }
    };
  }, [isUploading, warningMessage]);

  return {
    isProtected: isUploading && !(isMobile || isPWAMode())
  };
}