
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/contexts/AuthContext';
import { useToast } from '@/hooks/use-toast';

interface SimpleOfferData {
  product_id: string;
  max_offer_price: number;
  current_user_offer_price: number;
  has_pending_offer: boolean;
  total_offers_count: number;
}

interface CreateOfferData {
  product_id: string;
  seller_id: string;
  original_price: number;
  offered_price: number;
  message?: string;
}

// –ü—Ä–æ—Å—Ç–æ–π —Ö—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞
export const useSimpleProductOffers = (productId: string) => {
  const { user } = useAuth();
  
  return useQuery({
    queryKey: ['simple-offers', productId, user?.id],
    queryFn: async (): Promise<SimpleOfferData> => {
      console.log('üîç Fetching simple offers for product:', productId, 'user:', user?.id);

      if (!user?.id) {
        console.log('‚ùå No user ID available');
        return {
          product_id: productId,
          max_offer_price: 0,
          current_user_offer_price: 0,
          has_pending_offer: false,
          total_offers_count: 0
        };
      }

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞
      const { data: offers, error } = await supabase
        .from('price_offers')
        .select('offered_price, buyer_id, status')
        .eq('product_id', productId)
        .eq('status', 'pending');

      if (error) {
        console.error('‚ùå Error fetching offers:', error);
        throw error;
      }

      console.log('üìä Raw offers data:', offers);

      // –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
      const maxOffer = offers?.reduce((max, offer) => 
        offer.offered_price > max ? offer.offered_price : max, 0
      ) || 0;

      // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userOffer = offers?.find(offer => offer.buyer_id === user.id);

      const result = {
        product_id: productId,
        max_offer_price: maxOffer,
        current_user_offer_price: userOffer?.offered_price || 0,
        has_pending_offer: !!userOffer,
        total_offers_count: offers?.length || 0
      };

      console.log('‚úÖ Simple offers result:', result);

      return result;
    },
    enabled: !!productId && !!user?.id,
    staleTime: 1000, // 1 second - –±–æ–ª–µ–µ —á–∞—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    refetchOnWindowFocus: true,
    refetchInterval: 5000, // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
  });
};

// –ü—Ä–æ—Å—Ç–æ–π —Ö—É–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
export const useSimpleCreateOffer = () => {
  const queryClient = useQueryClient();
  const { user } = useAuth();
  const { toast } = useToast();

  return useMutation({
    mutationFn: async (data: CreateOfferData) => {
      console.log('üöÄ Creating/updating simple offer:', data);

      if (!user) throw new Error('User not authenticated');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
      const { data: existingOffer } = await supabase
        .from('price_offers')
        .select('id')
        .eq('product_id', data.product_id)
        .eq('buyer_id', user.id)
        .eq('status', 'pending')
        .single();

      if (existingOffer) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        const { data: result, error } = await supabase
          .from('price_offers')
          .update({
            offered_price: data.offered_price,
            message: data.message,
            updated_at: new Date().toISOString()
          })
          .eq('id', existingOffer.id)
          .select()
          .single();

        if (error) throw error;
        console.log('‚úÖ Updated existing offer:', result);
        return result;
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        const { data: result, error } = await supabase
          .from('price_offers')
          .insert({
            product_id: data.product_id,
            buyer_id: user.id,
            seller_id: data.seller_id,
            original_price: data.original_price,
            offered_price: data.offered_price,
            message: data.message,
            status: 'pending'
          })
          .select()
          .single();

        if (error) throw error;
        console.log('‚úÖ Created new offer:', result);
        return result;
      }
    },
    onSuccess: (_, variables) => {
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –¥–ª—è –≤—Å–µ—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      queryClient.invalidateQueries({ 
        queryKey: ['simple-offers', variables.product_id] 
      });
      
      // –¢–∞–∫–∂–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      queryClient.refetchQueries({
        queryKey: ['simple-offers', variables.product_id]
      });
      
      toast({
        title: "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
        description: "–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
      });
    },
    onError: (error: any) => {
      console.error('‚ùå Error creating offer:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
        variant: "destructive",
      });
    }
  });
};
