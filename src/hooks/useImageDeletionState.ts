
import { useState, useCallback, useRef, useEffect } from 'react';

interface UseImageDeletionStateProps {
  onConfirmDelete: (url: string) => Promise<void>;
  deletionDelay?: number;
}

export const useImageDeletionState = ({
  onConfirmDelete,
  deletionDelay = 3000
}: UseImageDeletionStateProps) => {
  const [deletingImages, setDeletingImages] = useState<Set<string>>(new Set());

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è
  const startDeletion = useCallback(async (url: string) => {
    console.log('üóëÔ∏è Starting immediate deletion for:', url);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "—É–¥–∞–ª—è–µ—Ç—Å—è"
    setDeletingImages(prev => new Set(prev).add(url));

    try {
      // –°—Ä–∞–∑—É –≤—ã–ø–æ–ª–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
      await onConfirmDelete(url);
      console.log('‚úÖ Image deletion completed:', url);
    } catch (error) {
      console.error('‚ùå Error deleting image:', error);
    } finally {
      // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç—É—Å "—É–¥–∞–ª—è–µ—Ç—Å—è"
      setDeletingImages(prev => {
        const newSet = new Set(prev);
        newSet.delete(url);
        return newSet;
      });
    }
  }, [onConfirmDelete]);

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const getImageStatus = useCallback((url: string) => {
    if (deletingImages.has(url)) return 'deleting';
    return 'normal';
  }, [deletingImages]);

  return {
    startDeletion,
    getImageStatus,
    cancelDeletion: () => {}, // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    clearImageStatus: () => {} // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  };
};
