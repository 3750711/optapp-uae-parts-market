/* SW: Simple and stable PWA system
   Version bump if you change anything here:
*/
const SW_VERSION = 'v6-stable';
const APP_SHELL_CACHE = `app-shell-${SW_VERSION}`;
const RUNTIME_CACHE = `runtime-${SW_VERSION}`;
const HTML_FALLBACK_URL = '/index.html';

// Cache limits for stability
const MAX_CACHE_SIZE = 50 * 1024 * 1024; // 50MB limit
const MAX_CACHE_ENTRIES = 200;

// –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏/–ø—Ä–æ–≥—Ä–µ–≤–∞ (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–∞–π—Ç–ª–∏—Å—Ç).
// –†–µ–≥—É–ª—è—Ä–∫–∏ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –∫ pathname.
const ROUTE_WHITELIST = [
  /^\/$/,                    // –≥–ª–∞–≤–Ω–∞—è
  /^\/seller(\/.*)?$/,       // seller dashboard
  /^\/admin(\/.*)?$/,        // admin
  /^\/buyer(\/.*)?$/,        // buyer
  /^\/product(\/.*)?$/,      // –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
];

// –§–ª–∞–≥ –ª–æ–≥–æ–≤ ‚Äî —Ç–æ–ª—å–∫–æ –≤ development –æ–∫—Ä—É–∂–µ–Ω–∏–∏:
const DEBUG = false; // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –≤—Å–µ–≥–¥–∞ false –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

// –£—Ç–∏–ª–∏—Ç—ã
const isSameOrigin = (url) => {
  try {
    const u = new URL(url, self.location.origin);
    return u.origin === self.location.origin;
  } catch {
    return false;
  }
};

const isExternalCDN = (url) => {
  try {
    const u = new URL(url);
    const hostname = u.hostname.toLowerCase();
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –≤–Ω–µ—à–Ω–∏–µ CDN
    const externalDomains = [
      'cloudinary.com',
      'res.cloudinary.com',
      'cdn.cloudinary.com',
      'images.cloudinary.com',
      'cdn.jsdelivr.net',
      'fonts.googleapis.com',
      'fonts.gstatic.com'
    ];
    return externalDomains.some(domain => hostname.includes(domain));
  } catch {
    return false;
  }
};

const isAuthRequest = (url) => {
  try {
    const u = new URL(url, self.location.origin);
    const pathname = u.pathname;
    const hostname = u.hostname;
    
    // üö® CRITICAL: Exclude all api.partsbay.ae requests (proxy domain)
    if (hostname.includes('api.partsbay.ae')) {
      return true;
    }
    
    // üö® CRITICAL: Exclude all Supabase API paths  
    if (pathname.startsWith('/rest/') || 
        pathname.startsWith('/auth/') || 
        pathname.startsWith('/functions/') ||
        pathname.startsWith('/v1/') ||
        pathname.includes('supabase') ||
        pathname.includes('session') ||
        pathname.includes('token') ||
        pathname.includes('refresh')) {
      return true;
    }
    
    return false;
  } catch {
    return false;
  }
};

const isWhitelistedRoute = (url) => {
  try {
    const { pathname } = new URL(url, self.location.origin);
    return ROUTE_WHITELIST.some((re) => re.test(pathname));
  } catch {
    return false;
  }
};

const isPrefetchHeader = (req) => {
  // –ë—Ä–∞—É–∑–µ—Ä—ã –º–æ–≥—É—Ç —Å–ª–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è prefetch:
  // - Purpose: prefetch (Chrome —Å—Ç–∞—Ä—ã–µ)
  // - Sec-Purpose: prefetch (Chrome –Ω–æ–≤—ã–µ)
  // - Sec-Fetch-Mode: navigate|no-cors|cors|same-origin (–¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–π –±—É–¥–µ—Ç "navigate")
  const h = req.headers;
  const purpose = h.get('Purpose') || h.get('Sec-Purpose') || '';
  if (purpose.toLowerCase().includes('prefetch')) return true;

  // –ï—Å–ª–∏ HTML –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç ‚Äî —Ç–æ–∂–µ –Ω–µ –Ω–∞—à–∞ ¬´–Ω–∞–≤–∏–≥–∞—Ü–∏—è¬ª.
  const dest = h.get('Sec-Fetch-Dest');
  if (dest && dest !== 'document') return true;

  // –ï—Å–ª–∏ —ç—Ç–æ —è–≤–Ω–æ <link rel="prefetch"> –∑–∞ —Å—Ç–∞—Ç–∏–∫–æ–π (script/style), —Ç–æ destination –±—É–¥–µ—Ç script/style/etc.
  // –ú—ã –∏—Ö –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–º —Ö—ç–Ω–¥–ª–µ—Ä–µ.
  return false;
};

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞/–∞–∫—Ç–∏–≤–∞—Ü–∏—è
self.addEventListener('install', (event) => {
  if (DEBUG) console.log('[SW] install', SW_VERSION);
  event.waitUntil(self.skipWaiting());
});

self.addEventListener('activate', (event) => {
  if (DEBUG) console.log('[SW] activate', SW_VERSION);
  event.waitUntil((async () => {
    // –°–Ω–æ—Å–∏–º —Å—Ç–∞—Ä—ã–µ –∫—ç—à–∏ –¥—Ä—É–≥–∏—Ö –≤–µ—Ä—Å–∏–π
    const keys = await caches.keys();
    await Promise.all(
      keys
        .filter((k) => !k.includes(SW_VERSION))
        .map((k) => caches.delete(k))
    );
    
    // Clean up oversized caches
    await cleanupCache();
    
    await self.clients.claim();
  })());
});

// Cache cleanup with LRU strategy for stability
async function cleanupCache() {
  try {
    const cache = await caches.open(RUNTIME_CACHE);
    const keys = await cache.keys();
    
    if (keys.length > MAX_CACHE_ENTRIES) {
      // Remove oldest 20% of entries
      const removeCount = Math.floor(keys.length * 0.2);
      const keysToRemove = keys.slice(0, removeCount);
      
      await Promise.all(keysToRemove.map(key => cache.delete(key)));
      if (DEBUG) console.log(`[SW] Cleaned up ${removeCount} cache entries`);
    }
  } catch (e) {
    if (DEBUG) console.warn('[SW] Cache cleanup failed:', e);
  }
}

// Background Sync event for simple offline capabilities
self.addEventListener('sync', (event) => {
  if (DEBUG) console.log('[SW] Background sync event:', event.tag);
  
  if (event.tag.startsWith('sync-')) {
    event.waitUntil(handleBackgroundSync(event.tag));
  }
});

// Handle background sync - notify client to process queue
async function handleBackgroundSync(tag) {
  try {
    if (DEBUG) console.log('[SW] Processing background sync:', tag);
    
    // Notify client to process sync queue
    const clients = await self.clients.matchAll();
    clients.forEach(client => {
      client.postMessage({
        type: 'BACKGROUND_SYNC',
        tag: tag
      });
    });
    
  } catch (error) {
    if (DEBUG) console.error('[SW] Background sync failed:', error);
  }
}

// Check if request has authentication headers
const hasAuthHeaders = (request) => {
  const auth = request.headers.get('authorization');
  const cookie = request.headers.get('cookie');
  const apiKey = request.headers.get('apikey');
  
  return !!(auth || apiKey || (cookie && (cookie.includes('sb-') || cookie.includes('supabase'))));
};

// –ù–∞–≤–∏–≥–∞—Ü–∏–∏: —Ç–æ–ª—å–∫–æ –Ω–∞—Å—Ç–æ—è—â–∏–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç (SPA), –±–µ–∑ prefetch
self.addEventListener('fetch', (event) => {
  const { request } = event;

  // üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –ò—Å–∫–ª—é—á–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ CDN (–æ—Å–æ–±–µ–Ω–Ω–æ Cloudinary)
  if (isExternalCDN(request.url)) {
    return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ CDN –Ω–∞–ø—Ä—è–º—É—é –∫ —Å–µ—Ç–∏
  }

  // üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: Never cache requests with auth headers
  if (hasAuthHeaders(request)) {
    if (DEBUG) console.log('[SW] SKIP auth headers:', request.url);
    return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –Ω–∞–ø—Ä—è–º—É—é
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ same-origin –∑–∞–ø—Ä–æ—Å—ã
  if (!isSameOrigin(request.url)) {
    return;
  }

  // üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: AUTH –∑–∞–ø—Ä–æ—Å—ã –ù–ï –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å—Å—è SW
  if (isAuthRequest(request.url)) {
    if (DEBUG) console.log('[SW] SKIP AUTH request:', request.url, request.method);
    return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ AUTH –∑–∞–ø—Ä–æ—Å—ã –Ω–∞–ø—Ä—è–º—É—é –∫ —Å–µ—Ä–≤–µ—Ä—É
  }

  // üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –ò—Å–∫–ª—é—á–∞–µ–º main entry —Ñ–∞–π–ª –æ—Ç SW –æ–±—Ä–∞–±–æ—Ç–∫–∏
  if (request.url.includes('/assets/main-')) {
    if (DEBUG) console.log('[SW] SKIP main entry file to prevent corruption:', request.url);
    return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º main —Ñ–∞–π–ª –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è NS_ERROR_CORRUPTED_CONTENT
  }

  // ‚ö° –ö–ï–®–ò–†–û–í–ê–ù–ò–ï –°–¢–ê–¢–ò–ö–ò: Cache First –¥–ª—è JS/CSS
  const dest = request.destination;
  if (dest === 'script' || dest === 'style') {
    event.respondWith((async () => {
      const cache = await caches.open(APP_SHELL_CACHE);
      const cached = await cache.match(request);
      if (cached) {
        if (DEBUG) console.log('[SW] Cache hit (static):', request.url);
        return cached;
      }
      
      try {
        const response = await fetch(request);
        if (response.ok) {
          cache.put(request, response.clone());
          if (DEBUG) console.log('[SW] Cached static:', request.url);
        }
        return response;
      } catch (e) {
        if (DEBUG) console.warn('[SW] Static fetch failed:', request.url, e);
        throw e;
      }
    })());
    return;
  }

  // –ù–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—ã: mode=navigate –ò–õ–ò accept: text/html,
  // –Ω–æ –∏—Å–∫–ª—é—á–∞–µ–º prefetch –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –Ω–µ–¥–æ–∫—É–º–µ–Ω—Ç–Ω—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.
  const isNavigateMode = request.mode === 'navigate';
  const accept = request.headers.get('accept') || '';
  const looksLikeHTML = accept.includes('text/html');

  // –í–∞–∂–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: prefetch –Ω–µ —Ç—Ä–æ–≥–∞–µ–º, –∏–Ω–∞—á–µ –ª–æ–≤–∏–º NS_BINDING_ABORTED –ø—Ä–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏ —Å <link rel="prefetch">
  if (isPrefetchHeader(request)) {
    if (DEBUG) console.log('[SW] skip prefetch', request.url);
    return; // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ —Å–µ—Ç–∏/–±—Ä–∞—É–∑–µ—Ä–∞
  }

  if (isNavigateMode || looksLikeHTML) {
    // –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è whitelisted —Ä–æ—É—Ç–æ–≤ SPA
    if (!isWhitelistedRoute(request.url)) {
      if (DEBUG) console.log('[SW] nav not whitelisted, passthrough', request.url);
      return; // –ø—É—Å–∫–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é
    }

    // App-Shell —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: Stale-While-Revalidate –¥–ª—è HTML (index.html)
    event.respondWith((async () => {
      try {
        // –ü—Ä–æ–±—É–µ–º —Å–µ—Ç—å –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å
        const network = await fetch(request);
        // –¢–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ HTML –∫–ª–∞–¥—ë–º –≤ –∫—ç—à
        if (network && network.ok && (network.headers.get('content-type') || '').includes('text/html')) {
          const cache = await caches.open(APP_SHELL_CACHE);
          cache.put(HTML_FALLBACK_URL, network.clone());
        }
        return network;
      } catch (e) {
        // Offline fallback: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π index.html
        const cache = await caches.open(APP_SHELL_CACHE);
        const cached = await cache.match(HTML_FALLBACK_URL);
        if (cached) {
          return cached;
        }
        // Last resort: –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ—Ñ–ª–∞–π–Ω-–∑–∞–≥–ª—É—à–∫–∞
        return new Response('<!doctype html><title>Offline</title><h1>Offline</h1>', {
          headers: { 'content-type': 'text/html' },
          status: 200,
        });
      }
    })());
  }
});

// –ü—Ä–æ–≥—Ä–µ–≤ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–±–µ–∑ –∑–∞–ø—É—Å–∫–∞ <link rel=prefetch>)
// –ñ—ë—Å—Ç–∫–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ–º–µ–Ω –∏ –≤–∞–π—Ç–ª–∏—Å—Ç, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≤ CDN-–ø—Ä–æ–∫–∞—á–∫—É
self.addEventListener('message', (event) => {
  const { data } = event;
  if (!data || typeof data !== 'object') return;

  if (data.type === 'WARM_ROUTE' && typeof data.url === 'string') {
    const url = new URL(data.url, self.location.origin).toString();
    if (!isSameOrigin(url) || !isWhitelistedRoute(url)) {
      return;
    }
    event.waitUntil((async () => {
      try {
        const resp = await fetch(url, { method: 'GET', credentials: 'same-origin' });
        if (resp.ok && (resp.headers.get('content-type') || '').includes('text/html')) {
          const cache = await caches.open(APP_SHELL_CACHE);
          await cache.put(HTML_FALLBACK_URL, resp.clone());
        }
      } catch (e) {
        // –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞
      }
    })());
  }

  if (data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});