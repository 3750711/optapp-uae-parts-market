import { test, expect, Page } from '@playwright/test';

// Helper to count network requests matching a pattern
async function countRequests(page: Page, pattern: RegExp) {
  const logs: string[] = [];
  page.on('request', request => {
    if (pattern.test(request.url())) {
      logs.push(request.url());
      console.log(`üìä Captured request: ${request.url()}`);
    }
  });
  return () => logs.length;
}

// Helper to wait for stable network (no requests for X ms)
async function waitForNetworkIdle(page: Page, timeout = 2000) {
  return page.waitForLoadState('networkidle', { timeout });
}

test.describe('Admin Sessions & Authorization', () => {
  let adminEmail: string;
  let adminPassword: string;

  test.beforeAll(() => {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫—Ä–µ–¥—ã –∞–¥–º–∏–Ω–∞
    adminEmail = process.env.TEST_ADMIN_EMAIL || 'admin@test.com';
    adminPassword = process.env.TEST_ADMIN_PASSWORD || 'testpassword';
  });

  test.beforeEach(async ({ page }) => {
    // –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
    await page.goto('/');
    await page.evaluate(() => {
      localStorage.clear();
      sessionStorage.clear();
    });
  });

  test('1. –õ–æ–≥–∏–Ω ‚Üí –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∞–¥–º–∏–Ω–∫–µ (–±–µ–∑ –ª–∞–≤–∏–Ω—ã –∑–∞–ø—Ä–æ—Å–æ–≤)', async ({ page }) => {
    const countProfiles = await countRequests(page, /\/rest\/v1\/profiles/);
    
    // –õ–æ–≥–∏–Ω
    await page.goto('/login');
    await page.fill('input[type="email"]', adminEmail);
    await page.fill('input[type="password"]', adminPassword);
    await page.click('button[type="submit"]');
    
    // –ñ–¥–µ–º —É—Å–ø–µ—à–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞
    await expect(page).toHaveURL('/admin', { timeout: 10000 });
    await waitForNetworkIdle(page);
    
    const initialProfileRequests = countProfiles();
    console.log(`Initial profile requests: ${initialProfileRequests}`);
    
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∞–¥–º–∏–Ω—Å–∫–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    await page.click('a[href="/admin/orders"]');
    await waitForNetworkIdle(page, 1000);
    
    await page.click('a[href="/admin/users"]');
    await waitForNetworkIdle(page, 1000);
    
    await page.click('a[href="/admin/products"]');
    await waitForNetworkIdle(page, 1000);
    
    const finalProfileRequests = countProfiles();
    console.log(`Final profile requests: ${finalProfileRequests}`);
    
    // –ö—Ä–∏—Ç–µ—Ä–∏–π: profiles –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è ‚â§1 —Ä–∞–∑ –∑–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    expect(finalProfileRequests).toBeLessThanOrEqual(1);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ 401/refresh —Ü–∏–∫–ª–æ–≤
    const responses401 = [];
    page.on('response', response => {
      if (response.status() === 401) {
        responses401.push(response.url());
      }
    });
    
    expect(responses401.length).toBe(0);
  });

  test('2. Token refresh (–±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ—Ñ–∏–ª—è)', async ({ page }) => {
    // –õ–æ–≥–∏–Ω
    await page.goto('/login');
    await page.fill('input[type="email"]', adminEmail);
    await page.fill('input[type="password"]', adminPassword);
    await page.click('button[type="submit"]');
    await expect(page).toHaveURL('/admin');
    
    const countProfiles = await countRequests(page, /\/rest\/v1\/profiles/);
    await waitForNetworkIdle(page);
    const initialProfileRequests = countProfiles();
    
    // –°–∏–º—É–ª—è—Ü–∏—è –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∏ refresh
    await page.evaluate(() => {
      // –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ "—Å—Ç–∞—Ä–∏–º" access_token –≤ localStorage
      const authKey = Object.keys(localStorage).find(key => 
        key.startsWith('sb-vfiylfljiixqkjfqubyq-auth-token')
      );
      if (authKey) {
        const authData = JSON.parse(localStorage.getItem(authKey) || '{}');
        if (authData.access_token) {
          // –î–µ–ª–∞–µ–º —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º (–∏—Å—Ç–µ–∫—à–∏–π)
          authData.expires_at = Date.now() / 1000 - 3600; // —á–∞—Å –Ω–∞–∑–∞–¥
          localStorage.setItem(authKey, JSON.stringify(authData));
        }
      }
    });
    
    // –¢—Ä–∏–≥–≥–µ—Ä–∏–º –∑–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –≤—ã–∑–≤–∞—Ç—å TOKEN_REFRESHED
    await page.reload();
    await waitForNetworkIdle(page, 3000);
    
    const finalProfileRequests = countProfiles();
    
    // –ö—Ä–∏—Ç–µ—Ä–∏–π: –ø—Ä–æ—Ñ–∏–ª—å –ù–ï –ø–µ—Ä–µ–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏ TOKEN_REFRESHED
    expect(finalProfileRequests - initialProfileRequests).toBe(0);
    
    // UI –Ω–µ –¥–æ–ª–∂–µ–Ω "–º–∏–≥–∞—Ç—å" - –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–¥–º–∏–Ω—Å–∫–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –≤–∏–¥–Ω–∞
    await expect(page.locator('nav')).toBeVisible();
    await expect(page.locator('a[href="/admin/orders"]')).toBeVisible();
  });

  test('3. –§–æ–Ω/–≤–æ–∑–≤—Ä–∞—Ç (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è)', async ({ page }) => {
    // –õ–æ–≥–∏–Ω –∏ –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–∫–∞–∑–æ–≤
    await page.goto('/login');
    await page.fill('input[type="email"]', adminEmail);
    await page.fill('input[type="password"]', adminPassword);
    await page.click('button[type="submit"]');
    await expect(page).toHaveURL('/admin');
    
    await page.click('a[href="/admin/orders"]');
    await waitForNetworkIdle(page);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –∏–ª–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
    const searchInput = page.locator('input[placeholder*="search"], input[placeholder*="–ø–æ–∏—Å–∫"]').first();
    if (await searchInput.isVisible()) {
      await searchInput.fill('test-search');
    }
    
    const countNetworkRequests = await countRequests(page, /\/rest\/v1\//);
    const initialRequests = countNetworkRequests();
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏—é/—Ñ–æ–Ω
    await page.evaluate(() => {
      document.dispatchEvent(new Event('visibilitychange'));
      Object.defineProperty(document, 'visibilityState', {
        value: 'hidden',
        writable: true
      });
    });
    
    // –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥
    await page.waitForTimeout(30000);
    
    // –í–æ–∑–≤—Ä–∞—Ç –≤ —Ñ–æ–∫—É—Å
    await page.evaluate(() => {
      Object.defineProperty(document, 'visibilityState', {
        value: 'visible',
        writable: true
      });
      document.dispatchEvent(new Event('visibilitychange'));
    });
    
    await waitForNetworkIdle(page, 1000);
    const finalRequests = countNetworkRequests();
    
    // –ö—Ä–∏—Ç–µ—Ä–∏–π: 0-1 —Å–µ—Ç–µ–≤–æ–π –∑–∞–ø—Ä–æ—Å –º–∞–∫—Å–∏–º—É–º –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ
    expect(finalRequests - initialRequests).toBeLessThanOrEqual(1);
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
    if (await searchInput.isVisible()) {
      await expect(searchInput).toHaveValue('test-search');
    }
  });

  test('4. –û—Ñ—Ñ–ª–∞–π–Ω ‚Üí –æ–Ω–ª–∞–π–Ω (–±–µ–∑ –ø–æ—Ç–µ—Ä–∏ —Å–µ—Å—Å–∏–∏)', async ({ page, context }) => {
    // –õ–æ–≥–∏–Ω
    await page.goto('/login');
    await page.fill('input[type="email"]', adminEmail);
    await page.fill('input[type="password"]', adminPassword);
    await page.click('button[type="submit"]');
    await expect(page).toHaveURL('/admin');
    
    await page.click('a[href="/admin/orders"]');
    await waitForNetworkIdle(page);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –æ—Ñ—Ñ–ª–∞–π–Ω
    await context.setOffline(true);
    await page.waitForTimeout(5000);
    
    // –í–æ–∑–≤—Ä–∞—Ç –æ–Ω–ª–∞–π–Ω
    await context.setOffline(false);
    await waitForNetworkIdle(page, 5000);
    
    // –ö—Ä–∏—Ç–µ—Ä–∏–π: –Ω–µ—Ç –ø–æ—Ç–µ—Ä–∏ —Å–µ—Å—Å–∏–∏, –Ω–µ—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ re-login
    await expect(page).toHaveURL('/admin/orders');
    await expect(page.locator('nav')).toBeVisible();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–¥–º–∏–Ω—Å–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    const adminButton = page.locator('button', { hasText: /admin/i }).first();
    if (await adminButton.isVisible()) {
      await expect(adminButton).toBeEnabled();
    }
  });

  test('5. –ú—É–ª—å—Ç–∏-—Ç–∞–± (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ª–æ–≥–∞—É—Ç–∞)', async ({ page, context }) => {
    // –õ–æ–≥–∏–Ω –≤ –ø–µ—Ä–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
    await page.goto('/login');
    await page.fill('input[type="email"]', adminEmail);
    await page.fill('input[type="password"]', adminPassword);
    await page.click('button[type="submit"]');
    await expect(page).toHaveURL('/admin');
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤—Ç–æ—Ä—É—é –≤–∫–ª–∞–¥–∫—É
    const secondTab = await context.newPage();
    await secondTab.goto('/admin');
    await expect(secondTab).toHaveURL('/admin');
    
    const countProfilesTab2 = await countRequests(secondTab, /\/rest\/v1\/profiles/);
    await waitForNetworkIdle(secondTab);
    const initialProfilesTab2 = countProfilesTab2();
    
    // –†–∞–∑–ª–æ–≥–∏–Ω–∏–≤–∞–µ–º—Å—è –≤ –ø–µ—Ä–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
    const logoutButton = page.locator('button', { hasText: /logout|–≤—ã—Ö–æ–¥/i }).first();
    if (await logoutButton.isVisible()) {
      await logoutButton.click();
    } else {
      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ - –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π logout
      await page.evaluate(() => {
        (window as any).authContext?.signOut?.();
      });
    }
    
    // –ö—Ä–∏—Ç–µ—Ä–∏–π: –≤—Ç–æ—Ä–∞—è –≤–∫–ª–∞–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ /login –∑–∞ ‚â§2 —Å–µ–∫—É–Ω–¥—ã
    await expect(secondTab).toHaveURL('/login', { timeout: 2000 });
    
    const finalProfilesTab2 = countProfilesTab2();
    
    // –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ª–∏—à–Ω–∏—Ö —Ñ–µ—Ç—á–µ–π –ø—Ä–æ—Ñ–∏–ª—è –≤–æ –≤—Ç–æ—Ä–æ–π –≤–∫–ª–∞–¥–∫–µ
    expect(finalProfilesTab2 - initialProfilesTab2).toBe(0);
    
    await secondTab.close();
  });

  test('6. TTL-–∫—ç—à –∏—Å—Ç—ë–∫ (—Ä–æ–≤–Ω–æ –æ–¥–∏–Ω —Ä–µ—Ñ–µ—Ç—á)', async ({ page }) => {
    // –õ–æ–≥–∏–Ω
    await page.goto('/login');
    await page.fill('input[type="email"]', adminEmail);
    await page.fill('input[type="password"]', adminPassword);
    await page.click('button[type="submit"]');
    await expect(page).toHaveURL('/admin');
    await waitForNetworkIdle(page);
    
    // –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ –ø—Ä–æ—Ç—É—Ö–∞–Ω–∏–µ TTL –∫—ç—à–∞ (–∏–º–∏—Ç–∏—Ä—É–µ–º >2 –º–∏–Ω—É—Ç—ã)
    await page.evaluate(() => {
      const userId = (window as any).authContext?.user?.id;
      if (userId) {
        // –î–µ–ª–∞–µ–º –∫—ç—à "—Å—Ç–∞—Ä—ã–º"
        const oldTimestamp = Date.now() - (3 * 60 * 1000); // 3 –º–∏–Ω—É—Ç—ã –Ω–∞–∑–∞–¥
        sessionStorage.setItem(`profile_${userId}_time`, String(oldTimestamp));
      }
    });
    
    const countProfiles = await countRequests(page, /\/rest\/v1\/profiles/);
    const initialProfileRequests = countProfiles();
    
    // –¢—Ä–∏–≥–≥–µ—Ä: –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–æ–ª–∂–µ–Ω –≤—ã–∑–≤–∞—Ç—å —Ä–µ—Ñ–µ—Ç—á
    await page.click('a[href="/admin/users"]');
    await waitForNetworkIdle(page, 3000);
    
    const finalProfileRequests = countProfiles();
    
    // –ö—Ä–∏—Ç–µ—Ä–∏–π: —Ä–æ–≤–Ω–æ –û–î–ò–ù —Ä–µ—Ñ–µ—Ç—á –ø—Ä–æ—Ñ–∏–ª—è
    expect(finalProfileRequests - initialProfileRequests).toBe(1);
  });

  test('7. –î–æ—Å—Ç—É–ø –Ω–µ-–∞–¥–º–∏–Ω–∞ (–Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–∫–∞–∑)', async ({ page }) => {
    // –°–æ–∑–¥–∞–µ–º/–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ –∞–¥–º–∏–Ω–∞)
    const userEmail = process.env.TEST_USER_EMAIL || 'user@test.com';
    const userPassword = process.env.TEST_USER_PASSWORD || 'testpassword';
    
    const countProfiles = await countRequests(page, /\/rest\/v1\/profiles/);
    const countVerifyAccess = await countRequests(page, /verifyAdminAccess/);
    
    // –õ–æ–≥–∏–Ω –æ–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    await page.goto('/login');
    await page.fill('input[type="email"]', userEmail);
    await page.fill('input[type="password"]', userPassword);
    await page.click('button[type="submit"]');
    
    // –ñ–¥–µ–º, –ø–æ–∫–∞ –ª–æ–≥–∏–Ω –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è
    await page.waitForTimeout(2000);
    
    // –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ
    await page.goto('/admin');
    
    // –ö—Ä–∏—Ç–µ—Ä–∏–π: –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω" –±–µ–∑ —Å–µ—Ç–µ–≤–æ–π –¥–µ—Ä–≥–æ—Ç–Ω–∏
    await expect(
      page.locator('text=/–¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â|access denied|unauthorized/i')
    ).toBeVisible({ timeout: 3000 });
    
    // –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏–∑–±—ã—Ç–æ—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    const totalProfiles = countProfiles();
    const totalVerifyAccess = countVerifyAccess();
    
    expect(totalProfiles).toBeLessThanOrEqual(2); // –ª–æ–≥–∏–Ω + –æ–¥–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
    expect(totalVerifyAccess).toBeLessThanOrEqual(1); // –º–∞–∫—Å–∏–º—É–º –æ–¥–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
  });

  test('–û–±—â–∏–µ –∏–Ω–≤–∞—Ä–∏–∞–Ω—Ç—ã (–∑–∞—â–∏—Ç–∞ –æ—Ç —Ä–µ–≥—Ä–µ—Å—Å–∏–∏)', async ({ page }) => {
    // –õ–æ–≥–∏–Ω
    await page.goto('/login');
    await page.fill('input[type="email"]', adminEmail);
    await page.fill('input[type="password"]', adminPassword);
    await page.click('button[type="submit"]');
    await expect(page).toHaveURL('/admin');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—à–∏–±–æ–∫ –≤ –∫–æ–Ω—Å–æ–ª–∏
    const consoleErrors: string[] = [];
    page.on('console', msg => {
      if (msg.type() === 'error') {
        consoleErrors.push(msg.text());
      }
    });
    
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    await page.click('a[href="/admin/orders"]');
    await waitForNetworkIdle(page);
    
    await page.click('a[href="/admin/products"]');
    await waitForNetworkIdle(page);
    
    // –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
    const criticalErrors = consoleErrors.filter(err => 
      err.includes('storage quota exceeded') ||
      err.includes('indexedDB blocked') ||
      err.includes('Failed to fetch') ||
      err.includes('NetworkError')
    );
    
    expect(criticalErrors.length).toBe(0);
    
    // PWA: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è
    const hasServiceWorker = await page.evaluate(() => 'serviceWorker' in navigator);
    if (hasServiceWorker) {
      console.log('‚úÖ PWA capabilities detected');
    }
  });
});