import { createServiceClient } from '../_shared/client.ts';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type, novu-signature',
};

Deno.serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const payload = await req.json();
    
    console.log('üîî [Novu Webhook] Received event:', JSON.stringify(payload, null, 2));

    // Novu –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
    // –î–ª—è webhook step –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –≤ payload
    const eventPayload = payload.payload || payload;
    
    const { productId, priceChanged, newPrice, oldPrice } = eventPayload;

    if (!productId) {
      console.error('‚ùå [Novu Webhook] Missing productId in payload');
      return new Response(
        JSON.stringify({ error: 'Missing productId' }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 400 }
      );
    }

    console.log('üì§ [Novu Webhook] Sending to Telegram:', {
      productId,
      priceChanged,
      newPrice,
      oldPrice
    });

    // –°–æ–∑–¥–∞–µ–º Supabase client
    const supabaseClient = createServiceClient();

    // –í—ã–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
    const { data, error } = await supabaseClient.functions.invoke('send-telegram-notification', {
      body: {
        productId,
        notificationType: 'repost',
        priceChanged: priceChanged || false,
        newPrice,
        oldPrice
      }
    });

    if (error) {
      console.error('‚ùå [Novu Webhook] Failed to send Telegram notification:', error);
      return new Response(
        JSON.stringify({ error: 'Failed to send notification', details: error }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 500 }
      );
    }

    console.log('‚úÖ [Novu Webhook] Telegram notification sent successfully:', data);

    return new Response(
      JSON.stringify({ success: true, data }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );

  } catch (error) {
    console.error('üí• [Novu Webhook] Error:', error);
    return new Response(
      JSON.stringify({ error: error.message }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 500 }
    );
  }
});
