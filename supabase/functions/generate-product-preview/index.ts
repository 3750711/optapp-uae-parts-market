
import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.7.1'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

// –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è compressImageTo400KB –¥–ª—è Deno Edge Runtime
async function createPreviewImageTo20KB(imageBuffer: ArrayBuffer): Promise<Uint8Array> {
  const MAX_SIZE_KB = 20;
  const MAX_SIZE_BYTES = MAX_SIZE_KB * 1024;
  
  console.log('üé® Starting preview creation (target: 20KB)');
  console.log('üìè Original image buffer size:', Math.round(imageBuffer.byteLength / 1024), 'KB');
  
  // –°–æ–∑–¥–∞–µ–º Canvas –≤ Deno —Å—Ä–µ–¥–µ
  try {
    // –í Deno Edge Runtime –∏—Å–ø–æ–ª—å–∑—É–µ–º OffscreenCanvas –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    const canvas = new OffscreenCanvas(150, 150);
    const ctx = canvas.getContext('2d');
    
    if (!ctx) {
      throw new Error('Cannot get 2D context from OffscreenCanvas');
    }

    // –°–æ–∑–¥–∞–µ–º ImageBitmap –∏–∑ buffer
    const blob = new Blob([imageBuffer]);
    const imageBitmap = await createImageBitmap(blob);
    
    console.log('üìê Original dimensions:', imageBitmap.width, 'x', imageBitmap.height);
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π –¥–ª—è 150x150
    const targetSize = 150;
    let { width, height } = imageBitmap;
    
    if (width > height) {
      height = (height * targetSize) / width;
      width = targetSize;
    } else {
      width = (width * targetSize) / height;
      height = targetSize;
    }
    
    console.log('üîÑ Resizing to:', Math.round(width), 'x', Math.round(height));
    
    // –†–∏—Å—É–µ–º –Ω–∞ canvas —Å —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    canvas.width = 150;
    canvas.height = 150;
    
    // –ë–µ–ª—ã–π —Ñ–æ–Ω
    ctx.fillStyle = '#FFFFFF';
    ctx.fillRect(0, 0, 150, 150);
    
    // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const offsetX = (150 - width) / 2;
    const offsetY = (150 - height) / 2;
    
    ctx.drawImage(imageBitmap, offsetX, offsetY, width, height);
    
    // –ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–µ —Å–∂–∞—Ç–∏–µ –∫–∞–∫ –≤ compressImageTo400KB
    let quality = 0.9;
    let attempts = 0;
    const maxAttempts = 15;
    
    while (attempts < maxAttempts) {
      const blob = await canvas.convertToBlob({
        type: 'image/jpeg',
        quality: quality
      });
      
      console.log(`Attempt ${attempts + 1}: Size ${Math.round(blob.size / 1024)}KB with quality ${quality.toFixed(2)}`);
      
      if (blob.size <= MAX_SIZE_BYTES) {
        // –î–æ—Å—Ç–∏–≥–ª–∏ –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        const arrayBuffer = await blob.arrayBuffer();
        const result = new Uint8Array(arrayBuffer);
        
        console.log('‚úÖ Preview created successfully:', Math.round(result.length / 1024), 'KB');
        return result;
      }
      
      // –£–º–µ–Ω—å—à–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
      if (quality > 0.2) {
        quality -= 0.1;
      } else {
        // –ï—Å–ª–∏ –∫–∞—á–µ—Å—Ç–≤–æ —É–∂–µ –æ—á–µ–Ω—å –Ω–∏–∑–∫–æ–µ, —É–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
        const newSize = Math.round(canvas.width * 0.9);
        canvas.width = newSize;
        canvas.height = newSize;
        
        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å –Ω–æ–≤—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
        ctx.fillStyle = '#FFFFFF';
        ctx.fillRect(0, 0, newSize, newSize);
        
        const newWidth = width * 0.9;
        const newHeight = height * 0.9;
        const newOffsetX = (newSize - newWidth) / 2;
        const newOffsetY = (newSize - newHeight) / 2;
        
        ctx.drawImage(imageBitmap, newOffsetX, newOffsetY, newWidth, newHeight);
        quality = 0.8; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
      }
      
      attempts++;
    }
    
    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∏—á—å 20KB, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º
    const finalBlob = await canvas.convertToBlob({
      type: 'image/jpeg',
      quality: 0.1
    });
    
    const finalArrayBuffer = await finalBlob.arrayBuffer();
    const finalResult = new Uint8Array(finalArrayBuffer);
    
    console.warn('‚ö†Ô∏è Could not compress to exactly 20KB. Final size:', Math.round(finalResult.length / 1024), 'KB');
    return finalResult;
    
  } catch (canvasError) {
    console.error('üí• Canvas approach failed:', canvasError.message);
    
    // Fallback: –ø—Ä–æ—Å—Ç–æ–µ —É—Ä–µ–∑–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (–Ω–µ –∏–¥–µ–∞–ª—å–Ω–æ, –Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç)
    console.log('üîÑ Using fallback approach...');
    
    if (imageBuffer.byteLength <= MAX_SIZE_BYTES) {
      return new Uint8Array(imageBuffer);
    }
    
    // –ü—Ä–æ—Å—Ç–æ–π fallback - –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 20KB (–º–æ–∂–µ—Ç –ø–æ–≤—Ä–µ–¥–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
    const fallbackResult = new Uint8Array(imageBuffer.slice(0, MAX_SIZE_BYTES));
    console.warn('‚ö†Ô∏è Fallback used, image may be corrupted. Size:', Math.round(fallbackResult.length / 1024), 'KB');
    return fallbackResult;
  }
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log('üöÄ Generate preview function started');
    
    const { imageUrl, productId } = await req.json();
    
    console.log('üìã Request params:', {
      imageUrl: imageUrl ? `${imageUrl.substring(0, 50)}...` : 'undefined',
      productId: productId || 'undefined',
      hasImageUrl: !!imageUrl,
      hasProductId: !!productId
    });
    
    if (!imageUrl) {
      console.error('‚ùå No imageUrl provided');
      return new Response(
        JSON.stringify({ success: false, error: 'Image URL is required' }),
        { 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
          status: 400 
        }
      );
    }

    console.log('üîß Initializing Supabase client...');
    const supabaseUrl = Deno.env.get('SUPABASE_URL');
    const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY');
    
    if (!supabaseServiceKey) {
      console.error('‚ùå SUPABASE_SERVICE_ROLE_KEY not found');
      throw new Error('Service role key not configured');
    }
    
    const supabase = createClient(supabaseUrl!, supabaseServiceKey);

    console.log('üåê Fetching original image from:', imageUrl);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
    
    try {
      const response = await fetch(imageUrl, {
        signal: controller.signal,
        headers: {
          'User-Agent': 'Supabase-Function/1.0'
        }
      });
      
      clearTimeout(timeoutId);
      
      if (!response.ok) {
        throw new Error(`Failed to fetch image: ${response.status} ${response.statusText}`);
      }
      
      const contentType = response.headers.get('content-type');
      console.log('üìÑ Image content type:', contentType);
      
      if (!contentType || !contentType.startsWith('image/')) {
        throw new Error(`Invalid content type: ${contentType}. Expected image/*`);
      }

      const imageBuffer = await response.arrayBuffer();
      console.log('üì¶ Original image downloaded:', Math.round(imageBuffer.byteLength / 1024), 'KB');
      
      if (imageBuffer.byteLength === 0) {
        throw new Error('Downloaded image is empty');
      }
      
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é 20KB –∏—Å–ø–æ–ª—å–∑—É—è –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
      console.log('üé® Creating 20KB preview...');
      const previewData = await createPreviewImageTo20KB(imageBuffer);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–µ–≤—å—é
      const timestamp = Date.now();
      const randomId = Math.random().toString(36).substring(7);
      const fileName = `preview_${productId || timestamp}_${randomId}.jpg`;
      const filePath = `previews/${fileName}`;

      console.log('‚òÅÔ∏è Uploading preview to storage:', filePath);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–≤—å—é –≤ Storage
      const { data, error } = await supabase.storage
        .from('product-images')
        .upload(filePath, previewData, {
          contentType: 'image/jpeg',
          cacheControl: '31536000',
          upsert: false
        });

      if (error) {
        console.error('‚ùå Storage upload error:', error);
        throw new Error(`Failed to upload preview: ${error.message}`);
      }

      console.log('‚úÖ Preview uploaded successfully:', data.path);

      // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL –ø—Ä–µ–≤—å—é
      const { data: urlData } = supabase.storage
        .from('product-images')
        .getPublicUrl(filePath);

      const previewUrl = urlData.publicUrl;
      
      const result = {
        success: true,
        previewUrl,
        originalSize: imageBuffer.byteLength,
        previewSize: previewData.length,
        compressionRatio: Math.round((previewData.length / imageBuffer.byteLength) * 100)
      };
      
      console.log('üéâ SUCCESS! Preview generation completed:', {
        previewUrl: previewUrl.substring(previewUrl.lastIndexOf('/') + 1),
        originalKB: Math.round(result.originalSize / 1024),
        previewKB: Math.round(result.previewSize / 1024),
        compressionRatio: result.compressionRatio + '%'
      });

      return new Response(
        JSON.stringify(result),
        { 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      );
      
    } catch (fetchError) {
      clearTimeout(timeoutId);
      console.error('üí• Fetch error:', fetchError.message);
      throw fetchError;
    }

  } catch (error) {
    console.error('üí• FUNCTION ERROR:', {
      message: error.message,
      stack: error.stack,
      name: error.name
    });
    
    return new Response(
      JSON.stringify({ 
        success: false,
        error: 'Failed to generate preview',
        details: error.message,
        timestamp: new Date().toISOString()
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 500 
      }
    );
  }
});
