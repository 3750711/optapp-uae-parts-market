import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { createServiceClient } from '../_shared/client.ts';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface EnrichmentRequest {
  product_id: string;
  title: string;
  brand?: string;
  model?: string;
  description?: string;
}

interface EnrichmentResponse {
  title_ru: string;
  brand: string | null;
  model: string | null;
  confidence: number;
  processing_time_ms?: number;
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const startTime = Date.now();
    const supabase = createServiceClient();
    const OPENAI_API_KEY = Deno.env.get('OPENAI_API_KEY');
    
    if (!OPENAI_API_KEY) {
      throw new Error('OPENAI_API_KEY not found');
    }

    const { product_id, title, brand, model, description, auto_trigger = false }: EnrichmentRequest & { auto_trigger?: boolean } = await req.json();

    console.log(`ü§ñ AI enrichment started for product ${product_id}: "${title}" (auto: ${auto_trigger})`);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—Ä–∞–≤–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    const getRecentCorrections = async (limit = 20) => {
      const { data } = await supabase
        .from('ai_moderation_corrections')
        .select('ai_original_title, moderator_corrected_title, moderator_corrected_brand, moderator_corrected_model')
        .order('created_at', { ascending: false })
        .limit(limit);
      
      if (!data || data.length === 0) return '';
      
      return `
–£—á–∏—Å—å –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—Ä–∞–≤–∫–∞—Ö –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:
${data.map(d => `"${d.ai_original_title}" ‚Üí "${d.moderator_corrected_title}"`).join('\n')}
`;
    };

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±—Ä–µ–Ω–¥–æ–≤ –∏ –º–æ–¥–µ–ª–µ–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const { data: brands } = await supabase
      .from('car_brands')
      .select('name')
      .order('name');
      
    const { data: models } = await supabase
      .from('car_models')  
      .select('name, brand_id, car_brands(name)')
      .order('name');

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –ø–æ –±—Ä–µ–Ω–¥–∞–º –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const brandsWithModels = brands?.map(brand => {
      const brandModels = models?.filter(m => m.car_brands?.name === brand.name);
      return `${brand.name}: ${brandModels?.map(m => m.name).join(', ') || '–Ω–µ—Ç –º–æ–¥–µ–ª–µ–π'}`;
    }).join('\n') || '';
    
    const brandsList = brands?.map(b => b.name).join(', ') || '';

    // –ü–æ–ª—É—á–∞–µ–º –æ–±—É—á–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
    const corrections = await getRecentCorrections();

    // –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –æ–±—É—á–µ–Ω–∏–µ–º –Ω–∞ –ø—Ä–∞–≤–∫–∞—Ö –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–µ–π
    const prompt = `${corrections}

–í–ê–ñ–ù–û! –≠—Ç–æ —Ç–æ–≤–∞—Ä –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–µ–π. –°–ª–µ–¥—É–π –ø—Ä–∞–≤–∏–ª–∞–º:

1. –ö–û–î–´ –î–ï–¢–ê–õ–ï–ô –ù–ï –Ø–í–õ–Ø–Æ–¢–°–Ø –ú–û–î–ï–õ–Ø–ú–ò –ê–í–¢–û–ú–û–ë–ò–õ–ï–ô:
   - 1ZZ, 2JZ, K20A, B20, SR20 - —ç—Ç–æ –∫–æ–¥—ã –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π, –ù–ï –º–æ–¥–µ–ª–∏
   - Camry, Corolla, Civic, Accord - —ç—Ç–æ –º–æ–¥–µ–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
   - –ï—Å–ª–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –µ—Å—Ç—å –∫–æ–¥ –¥–µ—Ç–∞–ª–∏ –ò –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è - –≤—ã–±–∏—Ä–∞–π –ú–û–î–ï–õ–¨ –ê–í–¢–û–ú–û–ë–ò–õ–Ø

2. –ü–†–ê–í–ò–õ–ê –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ú–ê–†–ö–ò –ò –ú–û–î–ï–õ–ò:
   - –ï—Å–ª–∏ —É–ø–æ–º—è–Ω—É—Ç "Camry" ‚Üí –º–∞—Ä–∫–∞: Toyota, –º–æ–¥–µ–ª—å: Camry
   - –ï—Å–ª–∏ —É–ø–æ–º—è–Ω—É—Ç "Civic" ‚Üí –º–∞—Ä–∫–∞: Honda, –º–æ–¥–µ–ª—å: Civic
   - –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –∫–æ–¥ –¥–≤–∏–≥–∞—Ç–µ–ª—è (1ZZ) –±–µ–∑ –º–æ–¥–µ–ª–∏ ‚Üí –º–∞—Ä–∫–∞: Toyota (–µ—Å–ª–∏ –∑–Ω–∞–µ—à—å), –º–æ–¥–µ–ª—å: null
   
3. –ß–ê–°–¢–´–ï –û–®–ò–ë–ö–ò: engene‚Üíengine, bamper‚Üíbumper, transmision‚Üítransmission

4. –ü–†–ò–ú–ï–†–´ –ü–†–ê–í–ò–õ–¨–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–ò:
   - "engine 1zz camry" ‚Üí –î–≤–∏–≥–∞—Ç–µ–ª—å 1ZZ –¥–ª—è Toyota Camry ‚Üí brand: Toyota, model: Camry
   - "1zz engine toyota" ‚Üí –î–≤–∏–≥–∞—Ç–µ–ª—å 1ZZ Toyota ‚Üí brand: Toyota, model: null
   - "civic k20 engine" ‚Üí –î–≤–∏–≥–∞—Ç–µ–ª—å K20 –¥–ª—è Honda Civic ‚Üí brand: Honda, model: Civic

–¢–æ–≤–∞—Ä: "${title}"

–î–û–°–¢–£–ü–ù–´–ï –ú–ê–†–ö–ò –ò –ò–• –ú–û–î–ï–õ–ò:
${brandsWithModels}

–¢–û–õ–¨–ö–û —ç—Ç–∏ –º–∞—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã: ${brandsList}

JSON –æ—Ç–≤–µ—Ç:
{
  "title_ru": "–Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º (–∏—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫–∏, –ø–µ—Ä–µ–≤–µ–¥–∏)",
  "brand": "—Ç–æ—á–Ω–∞—è –º–∞—Ä–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ null", 
  "model": "—Ç–æ—á–Ω–∞—è –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–ù–ï –∫–æ–¥ –¥–µ—Ç–∞–ª–∏) –∏–ª–∏ null",
  "confidence": 0.0-1.0
}`;

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${OPENAI_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          { role: 'user', content: prompt }
        ],
        response_format: { 
          type: "json_schema",
          json_schema: {
            name: "product_enrichment",
            schema: {
              type: "object",
              properties: {
                title_ru: { type: "string" },
                brand: { type: ["string", "null"] },
                model: { type: ["string", "null"] },
                confidence: { type: "number", minimum: 0, maximum: 1 }
              },
              required: ["title_ru", "confidence"]
            }
          }
        },
        temperature: 0.3,
        max_tokens: 1000
      }),
    });

    if (!response.ok) {
      const errorData = await response.text();
      console.error('OpenAI API error:', errorData);
      throw new Error(`OpenAI API error: ${response.status}`);
    }

    const completion = await response.json();
    const result: EnrichmentResponse = JSON.parse(completion.choices[0].message.content);
    
    const processingTime = Date.now() - startTime;
    result.processing_time_ms = processingTime;

    console.log(`‚úÖ AI enrichment completed in ${processingTime}ms with confidence: ${result.confidence}`);

    // –í–ê–ñ–ù–û: –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è (title, brand, model), —Ç–æ–ª—å–∫–æ AI –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    console.log(`üí° Saving AI suggestions for moderator review (confidence: ${result.confidence})`);
    
    const updateData: any = {
      ai_original_title: title, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –ø—Ä–æ–¥–∞–≤—Ü–∞
      ai_suggested_title: result.title_ru,
      ai_suggested_brand: result.brand,
      ai_suggested_model: result.model,
      ai_confidence: result.confidence,
      ai_enriched_at: new Date().toISOString(),
      requires_moderation: true // –í—Å–µ–≥–¥–∞ —Ç—Ä–µ–±—É–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    };

    await supabase
      .from('products')
      .update(updateData)
      .eq('id', product_id);

    console.log('‚úÖ AI suggestions saved, awaiting moderator approval');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await supabase
      .from('ai_enrichment_logs')
      .insert({
        product_id,
        input_data: { title, brand, model, description },
        ai_response: result,
        confidence: result.confidence,
        processing_time_ms: processingTime
      });

    console.log('üìù AI enrichment log saved');
    
    return new Response(JSON.stringify(result), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
    
  } catch (error) {
    console.error('‚ùå Error in ai-enrich-product:', error);
    
    return new Response(
      JSON.stringify({ 
        error: error.message,
        details: 'AI enrichment failed' 
      }), 
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  }
});