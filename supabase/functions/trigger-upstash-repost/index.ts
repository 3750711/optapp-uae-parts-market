import { createServiceClient } from '../_shared/client.ts';
import { getQStashConfig, publishToQueue } from '../_shared/qstash-config.ts';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

Deno.serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { productId, priceChanged, newPrice, oldPrice, idempotencyKey, userId } = await req.json();

    console.log('üìÆ [QStash] Received request:', { productId, idempotencyKey });

    // –°–æ–∑–¥–∞–µ–º Supabase client –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
    const supabaseClient = createServiceClient();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–≤–∞—Ä –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ cooldown
    const { data: product, error: productError } = await supabaseClient
      .from('products')
      .select('seller_id, title, lot_number, price, brand, model, last_notification_sent_at')
      .eq('id', productId)
      .single();

    if (productError || !product) {
      console.error('‚ùå [QStash] Product not found:', productError);
      return new Response(
        JSON.stringify({ error: 'Product not found' }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 404 }
      );
    }

    if (product.seller_id !== userId) {
      console.error('‚ùå [QStash] Unauthorized access attempt');
      return new Response(
        JSON.stringify({ error: 'Unauthorized' }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 403 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown –¥–ª—è –Ω–µ-–∞–¥–º–∏–Ω–æ–≤
    const { data: profile } = await supabaseClient
      .from('profiles')
      .select('user_type')
      .eq('id', userId)
      .single();

    const isAdmin = profile?.user_type === 'admin';

    if (!isAdmin && product.last_notification_sent_at) {
      const hoursSince = (Date.now() - new Date(product.last_notification_sent_at).getTime()) / 3600000;
      if (hoursSince < 72) {
        const hoursRemaining = Math.ceil(72 - hoursSince);
        console.warn(`‚è±Ô∏è [QStash] Cooldown active for product ${productId}: ${hoursRemaining} hours remaining`);
        return new Response(
          JSON.stringify({ 
            error: 'Cooldown active',
            hours_remaining: hoursRemaining,
            message: `You can repost in ${hoursRemaining} hours`
          }),
          { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 429 }
        );
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º QStash –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ app_settings
    const qstashConfig = await getQStashConfig();
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º payload –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    const payload = {
      productId,
      priceChanged,
      newPrice,
      oldPrice,
      lotNumber: product.lot_number,
      title: product.title,
      brand: product.brand,
      model: product.model,
      currentPrice: product.price
    };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ shared utility —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
    const result = await publishToQueue(
      qstashConfig,
      'repost',
      payload,
      idempotencyKey
    );
    
    console.log('‚úÖ [QStash] Repost queued successfully:', {
      messageId: result.messageId,
      productId,
      lotNumber: product.lot_number
    });

    return new Response(
      JSON.stringify({ 
        success: true,
        messageId: result.messageId
      }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );

  } catch (error) {
    console.error('üí• [QStash] Error:', error);
    return new Response(
      JSON.stringify({ error: error.message }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 500 }
    );
  }
});
