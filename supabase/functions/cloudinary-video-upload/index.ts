
import { corsHeaders } from '../_shared/cors.ts'

const CLOUDINARY_CLOUD_NAME = 'dcuziurrb';

interface CloudinaryVideoResponse {
  public_id: string;
  secure_url: string;
  width?: number;
  height?: number;
  bytes: number;
  format: string;
  version: number;
  duration?: number;
  resource_type: 'video';
  bit_rate?: number;
  frame_rate?: number;
  video?: {
    pix_format: string;
    codec: string;
    level?: number;
    bit_rate?: number;
  };
  audio?: {
    codec: string;
    bit_rate?: number;
    frequency?: number;
    channels?: number;
  };
}

interface VideoUploadResponse {
  success: boolean;
  publicId?: string;
  cloudinaryUrl?: string;
  thumbnailUrl?: string;
  originalSize?: number;
  compressedSize?: number;
  format?: string;
  duration?: number;
  width?: number;
  height?: number;
  bitRate?: number;
  frameRate?: number;
  error?: string;
}

// –°—Ç—Ä–æ–≥–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –≤–∏–¥–µ–æ
const ALLOWED_VIDEO_FORMATS = ['mp4', 'webm', 'mov', 'avi'];
const MAX_VIDEO_SIZE_MB = 20; // –£–º–µ–Ω—å—à–µ–Ω–æ —Å 100MB –¥–æ 20MB
const MAX_DURATION_SECONDS = 180; // 3 –º–∏–Ω—É—Ç—ã –≤–º–µ—Å—Ç–æ 5
const UPLOAD_TIMEOUT_MS = 30000; // 30 —Å–µ–∫—É–Ω–¥

Deno.serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log('üé• –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –Ω–∞—á–∞—Ç–∞');
    
    const apiKey = Deno.env.get('CLOUDINARY_API_KEY')?.trim();
    const apiSecret = Deno.env.get('CLOUDINARY_API_SECRET')?.trim();
    
    console.log('üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ Cloudinary credentials:', {
      hasApiKey: !!apiKey,
      hasApiSecret: !!apiSecret,
      apiKeyLength: apiKey?.length || 0
    });
    
    if (!apiKey || !apiSecret) {
      console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç Cloudinary credentials');
      throw new Error('Cloudinary credentials –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ FormData
    console.log('üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ FormData –∑–∞–ø—Ä–æ—Å–∞');
    const formData = await req.formData();
    
    const file = formData.get('file') as File;
    const productId = formData.get('productId') as string;
    const customPublicId = formData.get('customPublicId') as string;
    
    console.log('üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ FormData:', {
      hasFile: !!file,
      fileName: file?.name,
      fileSize: file?.size,
      productId,
      customPublicId
    });

    if (!file) {
      throw new Error('–§–∞–π–ª –≤–∏–¥–µ–æ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ FormData');
    }

    // –°–¢–†–û–ì–ê–Ø –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
    const fileExtension = file.name.split('.').pop()?.toLowerCase();
    console.log('üîç –°—Ç—Ä–æ–≥–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞:', {
      fileName: file.name,
      extension: fileExtension,
      allowedFormats: ALLOWED_VIDEO_FORMATS,
      fileType: file.type
    });
    
    if (!fileExtension || !ALLOWED_VIDEO_FORMATS.includes(fileExtension)) {
      throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–∏–¥–µ–æ. –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: ${ALLOWED_VIDEO_FORMATS.join(', ')}`);
    }

    // –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ MIME
    const allowedMimeTypes = [
      'video/mp4', 
      'video/webm', 
      'video/quicktime', 
      'video/x-msvideo'
    ];
    
    if (!allowedMimeTypes.includes(file.type) && !file.type.startsWith('video/')) {
      throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π MIME —Ç–∏–ø: ${file.type}. –û–∂–∏–¥–∞–µ—Ç—Å—è –≤–∏–¥–µ–æ —Ñ–∞–π–ª.`);
    }

    // –°–¢–†–û–ì–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
    const fileSizeMB = file.size / (1024 * 1024);
    console.log('üìè –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞:', {
      sizeBytes: file.size,
      sizeMB: fileSizeMB.toFixed(2),
      maxMB: MAX_VIDEO_SIZE_MB
    });
    
    if (fileSizeMB > MAX_VIDEO_SIZE_MB) {
      throw new Error(`–í–∏–¥–µ–æ —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${MAX_VIDEO_SIZE_MB}MB, –≤–∞—à —Ñ–∞–π–ª: ${fileSizeMB.toFixed(2)}MB`);
    }

    console.log('üìπ –ù–∞—á–∞–ª–æ –±–∞–∑–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ –≤ Cloudinary:', {
      fileName: file.name,
      sizeKB: Math.round(file.size / 1024),
      format: fileExtension
    });

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ public_id
    const timestamp = Date.now();
    const publicId = customPublicId || `video_${productId || timestamp}_${timestamp}_${Math.random().toString(36).substring(7)}`;
    
    console.log('üè∑Ô∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π public ID:', publicId);
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –ë–ê–ó–û–í–û–ô FormData –¥–ª—è Cloudinary (–ë–ï–ó —Å–ª–æ–∂–Ω—ã—Ö —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π)
    const cloudinaryFormData = new FormData();
    cloudinaryFormData.append('file', file);
    cloudinaryFormData.append('api_key', apiKey);
    cloudinaryFormData.append('timestamp', Math.round(timestamp / 1000).toString());
    cloudinaryFormData.append('public_id', publicId);
    cloudinaryFormData.append('folder', 'videos');
    cloudinaryFormData.append('resource_type', 'video');
    
    // –ë–ê–ó–û–í–ê–Ø —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è)
    const basicTransformation = 'q_auto:good,f_auto';
    cloudinaryFormData.append('transformation', basicTransformation);
    
    console.log('üé® –ë–∞–∑–æ–≤–∞—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–∏–¥–µ–æ:', basicTransformation);

    // –¢–û–ß–ù–ê–Ø –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ - –ö–û–ü–ò–†–£–ï–ú –ê–õ–ì–û–†–ò–¢–ú –ò–ó –§–£–ù–ö–¶–ò–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô
    const timestampString = Math.round(timestamp / 1000).toString();
    
    console.log('üîê –®–∞–≥ 1 - –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏:');
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (–ë–ï–ó api_key, file –∏ signature)
    const signatureParams: Record<string, string> = {
      folder: 'videos',
      public_id: publicId,
      resource_type: 'video',
      timestamp: timestampString,
      transformation: basicTransformation
    };
    
    console.log('üîê –®–∞–≥ 2 - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–ø–∏—Å–∏:', signatureParams);
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏ –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    const sortedKeys = Object.keys(signatureParams).sort();
    console.log('üîê –®–∞–≥ 3 - –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏:', sortedKeys);
    
    // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –∑–∞–ø—Ä–æ—Å–∞
    const queryString = sortedKeys
      .map(key => `${key}=${signatureParams[key]}`)
      .join('&');
    
    console.log('üîê –®–∞–≥ 4 - –°—Ç—Ä–æ–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', queryString);
    
    // –î–æ–±–∞–≤–ª—è–µ–º API secret –≤ –∫–æ–Ω—Ü–µ
    const stringToSign = `${queryString}${apiSecret}`;
    
    console.log('üîê –®–∞–≥ 5 - –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏:', {
      queryString,
      stringToSignLength: stringToSign.length,
      stringToSignStart: stringToSign.substring(0, 100),
      apiSecretPresent: !!apiSecret
    });
    
    const encoder = new TextEncoder();
    const data = encoder.encode(stringToSign);
    const hashBuffer = await crypto.subtle.digest('SHA-1', data);
    const hashArray = Array.from(new Uint8Array(hashBuffer));
    const signature = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
    
    cloudinaryFormData.append('signature', signature);
    
    console.log('üîè –®–∞–≥ 6 - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å:', {
      signature: signature.substring(0, 10) + '...',
      signatureLength: signature.length
    });

    console.log('‚òÅÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –≤ Cloudinary —Å —Ç–∞–π–º-–∞—É—Ç–æ–º 30 —Å–µ–∫...');

    // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞ —Å —Ç–∞–π–º-–∞—É—Ç–æ–º
    const uploadWithTimeout = Promise.race([
      fetch(`https://api.cloudinary.com/v1_1/${CLOUDINARY_CLOUD_NAME}/video/upload`, {
        method: 'POST',
        body: cloudinaryFormData,
      }),
      new Promise<never>((_, reject) => 
        setTimeout(() => reject(new Error('–¢–∞–π–º-–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ (30 —Å–µ–∫)')), UPLOAD_TIMEOUT_MS)
      )
    ]);

    const uploadResponse = await uploadWithTimeout;

    console.log('üì• –û—Ç–≤–µ—Ç Cloudinary:', {
      status: uploadResponse.status,
      statusText: uploadResponse.statusText,
      ok: uploadResponse.ok
    });

    if (!uploadResponse.ok) {
      const errorText = await uploadResponse.text();
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Cloudinary:', {
        status: uploadResponse.status,
        statusText: uploadResponse.statusText,
        errorText
      });
      throw new Error(`–û—à–∏–±–∫–∞ Cloudinary: ${uploadResponse.status} ${errorText}`);
    }

    const cloudinaryResult: CloudinaryVideoResponse = await uploadResponse.json();
    
    console.log('‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', {
      publicId: cloudinaryResult.public_id,
      secureUrl: cloudinaryResult.secure_url,
      duration: cloudinaryResult.duration,
      format: cloudinaryResult.format,
      sizeKB: Math.round(cloudinaryResult.bytes / 1024),
      width: cloudinaryResult.width,
      height: cloudinaryResult.height
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ
    if (cloudinaryResult.duration && cloudinaryResult.duration > MAX_DURATION_SECONDS) {
      console.warn('‚ö†Ô∏è –í–∏–¥–µ–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:', {
        duration: cloudinaryResult.duration,
        maxDuration: MAX_DURATION_SECONDS
      });
      // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É, —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç—ã—Ö URL –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π
    const optimizedVideoUrl = `https://res.cloudinary.com/${CLOUDINARY_CLOUD_NAME}/video/upload/${basicTransformation}/${cloudinaryResult.public_id}`;
    const thumbnailUrl = `https://res.cloudinary.com/${CLOUDINARY_CLOUD_NAME}/video/upload/f_jpg,w_300,h_200,c_fill,q_auto:good/${cloudinaryResult.public_id}.jpg`;

    console.log('üñºÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ URL:', {
      optimizedVideoUrl,
      thumbnailUrl
    });

    const response: VideoUploadResponse = {
      success: true,
      publicId: cloudinaryResult.public_id,
      cloudinaryUrl: optimizedVideoUrl,
      thumbnailUrl,
      originalSize: cloudinaryResult.bytes,
      compressedSize: Math.round(cloudinaryResult.bytes * 0.8), // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
      format: cloudinaryResult.format,
      duration: cloudinaryResult.duration,
      width: cloudinaryResult.width,
      height: cloudinaryResult.height,
      bitRate: cloudinaryResult.bit_rate,
      frameRate: cloudinaryResult.frame_rate
    };

    console.log('üéâ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç');

    return new Response(JSON.stringify(response), {
      status: 200,
      headers: {
        ...corsHeaders,
        'Content-Type': 'application/json',
      },
    });

  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ:', error);
    
    const errorResponse: VideoUploadResponse = {
      success: false,
      error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ'
    };

    return new Response(JSON.stringify(errorResponse), {
      status: 500,
      headers: {
        ...corsHeaders,
        'Content-Type': 'application/json',
      },
    });
  }
});
