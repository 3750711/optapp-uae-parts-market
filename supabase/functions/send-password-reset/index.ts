
import { serve } from "https://deno.land/std@0.190.0/http/server.ts";
import { Resend } from "npm:resend@2.0.0";
import { createServiceClient } from '../_shared/client.ts';

const resend = new Resend(Deno.env.get("RESEND_API_KEY"));
const supabase = createServiceClient();

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ URL
const PARTSBAY_BASE_URL = "https://partsbay.ae";

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

interface EmailRequest {
  email: string;
  optId?: string;
  resetLink?: string;
  emailChangeInfo?: {
    oldEmail: string;
    newEmail: string;
    type: 'email_change_notification' | 'email_change_success';
  };
}

const handler = async (req: Request): Promise<Response> => {
  // Handle CORS preflight requests
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log("Email request received");
    
    const { email, optId, resetLink, emailChangeInfo }: EmailRequest = await req.json();
    
    console.log("Processing email for:", email, "type:", emailChangeInfo?.type || "password_reset");

    if (!email) {
      return new Response(
        JSON.stringify({ 
          success: false, 
          message: "Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" 
        }),
        {
          status: 400,
          headers: { "Content-Type": "application/json", ...corsHeaders },
        }
      );
    }

    let subject: string;
    let htmlContent: string;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
    if (emailChangeInfo?.type === 'email_change_notification') {
      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç–∞—Ä—ã–π email –æ —Ç–æ–º, —á—Ç–æ email –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω
      subject = "üîê –í–∞—à email –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω - PartsBay.ae";
      htmlContent = `
        <!DOCTYPE html>
        <html>
          <head>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Email –∏–∑–º–µ–Ω–µ–Ω - PartsBay.ae</title>
            <style>
              body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px; }
              .header { background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }
              .content { background: #ffffff; padding: 30px; border: 1px solid #e5e7eb; }
              .footer { background: #f9fafb; padding: 20px; text-align: center; border-radius: 0 0 10px 10px; border: 1px solid #e5e7eb; border-top: none; }
              .warning { background: #fef3c7; border: 1px solid #f59e0b; padding: 15px; border-radius: 8px; margin: 20px 0; }
              .info-box { background: #f0f9ff; border: 1px solid #0ea5e9; padding: 15px; border-radius: 8px; margin: 20px 0; }
            </style>
          </head>
          <body>
            <div class="header">
              <h1>üîê Email –∏–∑–º–µ–Ω–µ–Ω</h1>
              <p>PartsBay.ae - –ê–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏ –∏–∑ –û–ê–≠</p>
            </div>
            
            <div class="content">
              <h2>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!</h2>
              
              <p>–ú—ã —É–≤–µ–¥–æ–º–ª—è–µ–º –≤–∞—Å –æ —Ç–æ–º, —á—Ç–æ email –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ PartsBay.ae –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω.</p>
              
              <div class="info-box">
                <strong>–î–µ—Ç–∞–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è:</strong>
                <ul>
                  <li><strong>–°—Ç–∞—Ä—ã–π email:</strong> ${emailChangeInfo.oldEmail}</li>
                  <li><strong>–ù–æ–≤—ã–π email:</strong> ${emailChangeInfo.newEmail}</li>
                  <li><strong>–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è:</strong> ${new Date().toLocaleString('ru-RU')}</li>
                </ul>
              </div>
              
              <div class="warning">
                <strong>‚ö†Ô∏è –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∏ –Ω–µ –≤—ã:</strong>
                <ul>
                  <li>–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π</li>
                  <li>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞</li>
                  <li>–°–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–æ–∑—Ä–µ–Ω–∏—è –Ω–∞ –≤–∑–ª–æ–º</li>
                </ul>
              </div>
              
              <p>–ï—Å–ª–∏ –≤—ã –∏–∑–º–µ–Ω–∏–ª–∏ email —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, –º–æ–∂–µ—Ç–µ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ –ø–∏—Å—å–º–æ.</p>
              
              <p>–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–º –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ <a href="${PARTSBAY_BASE_URL}/profile">–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</a>.</p>
            </div>
            
            <div class="footer">
              <p><strong>PartsBay.ae</strong></p>
              <p>–ê–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏ –∏–∑ –û–ê–≠ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É</p>
              <p style="font-size: 12px; color: #6b7280;">
                –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ —á–µ—Ä–µ–∑ —Å–∞–π—Ç –∏–ª–∏ Telegram.
              </p>
            </div>
          </body>
        </html>
      `;
    } else if (emailChangeInfo?.type === 'email_change_success') {
      // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤—ã–π email
      subject = "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! Email —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω - PartsBay.ae";
      htmlContent = `
        <!DOCTYPE html>
        <html>
          <head>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å - PartsBay.ae</title>
            <style>
              body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px; }
              .header { background: linear-gradient(135deg, #22c55e 0%, #16a34a 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }
              .content { background: #ffffff; padding: 30px; border: 1px solid #e5e7eb; }
              .footer { background: #f9fafb; padding: 20px; text-align: center; border-radius: 0 0 10px 10px; border: 1px solid #e5e7eb; border-top: none; }
              .success-box { background: #f0fdf4; border: 1px solid #22c55e; padding: 15px; border-radius: 8px; margin: 20px 0; }
              .info-box { background: #f0f9ff; border: 1px solid #0ea5e9; padding: 15px; border-radius: 8px; margin: 20px 0; }
            </style>
          </head>
          <body>
            <div class="header">
              <h1>üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</h1>
              <p>PartsBay.ae - –ê–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏ –∏–∑ –û–ê–≠</p>
            </div>
            
            <div class="content">
              <h2>Email —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!</h2>
              
              <div class="success-box">
                <strong>‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</strong>
                <p>–í–∞—à email –∞–¥—Ä–µ—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: <strong>${emailChangeInfo.newEmail}</strong></p>
                <p>–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å.</p>
              </div>
              
              <div class="info-box">
                <strong>–ß—Ç–æ –¥–∞–ª—å—à–µ?</strong>
                <ul>
                  <li>–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –Ω–∞ –Ω–æ–≤—ã–π email</li>
                  <li>–î–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤—ã–π email –∞–¥—Ä–µ—Å</li>
                  <li>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –∏ –∏—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã</li>
                </ul>
              </div>
              
              <p>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PartsBay.ae! –ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏.</p>
              
              <p><strong>–ß—Ç–æ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:</strong></p>
              <ul>
                <li>üöó –®–∏—Ä–æ–∫–∏–π –≤—ã–±–æ—Ä –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–µ–π –∏–∑ –û–ê–≠</li>
                <li>üåç –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É</li>
                <li>üí∞ –í—ã–≥–æ–¥–Ω—ã–µ —Ü–µ–Ω—ã –æ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤</li>
                <li>üîß –ü–æ–º–æ—â—å –≤ –ø–æ–¥–±–æ—Ä–µ –∑–∞–ø—á–∞—Å—Ç–µ–π</li>
              </ul>
              
              <p>–ù–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–ø—á–∞—Å—Ç–µ–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –Ω–∞ <a href="${PARTSBAY_BASE_URL}">partsbay.ae</a></p>
            </div>
            
            <div class="footer">
              <p><strong>PartsBay.ae</strong></p>
              <p>–ê–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏ –∏–∑ –û–ê–≠ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É</p>
              <p style="font-size: 12px; color: #6b7280;">
                –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ —á–µ—Ä–µ–∑ —Å–∞–π—Ç –∏–ª–∏ Telegram.
              </p>
            </div>
          </body>
        </html>
      `;
    } else {
      // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–±—Ä–æ—Å–µ –ø–∞—Ä–æ–ª—è
      console.log("Password reset requested for email:", email, "optId:", optId || "none");

      // Get client IP and user agent for security logging and rate limiting
      const clientIP = req.headers.get('x-forwarded-for') || req.headers.get('x-real-ip') || 'unknown';
      const userAgent = req.headers.get('user-agent') || 'unknown';

      // Check IP-based rate limit (10 attempts per hour per IP)
      const { data: rateLimitCheck, error: rateLimitError } = await supabase.rpc('check_ip_rate_limit', {
        p_ip_address: clientIP,
        p_action: 'password_reset_request',
        p_limit: 10,
        p_window_minutes: 60
      });

      if (rateLimitError || !rateLimitCheck?.allowed) {
        await supabase.rpc('log_security_event', {
          p_action: 'password_reset_rate_limit',
          p_user_id: null,
          p_ip_address: clientIP,
          p_user_agent: userAgent,
          p_error_message: 'IP rate limit exceeded',
          p_details: {
            reason: 'IP rate limit exceeded',
            limit: 10,
            window_minutes: 60,
            remaining: rateLimitCheck?.remaining || 0,
            email: email
          }
        });

        return new Response(
          JSON.stringify({
            success: false,
            message: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ —Å –≤–∞—à–µ–≥–æ IP-–∞–¥—Ä–µ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
          }),
          { 
            status: 429, 
            headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
          }
        );
      }

      // Validate user exists before creating reset code
      const { data: userProfile, error: validationError } = await supabase
        .from('profiles')
        .select('id, email')
        .eq('email', email)
        .single();

      if (validationError || !userProfile) {
        console.error("User validation error:", validationError);
        
        // Log security event
        await supabase.rpc('log_security_event', {
          p_action: 'password_reset_nonexistent_user',
          p_user_id: null,
          p_ip_address: clientIP,
          p_user_agent: userAgent,
          p_error_message: validationError?.message || 'User does not exist',
          p_details: {
            email: email,
            validation_error: validationError?.message
          }
        });

        return new Response(
          JSON.stringify({ 
            success: true, // Return success to prevent email enumeration
            message: "–ï—Å–ª–∏ —ç—Ç–æ—Ç email —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∫–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"
          }),
          {
            status: 200,
            headers: { "Content-Type": "application/json", ...corsHeaders },
          }
        );
      }

      // User exists, proceed with creating reset code

      const { data: codeResult, error: codeError } = await supabase.rpc(
        'send_password_reset_code',
        { 
          p_email: email,
          p_opt_id: optId || null
        }
      );

      if (codeError) {
        console.error("Database error:", codeError);
        
        // Log security event
        await supabase.rpc('log_security_event', {
          p_action: 'password_reset_code_creation_error',
          p_user_id: userProfile.id,
          p_ip_address: clientIP,
          p_user_agent: userAgent,
          p_error_message: codeError.message,
          p_details: {
            email: email,
            opt_id: optId
          }
        });

        return new Response(
          JSON.stringify({ 
            success: false,
            message: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–¥ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è",
            details: codeError.message 
          }),
          {
            status: 500,
            headers: { 
              "Content-Type": "application/json", 
              ...corsHeaders 
            },
          }
        );
      }

      const resetCode = codeResult?.code || codeResult;

      if (!resetCode) {
        return new Response(
          JSON.stringify({
            success: false,
            message: "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
          }),
          {
            status: 429,
            headers: { "Content-Type": "application/json", ...corsHeaders },
          }
        );
      }

      // Log successful code creation
      await supabase.rpc('log_security_event', {
        p_action: 'password_reset_code_created',
        p_user_id: userProfile.id,
        p_ip_address: clientIP,
        p_user_agent: userAgent,
        p_error_message: null,
        p_details: {
          email: email,
          opt_id: optId,
          code_length: resetCode.length
        }
      });
      console.log("Generated reset code:", resetCode ? "***" : "empty");

      // HTML —à–∞–±–ª–æ–Ω –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è —Å –∫–æ–¥–æ–º
      subject = "üîê –ö–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è - PartsBay.ae";
      htmlContent = `
        <!DOCTYPE html>
        <html>
          <head>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è - PartsBay.ae</title>
            <style>
              body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px; }
              .header { background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }
              .content { background: #ffffff; padding: 30px; border: 1px solid #e5e7eb; }
              .footer { background: #f9fafb; padding: 20px; text-align: center; border-radius: 0 0 10px 10px; border: 1px solid #e5e7eb; border-top: none; }
              .code-box { background: #f0f9ff; border: 2px solid #0ea5e9; padding: 20px; border-radius: 8px; margin: 20px 0; text-align: center; }
              .code { font-size: 32px; font-weight: bold; letter-spacing: 8px; color: #0369a1; font-family: monospace; }
              .warning { background: #fef3c7; border: 1px solid #f59e0b; padding: 15px; border-radius: 8px; margin: 20px 0; }
              .info-box { background: #f0f9ff; border: 1px solid #0ea5e9; padding: 15px; border-radius: 8px; margin: 20px 0; }
            </style>
          </head>
          <body>
            <div class="header">
              <h1>üîê –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è</h1>
              <p>PartsBay.ae - –ê–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏ –∏–∑ –û–ê–≠</p>
            </div>
            
            <div class="content">
              <h2>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!</h2>
              
              <p>–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ PartsBay.ae.</p>
              
              ${optId ? `
              <div class="info-box">
                <strong>–í–∞—à OPT ID:</strong> ${optId}
              </div>
              ` : ''}
              
              <p>–í–∞—à –∫–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è:</p>
              
              <div class="code-box">
                <div class="code">${resetCode}</div>
                <p style="margin: 10px 0 0 0; font-size: 14px; color: #6b7280;">
                  –í–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
                </p>
              </div>
              
              <div class="warning">
                <strong>‚ö†Ô∏è –í–∞–∂–Ω–æ:</strong>
                <ul>
                  <li>–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç</li>
                  <li>–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ</li>
                  <li>–ù–∏–∫–æ–º—É –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥</li>
                  <li>–ö–æ–¥ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑</li>
                </ul>
              </div>
              
              <p>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É <a href="${PARTSBAY_BASE_URL}/forgot-password">—Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è</a> –∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≤—ã—à–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è.</p>
            </div>
            
            <div class="footer">
              <p><strong>PartsBay.ae</strong></p>
              <p>–ê–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏ –∏–∑ –û–ê–≠ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É</p>
              <p style="font-size: 12px; color: #6b7280;">
                –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ —á–µ—Ä–µ–∑ —Å–∞–π—Ç –∏–ª–∏ Telegram.
              </p>
            </div>
          </body>
        </html>
      `;
    }

    const emailResponse = await resend.emails.send({
      from: "PartsBay.ae <noreply@partsbay.ae>",
      to: [email],
      subject: subject,
      html: htmlContent,
    });

    console.log("Email sent successfully:", emailResponse);

    return new Response(
      JSON.stringify({ 
        success: true, 
        message: emailChangeInfo ? "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" : "–ö–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email",
        emailId: emailResponse.data?.id 
      }), 
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
          ...corsHeaders,
        },
      }
    );
  } catch (error: any) {
    console.error("Error in send-password-reset function:", error);
    
    // Determine error type for better user feedback
    let errorMessage = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email";
    let statusCode = 500;
    
    if (error.message?.includes("Invalid")) {
      errorMessage = "–ù–µ–≤–µ—Ä–Ω—ã–π email –∞–¥—Ä–µ—Å";
      statusCode = 400;
    } else if (error.message?.includes("rate limit")) {
      errorMessage = "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
      statusCode = 429;
    } else if (error.message?.includes("domain")) {
      errorMessage = "Email –¥–æ–º–µ–Ω –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω";
      statusCode = 422;
    }
    
    return new Response(
      JSON.stringify({ 
        success: false,
        message: errorMessage,
        details: error.message 
      }),
      {
        status: statusCode,
        headers: { 
          "Content-Type": "application/json", 
          ...corsHeaders 
        },
      }
    );
  }
};

serve(handler);
